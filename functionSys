/* global param getPlayer $dbs dbSelect */
'function' !== typeof Object.assign &&
  Object.defineProperty(Object, 'assign', {
    value: function(e, t) {
      'use strict'
      if (null == e)
        throw new TypeError('Cannot convert undefined or null to object')
      for (var n = Object(e), a = 1; a < arguments.length; a++) {
        var r = arguments[a]
        if (null != r)
          for (var o in r)
            Object.prototype.hasOwnProperty.call(r, o) && (n[o] = r[o])
      }
      return n
    },
    writable: !0,
    configurable: !0
  }),
  (Array.prototype.shuffle = function() {
    var e,
      t,
      n,
      a = this
    for (e = a.length - 1; 0 < e; e--)
      (t = Math.floor(Math.random() * (e + 1))),
        (n = a[e]),
        (a[e] = a[t]),
        (a[t] = n)
    return a
  })
var $funcs = {}
function genJsonDefaultValueByParams(e, t) {
  var n = {}
  return (
    'array' === t && (n = []),
    e && 0 < e.length && genParams(e, n, 'array' === t),
    n
  )
}
function genParams(e, t, n) {
  e.forEach(function(e) {
    e &&
      ('object' === e.type
        ? (n ? (t[0] = {}) : (t[e.name] = {}),
          e.children &&
            0 < e.children.length &&
            genParams(e.children, n ? t[0] : t[e.name]))
        : 'array' === e.type
        ? n
          ? (t[0] = genArrayValue(e))
          : (t[e.name] = genArrayValue(e))
        : 0 <= ['string', 'number', 'boolean'].indexOf(e.type) &&
          (n
            ? (t[0] = VALUE_DEFAULT[e.type])
            : (t[e.name] = VALUE_DEFAULT[e.type])))
  })
}
function genArrayValue(e) {
  return e.children && 0 < e.children.length
    ? e.children.map(function(e) {
        return 0 <= ['string', 'number', 'boolean'].indexOf(e.type)
          ? VALUE_DEFAULT[e.type]
          : 'object' === e.type
          ? e.children && 0 < e.children.length
            ? ((t = {}), genParams(e.children, t), t)
            : {}
          : 'array' === e.type
          ? genArrayValue(e)
          : void 0
        var t
      })
    : []
}
;($funcs['data-arr'] = {
  consoleData: function(e, t, n) {
    window && window.console
      ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
        window.console.log(e.get(t, n, 'value')))
      : console && console.log
  },
  setRawValue: function(e, t, n, a) {
    var r = []
    void 0 !== a && ((r = a), e.set(t, n, 'value', r))
  },
  setValue: function(e, t, n, a) {
    var r = []
    void 0 !== a &&
      ((r = JSON.parse(JSON.stringify(a))), e.set(t, n, 'value', r))
  },
  setOneValue: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    void 0 !== r &&
      (a || 0 === a ? (o[a] = r) : o.push(r), e.set(t, n, 'value', o))
  },
  setRowMultValue: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    void 0 !== a &&
      0 < a.length &&
      (a.map(function(e) {
        var t = e.col,
          n = e.value
        try {
          n = JSON.parse(JSON.stringify(n))
        } catch (err) {}
        t || 0 === t ? (r[t] = n) : r.push(n)
      }),
      e.set(t, n, 'value', r))
  },
  searchValue: function(e, t, n, a, b, r) {
    var o = e.get(t, n, 'value')
    if (Array.isArray(o)) {
      var u = o.indexOf(a)
      b && b(u)
      r && r('finished', -1 < u ? u : -1)
    }
  },
  searchAllValue: function(_sys, node, id, value, result, cb) {
    var array = _sys.get(node, id, 'value')
    if (array instanceof Array) {
      var arr = []
      array.map(function(val, i) {
        if (val instanceof Array) {
          var idx = []
          val.map(function(val2, j) {
            if (val2 === value) {
              arr.push([i, j])
            }
          })
        } else {
          if (val === value) {
            arr.push(i)
          }
        }
      })
      result && result(arr)
      cb && cb('finished', arr)
    }
  },
  pushItem: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    a = klona(a)
    void 0 !== a &&
      ((o = o.slice()),
      'head' === r ? o.unshift(a) : o.push(a),
      e.set(t, n, 'value', o))
  },
  pushMulVal: function(e, t, n, a) {
    var r = e.get(t, n, 'value'),
      o = []
    a = klona(a)
    if ('string' === typeof a) {
      var u = a.split(',')
      o = o.concat(r, u)
    }
    Array.isArray(a) && (o = o.concat(r, a)),
      isNaN(a) ||
        Array.isArray(a) ||
        ((r = r.slice()).push(a), Object.assign(o, r)),
      e.set(t, n, 'value', o)
  },
  insertOne: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    a = klona(a)
    void 0 !== a && void 0 !== r && (o = o.slice()).splice(r, 0, a),
      e.set(t, n, 'value', o)
  },
  insertMultiple: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    a = klona(a)
    if (void 0 !== a && void 0 !== r) {
      ;(o = o.slice()).splice(r, 0, a)
      var u = flatten(o)
      e.set(t, n, 'value', u)
    }
  },
  findRows: function(e, t, n, a, l, r, o) {
    var u,
      i =
        (((u = {
          eq: function(e, t) {
            return e == t
          },
          neq: function(e, t) {
            return e != t
          },
          gt: function(e, t) {
            return t < e
          },
          lt: function(e, t) {
            return e < t
          }
        }).gt = function(e, t) {
          return t < e
        }),
        (u.lt = function(e, t) {
          return e < t
        }),
        (u.gte = function(e, t) {
          return t <= e
        }),
        (u.lte = function(e, t) {
          return e <= t
        }),
        (u.has = function(e, t) {
          return e && e.length && -1 !== e.indexOf(t)
        }),
        (u.nhas = function(e, t) {
          return !(e && e.length && -1 !== e.indexOf(t))
        }),
        (u.in = function(e, t) {
          return t && t.length && -1 !== t.indexOf(e)
        }),
        (u.nin = function(e, t) {
          return !(t && t.length && -1 !== t.indexOf(e))
        }),
        u)
    var groupCons = []
    if (a && a.length) {
      for (var index = a.length - 1; index >= 0; index--) {
        if (a[index].pred === 'or') {
          groupCons.push(a.splice(index))
        }
        if (index === 0) {
          groupCons.push(a)
        }
      }
    }
    function canPassCons(row, cons) {
      var result = false
      if (groupCons.length) {
        // 新的AND OR 关系为：逢OR将条件并列割开
        for (
          var groupIndex = groupCons.length - 1;
          groupIndex >= 0;
          groupIndex--
        ) {
          var singleGroupCons = groupCons[groupIndex]
          var singleResult = true
          for (
            var singleIndex = 0, len = singleGroupCons.length;
            singleIndex < len;
            singleIndex++
          ) {
            var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
              row && row[singleGroupCons[singleIndex].column],
              singleGroupCons[singleIndex].value
            )
            if (!subResult) {
              singleResult = false
            }
          }
          if (singleResult) {
            result = true
          }
        }
      } else {
        result = true
      }
      return result
    }
    var s = e.get(t, n, 'value'),
      c =
        s && s.length
          ? s.filter(function(e) {
              return canPassCons(e, a)
              // return (function(e, t) {
              //   var n = !0
              //   if (t && t.length)
              //     for (var a = 0; a < t.length; ) {
              //       if (t[a] && i[t[a].comp])
              //         if (i[t[a].comp](e && e[t[a].column], t[a].value))
              //           for (; t[a + 1] && 'or' === t[a + 1].pred; ) a++
              //         else if (
              //           (t[a + 1] && 'and' === t[a + 1].pred) ||
              //           !t[a + 1]
              //         ) {
              //           n = !1
              //           break
              //         }
              //       a++
              //     }
              //   return n
              // })(e, a)
            })
          : []
    c.length &&
      l &&
      l.length &&
      c.sort(function(e, t) {
        for (var n = 0, a = 0; a < l.length; ) {
          var r = /^alpha/i.test(l[a].asc),
            o = /descend$/i.test(l[a].asc),
            u = r ? '' + (e && e[l[a].column]) : e && e[l[a].column],
            i = r ? '' + (t && t[l[a].column]) : t && t[l[a].column]
          if (i < u) {
            n = o ? -1 : 1
            break
          }
          if (u < i) {
            n = o ? 1 : -1
            break
          }
          a++
        }
        return n
      })
    var f = isNaN(r && r.offset) ? 0 : r.offset,
      v = isNaN(r && r.limit) ? void 0 : r.offset + r.limit
    if (void 0 !== v && v <= f) {
      var g = f
      ;(f = v - 1), (v = g + 1)
    }
    o('complete', (!f && isNaN(v)) || !c.length ? c : c.slice(f, v))
  },
  insertRow: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    try {
      a = JSON.parse(JSON.stringify(a))
    } catch (err) {}
    void 0 !== a &&
      'length' in a &&
      !isNaN(r) &&
      ((o = o ? o.slice() : []).splice(r, 0, a), e.set(t, n, 'value', o))
  },
  insertMultipleRows: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    try {
      a = JSON.parse(JSON.stringify(a))
    } catch (err) {}
    if (void 0 !== a && a.length && !isNaN(r)) {
      var u = a.filter(function(e) {
        return void 0 !== e && 'length' in e
      })
      u.length &&
        ((o = o
          .slice(0, r)
          .concat(u)
          .concat(o.slice(r))),
        e.set(t, n, 'value', o))
    }
  },
  deleteItem: function(e, t, n, a) {
    var r = e.get(t, n, 'value').filter(function(e) {
      return e !== a
    })
    e.set(t, n, 'value', r)
  },
  sortType: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    r = JSON.parse(JSON.stringify(r))
    var o = []
    switch (a) {
      case 'letterSort':
        o = r.sort(function(e, t) {
          var n = e.toString(),
            a = t.toString()
          return a < n ? 1 : n == a ? 0 : -1
        })
        break
      case 'letterReverse':
        o = r.sort(function(e, t) {
          var n = e.toString(),
            a = t.toString()
          return n < a ? 1 : n == a ? 0 : -1
        })
        break
      case 'numSort':
        o = r.sort(function(e, t) {
          return (
            (isNaN(Number(e)) ? 0 : Number(e)) -
            (isNaN(Number(t)) ? 0 : Number(t))
          )
        })
        break
      case 'numReverse':
        o = r.sort(function(e, t) {
          var n = isNaN(Number(e)) ? 0 : Number(e)
          return (isNaN(Number(t)) ? 0 : Number(t)) - n
        })
    }
    e.set(t, n, 'value', o)
  },
  reverse: function(e, t, n) {
    var a = e.get(t, n, 'value'),
      r = (a = JSON.parse(JSON.stringify(a))).reverse()
    e.set(t, n, 'value', r)
  },
  shuffle: function(e, t, n) {
    var a = e.get(t, n, 'value')
    a = JSON.parse(JSON.stringify(a))
    var r = []
    Object.assign(
      r,
      (function(e) {
        var t,
          n,
          a,
          r = e
        for (t = r.length - 1; 0 < t; t--)
          (n = Math.floor(Math.random() * (t + 1))),
            (a = r[t]),
            (r[t] = r[n]),
            (r[n] = a)
        return r
      })(a)
    ),
      e.set(t, n, 'value', r)
  },
  getItem: function(e, t, n, a, cb) {
    var r = e.get(t, n, 'value'),
      o = r[Math.floor(Math.random() * r.length)]
    a && a(o)
    cb && cb('finished', o)
  },
  rmRepeatVal: function(e, t, n) {
    var a = e.get(t, n, 'value'),
      r = []
    if (
      a &&
      '[object Array]' === Object.prototype.toString.call(a) &&
      0 < a.length
    ) {
      var o = {}
      a.forEach(function(e) {
        o[e] || ((o[e] = !0), r.push(e))
      })
    }
    e.set(t, n, 'value', r)
  },
  maxValue: function(e, t, n, a, cb) {
    var r = e.get(t, n, 'value')
    if (Array.isArray(r)) {
      var o = r.filter(function(e) {
          return !isNaN(e)
        }),
        u = Math.max.apply(Math, o)
      a && a(u)
      cb && cb('finished', u)
    }
  },
  minValue: function(e, t, n, a, cb) {
    var r = e.get(t, n, 'value')
    if (Array.isArray(r)) {
      var o = r.filter(function(e) {
          return !isNaN(e)
        }),
        u = Math.min.apply(Math, o)
      a && a(u)
      cb && cb('finished', u)
    }
  },
  deleteIndex: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    ;(r = r.slice()),
      Array.isArray(a)
        ? (r = r.filter(function(e, t) {
            return -1 === a.indexOf(t)
          }))
        : 0 <= a && a < r.length && r.splice(a, 1),
      e.set(t, n, 'value', r)
  },
  setItemValue: function(e, t, n, a, r, o) {
    var u = e.get(t, n, 'value')
    if (((u = JSON.parse(JSON.stringify(u))), void 0 !== o)) {
      if (a >= u.length)
        for (var i = a - u.length + 1, l = 0; l < i; l++) u.push([])
      if (a < u.length) {
        u[a][r] = o
        var s = []
        Object.assign(s, u), e.set(t, n, 'value', s)
      }
    }
  },
  setRowColsValue: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    void 0 !== a &&
      r &&
      Array.isArray(r) &&
      0 < r.length &&
      r.forEach(function(e) {
        var t = e.col,
          n = e.value
        void 0 !== a &&
          void 0 !== t &&
          (null == o[a] && (o[a] = []), (o[a][t] = n))
      }),
      e.set(t, n, 'value', o)
  },
  // oneArrToString: function(e, t, n, a) {
  //   //a(e.get(t, n, 'value').toString())
  //   a(e.get(t, n, 'value').join())
  // },
  oneArrToString: function(_sys, node, id, result, delimiter, cb) {
    var arr = _sys.get(node, id, 'value')
    var str = arr.join(delimiter)
    cb && cb('finished', str)
  },
  setMultiValue: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    try {
      a = JSON.parse(JSON.stringify(a))
    } catch (err) {}
    a &&
      Array.isArray(a) &&
      0 < a.length &&
      a.forEach(function(e) {
        var t = e.col,
          n = e.row,
          a = e.value
        void 0 !== n &&
          void 0 !== t &&
          (null == r[n] && (r[n] = []), (r[n][t] = a))
      }),
      e.set(t, n, 'value', r)
  },
  searchRowValue: function(e, t, n, r, a) {
    var o = e.get(t, n, 'value')
    if (Array.isArray(o)) {
      var u = []
      o.forEach(function(e, t) {
        var n = [],
          a = null
        Array.isArray(e) &&
          0 <= e.indexOf(r) &&
          ((a = e.indexOf(r)), n.push(t, a), u.push(n))
      })
      var i = 0 < u.length ? u : -1
      a && a(i)
    }
  },
  setRow: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    ;(o = JSON.parse(JSON.stringify(o))),
      r &&
        (a || 0 === a ? o.splice(a, 1, r) : o.push(r), e.set(t, n, 'value', o))
  },
  pushRow: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    if (((o = JSON.parse(JSON.stringify(o))), a)) {
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      for (var u = [], i = 0; i < a.length; i++) u.push(a[i])
      'head' === r ? o.unshift(u) : o.push(u), e.set(t, n, 'value', o)
    }
  },
  pushMulRow: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    if (a && Array.isArray(a)) {
      r = JSON.parse(JSON.stringify(r))
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      var o = []
      ;(o = o.concat(r, a)), e.set(t, n, 'value', o)
    }
  },
  deleteRow: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    if ((r = JSON.parse(JSON.stringify(r))) && (a || 0 === a)) {
      var o = 0
      Array.isArray(a)
        ? a.forEach(function(e) {
            r.splice(Number(e) - o, 1), o++
          })
        : r.splice(Number(a), 1),
        e.set(t, n, 'value', r)
    }
  },
  fillRow: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    try {
      r = JSON.parse(JSON.stringify(r))
    } catch (err) {}
    ;(o = JSON.parse(JSON.stringify(o))),
      (!a && 0 !== a) ||
        void 0 === r ||
        isNaN(a) ||
        (o[a].fill(r), e.set(t, n, 'value', o))
  },
  fillCol: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    if ((o = JSON.parse(JSON.stringify(o))) && (a || 0 === a) && !isNaN(a)) {
      var u = parseFloat(a)
      o.forEach(function(e, t) {
        o[t][u] = r
      }),
        e.set(t, n, 'value', o)
    }
  },
  addOne: function(e, t, n, a, r, o) {
    var u = e.get(t, n, 'value')
    try {
      r = JSON.parse(JSON.stringify(r))
    } catch (err) {}
    ;(u = JSON.parse(JSON.stringify(u))),
      (!a && 0 !== a) ||
        isNaN(a) ||
        ('head' === o ? u[a].unshift(r) : u[a].push(r), e.set(t, n, 'value', u))
  },
  deleteCol: function(e, t, n, a) {
    var r = e.get(t, n, 'value')
    if ((r = JSON.parse(JSON.stringify(r))) && (a || 0 === a)) {
      var o = []
      r.forEach(function(e) {
        if (Array.isArray(a)) {
          var t = e.filter(function(e, t) {
            return -1 === a.indexOf(t)
          })
          o.push(t)
        } else {
          var n = parseFloat(a)
          e.splice(n, 1), o.push(e)
        }
      }),
        e.set(t, n, 'value', o)
    }
  },
  pushCol: function(e, t, n, a, r) {
    var o = e.get(t, n, 'value')
    try {
      a = JSON.parse(JSON.stringify(a))
    } catch (err) {}
    if (
      ((o = void 0 !== o && 0 < o.length ? JSON.parse(JSON.stringify(o)) : []),
      void 0 !== a)
    ) {
      if (Array.isArray(a)) {
        if (0 === o.length) for (var u = a.length, i = 0; i < u; i++) o[i] = []
        o.forEach(function(e, t) {
          'head' === r ? o[t].unshift(a[t]) : o[t].push(a[t])
        })
      } else
        0 === o.length && (o[0] = []),
          o.forEach(function(e, t) {
            'head' === r ? o[t].unshift(a) : o[t].push(a)
          })
      e.set(t, n, 'value', o)
    }
  },
  rmRepeatRow: function(e, t, n) {
    var a = e.get(t, n, 'value')
    if ((a = JSON.parse(JSON.stringify(a))) && 0 < a.length) {
      var r = [],
        o = {}
      a.forEach(function(e) {
        var t = e.toString()
        o[t] || ((o[t] = !0), r.push(e))
      }),
        e.set(t, n, 'value', r)
    }
  },
  sortArr: function(e, t, n, r, a) {
    var o = e.get(t, n, 'value'),
      u = []
    switch (((o = JSON.parse(JSON.stringify(o))), a)) {
      case 'letterSort':
        u = o.sort(function(e, t) {
          var n = e[r].toString(),
            a = t[r].toString()
          return a < n ? 1 : n == a ? 0 : -1
        })
        break
      case 'letterReverse':
        u = o.sort(function(e, t) {
          var n = e[r].toString(),
            a = t[r].toString()
          return n < a ? 1 : n == a ? 0 : -1
        })
        break
      case 'numSort':
        u = o.sort(function(e, t) {
          return (
            (isNaN(Number(e[r])) ? 0 : Number(e[r])) -
            (isNaN(Number(t[r])) ? 0 : Number(t[r]))
          )
        })
        break
      case 'numReverse':
        u = o.sort(function(e, t) {
          var n = isNaN(Number(e[r])) ? 0 : Number(e[r])
          return (isNaN(Number(t[r])) ? 0 : Number(t[r])) - n
        })
    }
    e.set(t, n, 'value', u)
  },
  rowRandomSort: function(e, t, n) {
    var a = e.get(t, n, 'value')
    a = JSON.parse(JSON.stringify(a))
    var r = []
    Object.assign(
      r,
      (function(e) {
        var t,
          n,
          a,
          r = e
        for (t = r.length - 1; 0 < t; t--)
          (n = Math.floor(Math.random() * (t + 1))),
            (a = r[t]),
            (r[t] = r[n]),
            (r[n] = a)
        return r
      })(a)
    ),
      e.set(t, n, 'value', r)
  },
  convertColArr: function(e, t, n, a) {
    var r = e.get(t, n, 'value'),
      o = []
    r &&
      r.forEach(function(t) {
        try {
          t[a] = JSON.parse(t[a])
        } catch (e) {
          t[a] = t[a]
        }
        o.push(t)
      }),
      e.set(t, n, 'value', o)
  },
  calculateSum: function(e, t, n, r, a) {
    var o = e.get(t, n, 'value')
    if (o && (r || 0 === r)) {
      var u = [],
        i = 0
      if (Array.isArray(r)) {
        function l() {
          var n = 0,
            a = parseFloat(r[i])
          o.forEach(function(e) {
            var t = parseFloat(e[a - 1])
            isNaN(t) || (n += t)
          }),
            u.push(n),
            i++
        }
        for (; i < r.length; ) l()
      } else
        (u = 0),
          o.forEach(function(e) {
            var t = parseFloat(r),
              n = parseFloat(e[t - 1])
            isNaN(n) || (u += n)
          })
      a && a(u)
    }
  },
  calculateSums: function(e, t, n, r, a) {
    var o = e.get(t, n, 'value')
    if (o && (r || 0 === r)) {
      var u = [],
        i = 0
      if (Array.isArray(r)) {
        function l() {
          var n = 0,
            a = parseFloat(r[i])
          o.forEach(function(e) {
            var t = parseFloat(e[a])
            isNaN(t) || (n += t)
          }),
            u.push(n),
            i++
        }
        for (; i < r.length; ) l()
      } else
        (u = 0),
          o.forEach(function(e) {
            var t = parseFloat(r),
              n = parseFloat(e[t])
            isNaN(n) || (u += n)
          })
      a && a(u)
    }
  },
  calculateAverage: function(e, t, n, r, a) {
    var o = e.get(t, n, 'value')
    if (o && (r || 0 === r)) {
      var u = [],
        i = 0
      if (Array.isArray(r)) {
        function l() {
          var n = 0,
            a = parseFloat(r[i])
          o.forEach(function(e) {
            var t = parseFloat(e[a - 1])
            isNaN(t) || (n += t)
          }),
            u.push(n / o.length),
            i++
        }
        for (; i < r.length; ) l()
      } else {
        var s = 0
        o.forEach(function(e) {
          var t = parseFloat(r),
            n = parseFloat(e[t - 1])
          isNaN(n) || (s += n)
        }),
          (u = s / o.length)
      }
      a && a(u)
    }
  },
  calculateAverages: function(e, t, n, r, a) {
    var o = e.get(t, n, 'value')
    if (o && (r || 0 === r)) {
      var u = [],
        i = 0
      if (Array.isArray(r)) {
        function l() {
          var n = 0,
            a = parseFloat(r[i])
          o.forEach(function(e) {
            var t = parseFloat(e[a])
            isNaN(t) || (n += t)
          }),
            u.push(n / o.length),
            i++
        }
        for (; i < r.length; ) l()
      } else {
        var s = 0
        o.forEach(function(e) {
          var t = parseFloat(r),
            n = parseFloat(e[t])
          isNaN(n) || (s += n)
        }),
          (u = s / o.length)
      }
      a && a(u)
    }
  },
  clearArr: function(e, t, n) {
    e.set(t, n, 'value', [])
  },
  _itemTotal: function(e, t, n) {
    var a = e.get(t, n, 'value')
    return a ? a.length : 0
  },
  _arrRowNum: function(e, t, n) {
    var a = e.get(t, n, 'value')
    return a ? a.length : 0
  },
  _aArrCol: function(e, t, n, a) {
    var r = e.get(t, n, 'value'),
      o = []
    if (!r || null == a || isNaN(a)) return o
    var u = parseFloat(a)
    return (
      r.forEach(function(e, t) {
        o.push(r[t][u])
      }),
      o
    )
  },
  _oneArrItem: function(e, t, n, a) {
    var r,
      o = e.get(t, n, 'value')
    return o && null != a && !isNaN(a) ? (r = o[parseFloat(a)]) : r
  },
  _twoArrItem: function(e, t, n, a, r) {
    var o,
      u = e.get(t, n, 'value')
    if (!u || null == r || null == a || isNaN(r) || isNaN(a)) return o
    var i = u[parseFloat(a)]
    return i && (o = i[parseFloat(r)]), o
  }
}),
  ($funcs['data-arr-2d'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setRawValue: function(e, t, n, a) {
      var r = []
      void 0 !== a && ((r = a), e.set(t, n, 'value', r))
    },
    setValue: function(e, t, n, a) {
      var r = []
      void 0 !== a &&
        ((r = JSON.parse(JSON.stringify(a))), e.set(t, n, 'value', r))
    },
    setOneValue: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      void 0 !== r &&
        (a || 0 === a ? (o[a] = r) : o.push(r), e.set(t, n, 'value', o))
    },
    setRowMultValue: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      void 0 !== a &&
        0 < a.length &&
        (a.map(function(e) {
          var t = e.col,
            n = e.value
          try {
            n = JSON.parse(JSON.stringify(n))
          } catch (err) {}
          t || 0 === t ? (r[t] = n) : r.push(n)
        }),
        e.set(t, n, 'value', r))
    },
    searchValue: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      if (Array.isArray(o)) {
        var u = o.indexOf(a)
        r && r(-1 < u ? u : -1)
      }
    },
    pushItem: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      void 0 !== a &&
        ((o = JSON.parse(JSON.stringify(o))),
        'head' === r ? o.unshift(a) : o.push(a),
        e.set(t, n, 'value', o))
    },
    pushMulVal: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = []
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      if ('string' === typeof a) {
        var u = a.split(',')
        o = o.concat(r, u)
      }
      Array.isArray(a) && (o = o.concat(r, a)),
        isNaN(a) ||
          Array.isArray(a) ||
          ((r = JSON.parse(JSON.stringify(r))).push(a), Object.assign(o, r)),
        e.set(t, n, 'value', o)
    },
    insertOne: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      void 0 !== a &&
        void 0 !== r &&
        (o = JSON.parse(JSON.stringify(o))).splice(r, 0, a),
        e.set(t, n, 'value', o)
    },
    insertMultiple: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      if (void 0 !== a && void 0 !== r) {
        ;(o = JSON.parse(JSON.stringify(o))).splice(r, 0, a)
        var u = flatten(o)
        e.set(t, n, 'value', u)
      }
    },
    findRows: function(e, t, n, a, l, r, o) {
      var u,
        i =
          (((u = {
            eq: function(e, t) {
              return e == t
            },
            neq: function(e, t) {
              return e != t
            },
            gt: function(e, t) {
              return t < e
            },
            lt: function(e, t) {
              return e < t
            }
          }).gt = function(e, t) {
            return t < e
          }),
          (u.lt = function(e, t) {
            return e < t
          }),
          (u.gte = function(e, t) {
            return t <= e
          }),
          (u.lte = function(e, t) {
            return e <= t
          }),
          (u.has = function(e, t) {
            return e && e.length && -1 !== e.indexOf(t)
          }),
          (u.nhas = function(e, t) {
            return !(e && e.length && -1 !== e.indexOf(t))
          }),
          (u.in = function(e, t) {
            return t && t.length && -1 !== t.indexOf(e)
          }),
          (u.nin = function(e, t) {
            return !(t && t.length && -1 !== t.indexOf(e))
          }),
          u)
      var groupCons = []
      if (a && a.length) {
        for (var index = a.length - 1; index >= 0; index--) {
          if (a[index].pred === 'or') {
            groupCons.push(a.splice(index))
          }
          if (index === 0) {
            groupCons.push(a)
          }
        }
      }

      var headers = e.get(t, n, 'headers')
      // function canPassCons(row, cons) {
      //   var result = false
      //   if (groupCons.length) {
      //     // 新的AND OR 关系为：逢OR将条件并列割开
      //     for (
      //       var groupIndex = groupCons.length - 1;
      //       groupIndex >= 0;
      //       groupIndex--
      //     ) {
      //       var singleGroupCons = groupCons[groupIndex]
      //       var singleResult = true
      //       for (
      //         var singleIndex = 0, len = singleGroupCons.length;
      //         singleIndex < len;
      //         singleIndex++
      //       ) {
      //         var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
      //           row && row[singleGroupCons[singleIndex].column],
      //           singleGroupCons[singleIndex].value
      //         )
      //         if (!subResult) {
      //           singleResult = false
      //         }
      //       }
      //       if (singleResult) {
      //         result = true
      //       }
      //     }
      //   } else {
      //     result = true
      //   }
      //   return result
      // }
      var s = e.get(t, n, 'value'),
        c =
          s && s.length
            ? s.filter(function(e) {
                return canPassCons({
                  row: e,
                  cons: a,
                  groupCons: groupCons,
                  titleArr: [],
                  headers: headers,
                  is2dArray: true
                })
                // return canPassCons(e, a)
                // return (function(e, t) {
                //   var n = !0
                //   if (t && t.length)
                //     for (var a = 0; a < t.length; ) {
                //       if (t[a] && i[t[a].comp])
                //         if (i[t[a].comp](e && e[t[a].column], t[a].value))
                //           for (; t[a + 1] && 'or' === t[a + 1].pred; ) a++
                //         else if (
                //           (t[a + 1] && 'and' === t[a + 1].pred) ||
                //           !t[a + 1]
                //         ) {
                //           n = !1
                //           break
                //         }
                //       a++
                //     }
                //   return n
                // })(e, a)
              })
            : []
      c.length &&
        l &&
        l.length &&
        c.sort(function(e, t) {
          for (var n = 0, a = 0; a < l.length; ) {
            var r = /^alpha/i.test(l[a].asc),
              o = /descend$/i.test(l[a].asc),
              u = r ? '' + (e && e[l[a].column]) : e && e[l[a].column],
              i = r ? '' + (t && t[l[a].column]) : t && t[l[a].column]
            if (i < u) {
              n = o ? -1 : 1
              break
            }
            if (u < i) {
              n = o ? 1 : -1
              break
            }
            a++
          }
          return n
        })
      var f = isNaN(r && r.offset) ? 0 : r.offset,
        v = isNaN(r && r.limit) ? void 0 : r.offset + r.limit
      if (void 0 !== v && v <= f) {
        var g = f
        ;(f = v - 1), (v = g + 1)
      }
      o('complete', (!f && isNaN(v)) || !c.length ? c : c.slice(f, v))
    },
    findRowsCnt: function(e, t, n, a, o) {
      var u,
        i =
          (((u = {
            eq: function(e, t) {
              return e == t
            },
            neq: function(e, t) {
              return e != t
            },
            gt: function(e, t) {
              return t < e
            },
            lt: function(e, t) {
              return e < t
            }
          }).gt = function(e, t) {
            return t < e
          }),
          (u.lt = function(e, t) {
            return e < t
          }),
          (u.gte = function(e, t) {
            return t <= e
          }),
          (u.lte = function(e, t) {
            return e <= t
          }),
          (u.has = function(e, t) {
            return e && e.length && -1 !== e.indexOf(t)
          }),
          (u.nhas = function(e, t) {
            return !(e && e.length && -1 !== e.indexOf(t))
          }),
          (u.in = function(e, t) {
            return t && t.length && -1 !== t.indexOf(e)
          }),
          (u.nin = function(e, t) {
            return !(t && t.length && -1 !== t.indexOf(e))
          }),
          u)
      var groupCons = []
      if (a && a.length) {
        for (var index = a.length - 1; index >= 0; index--) {
          if (a[index].pred === 'or') {
            groupCons.push(a.splice(index))
          }
          if (index === 0) {
            groupCons.push(a)
          }
        }
      }
      function canPassCons(row, cons) {
        var result = false
        if (groupCons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (
            var groupIndex = groupCons.length - 1;
            groupIndex >= 0;
            groupIndex--
          ) {
            var singleGroupCons = groupCons[groupIndex]
            var singleResult = true
            for (
              var singleIndex = 0, len = singleGroupCons.length;
              singleIndex < len;
              singleIndex++
            ) {
              var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                row && row[singleGroupCons[singleIndex].column],
                singleGroupCons[singleIndex].value
              )
              if (!subResult) {
                singleResult = false
              }
            }
            if (singleResult) {
              result = true
            }
          }
        } else {
          result = true
        }
        return result
      }
      var s = e.get(t, n, 'value'),
        c = 0
      if (s) {
        for (var index = 0, length = s.length; index < length; index++) {
          if (canPassCons(s[index], a)) {
            c++
          }
        }
      }

      o && o('complete', c)
    },
    insertRow: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      void 0 !== a &&
        'length' in a &&
        !isNaN(r) &&
        ((o = o ? o.slice() : []).splice(r, 0, a), e.set(t, n, 'value', o))
    },
    insertMultipleRows: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      if (void 0 !== a && a.length && !isNaN(r)) {
        var u = a.filter(function(e) {
          return void 0 !== e && 'length' in e
        })
        u.length &&
          ((o = o
            .slice(0, r)
            .concat(u)
            .concat(o.slice(r))),
          e.set(t, n, 'value', o))
      }
    },
    deleteItem: function(e, t, n, a) {
      var r = e.get(t, n, 'value').filter(function(e) {
        return e !== a
      })
      e.set(t, n, 'value', r)
    },
    sortType: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      r = JSON.parse(JSON.stringify(r))
      var o = []
      switch (a) {
        case 'letterSort':
          o = r.sort(function(e, t) {
            var n = e.toString(),
              a = t.toString()
            return a < n ? 1 : n == a ? 0 : -1
          })
          break
        case 'letterReverse':
          o = r.sort(function(e, t) {
            var n = e.toString(),
              a = t.toString()
            return n < a ? 1 : n == a ? 0 : -1
          })
          break
        case 'numSort':
          o = r.sort(function(e, t) {
            return (
              (isNaN(Number(e)) ? 0 : Number(e)) -
              (isNaN(Number(t)) ? 0 : Number(t))
            )
          })
          break
        case 'numReverse':
          o = r.sort(function(e, t) {
            var n = isNaN(Number(e)) ? 0 : Number(e)
            return (isNaN(Number(t)) ? 0 : Number(t)) - n
          })
      }
      e.set(t, n, 'value', o)
    },
    reverse: function(e, t, n) {
      var a = e.get(t, n, 'value'),
        r = (a = JSON.parse(JSON.stringify(a))).reverse()
      e.set(t, n, 'value', r)
    },
    shuffle: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a = JSON.parse(JSON.stringify(a))
      var r = []
      Object.assign(
        r,
        (function(e) {
          var t,
            n,
            a,
            r = e
          for (t = r.length - 1; 0 < t; t--)
            (n = Math.floor(Math.random() * (t + 1))),
              (a = r[t]),
              (r[t] = r[n]),
              (r[n] = a)
          return r
        })(a)
      ),
        e.set(t, n, 'value', r)
    },
    getItem: function(e, t, n, a, cb) {
      var r = e.get(t, n, 'value'),
        o = r[Math.floor(Math.random() * r.length)]
      a && a(o)
      cb && cb('finished', o)
    },
    rmRepeatVal: function(e, t, n) {
      var a = e.get(t, n, 'value'),
        r = []
      if (
        a &&
        '[object Array]' === Object.prototype.toString.call(a) &&
        0 < a.length
      ) {
        var o = {}
        a.forEach(function(e) {
          o[e] || ((o[e] = !0), r.push(e))
        })
      }
      e.set(t, n, 'value', r)
    },
    maxValue: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      if (Array.isArray(r)) {
        var o = r.filter(function(e) {
            return !isNaN(e)
          }),
          u = Math.max.apply(Math, o)
        a && a(u)
      }
    },
    minValue: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      if (Array.isArray(r)) {
        var o = r.filter(function(e) {
            return !isNaN(e)
          }),
          u = Math.min.apply(Math, o)
        a && a(u)
      }
    },
    deleteIndex: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      ;(r = JSON.parse(JSON.stringify(r))),
        Array.isArray(a)
          ? (r = r.filter(function(e, t) {
              return -1 === a.indexOf(t)
            }))
          : 0 <= a && a < r.length && r.splice(a, 1),
        e.set(t, n, 'value', r)
    },
    setItemValue: function(e, t, n, a, r, o) {
      var u = e.get(t, n, 'value')
      if (((u = u.slice()), void 0 !== o)) {
        if (a >= u.length)
          for (var i = a - u.length + 1, l = 0; l < i; l++) u.push([])
        if (a < u.length) {
          o = klona(o)
          u[a][r] = o
          var s = []
          Object.assign(s, u), e.set(t, n, 'value', s)
        }
      }
    },
    setRowColsValue: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      if (Array.isArray(o)) {
        o = o.slice()
      }
      void 0 !== a &&
        r &&
        Array.isArray(r) &&
        0 < r.length &&
        r.forEach(function(e) {
          var t = e.col,
            n = e.value
          n = klona(n)
          void 0 !== a &&
            void 0 !== t &&
            (null == o[a] && (o[a] = []), (o[a][t] = n))
        }),
        e.set(t, n, 'value', o)
    },
    oneArrToString: function(e, t, n, a) {
      a(e.get(t, n, 'value').toString())
    },
    setMultiValue: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      try {
        a = JSON.parse(JSON.stringify(a))
      } catch (err) {}
      a &&
        Array.isArray(a) &&
        0 < a.length &&
        a.forEach(function(e) {
          var t = e.col,
            n = e.row,
            a = e.value
          void 0 !== n &&
            void 0 !== t &&
            (null == r[n] && (r[n] = []), (r[n][t] = a))
        }),
        e.set(t, n, 'value', r)
    },
    searchRowValue: function(e, t, n, r, a) {
      var o = e.get(t, n, 'value')
      if (Array.isArray(o)) {
        var u = []
        o.forEach(function(e, t) {
          var n = [],
            a = null
          Array.isArray(e) &&
            0 <= e.indexOf(r) &&
            ((a = e.indexOf(r)), n.push(t, a), u.push(n))
        })
        var i = 0 < u.length ? u : -1
        a && a(i)
      }
    },
    setRow: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      ;(o = o.slice()), (r = klona(r))
      r &&
        (a || 0 === a ? o.splice(a, 1, r) : o.push(r), e.set(t, n, 'value', o))
    },
    pushRow: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      if (((o = o.slice()), a)) {
        a = klona(a)
        for (var u = [], i = 0; i < a.length; i++) u.push(a[i])
        'head' === r ? o.unshift(u) : o.push(u), e.set(t, n, 'value', o)
      }
    },
    pushMulRow: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      if (a && Array.isArray(a)) {
        r = JSON.parse(JSON.stringify(r))
        try {
          a = JSON.parse(JSON.stringify(a))
        } catch (err) {}
        var o = []
        ;(o = o.concat(r, a)), e.set(t, n, 'value', o)
      }
    },
    deleteRow: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      if ((r = r.slice()) && (a || 0 === a)) {
        var o = 0
        Array.isArray(a)
          ? a.forEach(function(e) {
              r.splice(Number(e) - o, 1), o++
            })
          : r.splice(Number(a), 1),
          e.set(t, n, 'value', r)
      }
    },
    fillRow: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      r = klona(r)
      ;(o = o.slice()),
        (!a && 0 !== a) ||
          void 0 === r ||
          isNaN(a) ||
          (o[a].fill(r), e.set(t, n, 'value', o))
    },
    fillCol: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      if ((o = o.slice()) && (a || 0 === a) && !isNaN(a)) {
        var u = parseFloat(a)
        r = klona(r)
        o.forEach(function(e, t) {
          o[t][u] = r
        }),
          e.set(t, n, 'value', o)
      }
    },
    addOne: function(e, t, n, a, r, o) {
      var u = e.get(t, n, 'value')
      r = klona(r)
      if (Array.isArray(u)) {
        u = u.slice()
      }
      ;(!a && 0 !== a) ||
        isNaN(a) ||
        ('head' === o ? u[a].unshift(r) : u[a].push(r), e.set(t, n, 'value', u))
    },
    deleteCol: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      if ((r = r.slice()) && (a || 0 === a)) {
        var o = []
        r.forEach(function(e) {
          if (Array.isArray(a)) {
            var t = e.filter(function(e, t) {
              return -1 === a.indexOf(t)
            })
            o.push(t)
          } else {
            var n = parseFloat(a)
            e.splice(n, 1), o.push(e)
          }
        }),
          e.set(t, n, 'value', o)
      }
    },
    pushCol: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      a = klona(a)
      if (((o = void 0 !== o && 0 < o.length ? o.slice() : []), void 0 !== a)) {
        if (Array.isArray(a)) {
          if (0 === o.length)
            for (var u = a.length, i = 0; i < u; i++) o[i] = []
          o.forEach(function(e, t) {
            'head' === r ? o[t].unshift(a[t]) : o[t].push(a[t])
          })
        } else
          0 === o.length && (o[0] = []),
            o.forEach(function(e, t) {
              'head' === r ? o[t].unshift(a) : o[t].push(a)
            })
        e.set(t, n, 'value', o)
      }
    },
    rmRepeatRow: function(e, t, n) {
      var a = e.get(t, n, 'value')
      if ((a = JSON.parse(JSON.stringify(a))) && 0 < a.length) {
        var r = [],
          o = {}
        a.forEach(function(e) {
          var t = e.toString()
          o[t] || ((o[t] = !0), r.push(e))
        }),
          e.set(t, n, 'value', r)
      }
    },
    sortArr: function(e, t, n, r, a) {
      var o = e.get(t, n, 'value'),
        u = []
      switch (((o = JSON.parse(JSON.stringify(o))), a)) {
        case 'letterSort':
          u = o.sort(function(e, t) {
            var n = e[r].toString(),
              a = t[r].toString()
            return a < n ? 1 : n == a ? 0 : -1
          })
          break
        case 'letterReverse':
          u = o.sort(function(e, t) {
            var n = e[r].toString(),
              a = t[r].toString()
            return n < a ? 1 : n == a ? 0 : -1
          })
          break
        case 'numSort':
          u = o.sort(function(e, t) {
            return (
              (isNaN(Number(e[r])) ? 0 : Number(e[r])) -
              (isNaN(Number(t[r])) ? 0 : Number(t[r]))
            )
          })
          break
        case 'numReverse':
          u = o.sort(function(e, t) {
            var n = isNaN(Number(e[r])) ? 0 : Number(e[r])
            return (isNaN(Number(t[r])) ? 0 : Number(t[r])) - n
          })
      }
      e.set(t, n, 'value', u)
    },
    sortMultArr: function(e, t, n, r) {
      var o = e.get(t, n, 'value'),
        u = []
      if (!r || r.length === 0) {
        return
      }
      u = o.sort(function(a, b) {
        var c = 0,
          i = 0
        while (i < r.length) {
          var needToString = /^alpha/i.test(r[i].asc)
          //var needPinYin = /^pinyin/i.test(orders[i].asc)
          var isDescend = /descend$/i.test(r[i].asc)
          var left = needToString
            ? '' + (a && a[r[i].column])
            : a && a[r[i].column]
          var right = needToString
            ? '' + (b && b[r[i].column])
            : b && b[r[i].column]
          if (left > right) {
            c = isDescend ? -1 : 1
            break
          } else if (left < right) {
            c = isDescend ? 1 : -1
            break
          }
          i++
        }
        return c
      })
      e.set(t, n, 'value', u)
    },
    rowRandomSort: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a = JSON.parse(JSON.stringify(a))
      var r = []
      Object.assign(
        r,
        (function(e) {
          var t,
            n,
            a,
            r = e
          for (t = r.length - 1; 0 < t; t--)
            (n = Math.floor(Math.random() * (t + 1))),
              (a = r[t]),
              (r[t] = r[n]),
              (r[n] = a)
          return r
        })(a)
      ),
        e.set(t, n, 'value', r)
    },
    convertColArr: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = []
      r &&
        r.forEach(function(t) {
          try {
            t[a] = JSON.parse(t[a])
          } catch (e) {
            t[a] = t[a]
          }
          o.push(t)
        }),
        e.set(t, n, 'value', o)
    },
    calculateSum: function(e, t, n, r, a) {
      var o = e.get(t, n, 'value')
      if (o && (r || 0 === r)) {
        var u = [],
          i = 0
        if (Array.isArray(r)) {
          function l() {
            var n = 0,
              a = parseFloat(r[i])
            o.forEach(function(e) {
              var t = parseFloat(e[a - 1])
              isNaN(t) || (n += t)
            }),
              u.push(n),
              i++
          }
          for (; i < r.length; ) l()
        } else
          (u = 0),
            o.forEach(function(e) {
              var t = parseFloat(r),
                n = parseFloat(e[t - 1])
              isNaN(n) || (u += n)
            })
        a && a(u)
      }
    },
    calculateSums: function(_sys, node, id, colNum, result, cb) {
      var array = _sys.get(node, id, 'value')
      var _colnum, _cb, _result, _cons, _orders, _range
      if (arguments.length === 6) {
        _colnum = colNum
        _cb = cb
        _result = result
      } else if (arguments.length === 5) {
        var params = arguments[3]
        if (params) {
          _colnum = params.colNum
          _cons = params.cons
          _orders = params.orders
          _range = params.range
          _result = params.result
        }
        _cb = arguments[4]
      }
      if (_cons || _orders || _range) {
        function transToNum(val) {
          if (isNaN(Number(val))) {
            if (typeof val === 'string') {
              return parseFloat(val) || 0
            } else {
              return 0
            }
          } else {
            return Number(val)
          }
        }
        var groupCons = []
        if (_cons && _cons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (var index = _cons.length - 1; index >= 0; index--) {
            if (_cons[index].pred === 'or') {
              groupCons.push(_cons.splice(index))
            }
            if (index === 0) {
              groupCons.push(_cons)
            }
          }
        }
        function canPassCons(row, cons) {
          var result = false
          if (groupCons.length) {
            for (
              var groupIndex = groupCons.length - 1;
              groupIndex >= 0;
              groupIndex--
            ) {
              var singleGroupCons = groupCons[groupIndex]
              var singleResult = true
              for (
                var singleIndex = 0, len = singleGroupCons.length;
                singleIndex < len;
                singleIndex++
              ) {
                var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                  row && row[singleGroupCons[singleIndex].column],
                  singleGroupCons[singleIndex].value
                )
                if (!subResult) {
                  singleResult = false
                }
              }
              if (singleResult) {
                result = true
              }
            }
          } else {
            result = true
          }
          return result
        }
        var arr = array
        var filteredArr = []
        if (arr) {
          for (var index = 0, len = arr.length; index < len; index++) {
            if (canPassCons(arr[index], _cons)) {
              filteredArr.push(arr[index])
            }
          }
        }
        if (filteredArr.length && _orders && _orders.length) {
          filteredArr.sort(function(a, b) {
            var result = 0
            var i = 0
            while (i < _orders.length) {
              var needToString = /^alpha/i.test(_orders[i].asc)
              var isDescend = /descend$/i.test(_orders[i].asc)
              var left = needToString
                ? '' + (a && a[_orders[i].column])
                : a && transToNum(a[_orders[i].column])
              var right = needToString
                ? '' + (b && b[_orders[i].column])
                : b && transToNum(b[_orders[i].column])

              if (left > right) {
                result = isDescend ? -1 : 1
                break
              } else if (left < right) {
                result = isDescend ? 1 : -1
                break
              }

              i++
            }
            return result
          })
        }
        if (_range) {
          var from = isNaN(_range && _range.offset) ? 0 : _range.offset
          var to = isNaN(_range && _range.limit)
            ? undefined
            : _range.offset + _range.limit
          if (to !== undefined && from >= to) {
            var temp = from
            from = to - 1
            to = temp + 1
          }
          if ((from || !isNaN(to)) && filteredArr.length) {
            filteredArr = filteredArr.slice(from, to)
          }
        }
        array = filteredArr
      }
      if (array && (_colnum || _colnum === 0)) {
        var sum = []
        var i = 0

        if (Array.isArray(_colnum)) {
          var _loop2 = function _loop2() {
            var itemSum = 0
            var col = parseFloat(_colnum[i])
            array.forEach(function(item) {
              var value = parseFloat(item[col])

              if (!isNaN(value)) {
                itemSum += value
              }
            })
            sum.push(itemSum)
            i++
          }

          while (i < _colnum.length) {
            _loop2()
          }
        } else {
          sum = 0
          array.forEach(function(item) {
            var col = parseFloat(_colnum)
            var value = parseFloat(item[col])

            if (!isNaN(value)) {
              sum += value
            }
          })
        }

        if (_result) {
          _result(sum)
        }

        _cb && _cb('finished', sum)
      }
    },
    calculateAverage: function(e, t, n, r, a) {
      var o = e.get(t, n, 'value')
      if (o && (r || 0 === r)) {
        var u = [],
          i = 0
        if (Array.isArray(r)) {
          function l() {
            var n = 0,
              a = parseFloat(r[i])
            o.forEach(function(e) {
              var t = parseFloat(e[a - 1])
              isNaN(t) || (n += t)
            }),
              u.push(n / o.length),
              i++
          }
          for (; i < r.length; ) l()
        } else {
          var s = 0
          o.forEach(function(e) {
            var t = parseFloat(r),
              n = parseFloat(e[t - 1])
            isNaN(n) || (s += n)
          }),
            (u = s / o.length)
        }
        a && a(u)
      }
    },
    calculateAverages: function(_sys, node, id, colNum, result, cb) {
      var array = _sys.get(node, id, 'value')
      var _colnum, _cb, _result, _cons, _orders, _range
      if (arguments.length === 6) {
        _colnum = colNum
        _cb = cb
        _result = result
      } else if (arguments.length === 5) {
        var params = arguments[3]
        if (params) {
          _colnum = params.colNum
          _cons = params.cons
          _orders = params.orders
          _range = params.range
          _result = params.result
        }
        _cb = arguments[4]
      }
      if (_cons || _orders || _range) {
        function transToNum(val) {
          if (isNaN(Number(val))) {
            if (typeof val === 'string') {
              return parseFloat(val) || 0
            } else {
              return 0
            }
          } else {
            return Number(val)
          }
        }
        var groupCons = []
        if (_cons && _cons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (var index = _cons.length - 1; index >= 0; index--) {
            if (_cons[index].pred === 'or') {
              groupCons.push(_cons.splice(index))
            }
            if (index === 0) {
              groupCons.push(_cons)
            }
          }
        }
        function canPassCons(row, cons) {
          var result = false
          if (groupCons.length) {
            for (
              var groupIndex = groupCons.length - 1;
              groupIndex >= 0;
              groupIndex--
            ) {
              var singleGroupCons = groupCons[groupIndex]
              var singleResult = true
              for (
                var singleIndex = 0, len = singleGroupCons.length;
                singleIndex < len;
                singleIndex++
              ) {
                var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                  row && row[singleGroupCons[singleIndex].column],
                  singleGroupCons[singleIndex].value
                )
                if (!subResult) {
                  singleResult = false
                }
              }
              if (singleResult) {
                result = true
              }
            }
          } else {
            result = true
          }
          return result
        }
        var arr = array
        var filteredArr = []
        if (arr) {
          for (var index = 0, len = arr.length; index < len; index++) {
            if (canPassCons(arr[index], _cons)) {
              filteredArr.push(arr[index])
            }
          }
        }
        if (filteredArr.length && _orders && _orders.length) {
          filteredArr.sort(function(a, b) {
            var result = 0
            var i = 0
            while (i < _orders.length) {
              var needToString = /^alpha/i.test(_orders[i].asc)
              var isDescend = /descend$/i.test(_orders[i].asc)
              var left = needToString
                ? '' + (a && a[_orders[i].column])
                : a && transToNum(a[_orders[i].column])
              var right = needToString
                ? '' + (b && b[_orders[i].column])
                : b && transToNum(b[_orders[i].column])

              if (left > right) {
                result = isDescend ? -1 : 1
                break
              } else if (left < right) {
                result = isDescend ? 1 : -1
                break
              }

              i++
            }
            return result
          })
        }
        if (_range) {
          var from = isNaN(_range && _range.offset) ? 0 : _range.offset
          var to = isNaN(_range && _range.limit)
            ? undefined
            : _range.offset + _range.limit
          if (to !== undefined && from >= to) {
            var temp = from
            from = to - 1
            to = temp + 1
          }
          if ((from || !isNaN(to)) && filteredArr.length) {
            filteredArr = filteredArr.slice(from, to)
          }
        }
        array = filteredArr
      }
      if (array && (_colnum || _colnum === 0)) {
        var average = []
        var i = 0

        if (Array.isArray(_colnum)) {
          var _loop4 = function _loop4() {
            var itemSum = 0
            var col = parseFloat(_colnum[i])
            array.forEach(function(item) {
              var value = parseFloat(item[col])

              if (!isNaN(value)) {
                itemSum += value
              }
            })
            average.push(itemSum / array.length)
            i++
          }

          while (i < _colnum.length) {
            _loop4()
          }
        } else {
          var itemSum = 0
          array.forEach(function(item) {
            var col = parseFloat(_colnum)
            var value = parseFloat(item[col])

            if (!isNaN(value)) {
              itemSum += value
            }
          })
          average = itemSum / array.length
        }

        if (_result) {
          _result(average)
        }

        _cb && _cb('finished', average)
      }
    },
    clearArr: function(e, t, n) {
      e.set(t, n, 'value', [])
    },
    _itemTotal: function(e, t, n) {
      var a = e.get(t, n, 'value')
      return a ? a.length : 0
    },
    _arrRowNum: function(e, t, n) {
      var a = e.get(t, n, 'value')
      return a ? a.length : 0
    },
    _aArrCol: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = []
      if (!r || null == a || isNaN(a)) return o
      var u = parseFloat(a)
      return (
        r.forEach(function(e, t) {
          o.push(r[t][u])
        }),
        o
      )
    },
    _oneArrItem: function(e, t, n, a) {
      var r,
        o = e.get(t, n, 'value')
      return o && null != a && !isNaN(a) ? (r = o[parseFloat(a)]) : r
    },
    _twoArrItem: function(e, t, n, a, r) {
      var o,
        u = e.get(t, n, 'value')
      if (!u || null == r || null == a || isNaN(r) || isNaN(a)) return o
      var i = u[parseFloat(a)]
      return i && (o = i[parseFloat(r)]), o
    }
  }),
  ($funcs['data-var'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setValue: function(e, t, n, a) {
      var _val = a
      if (typeof a !== 'string' && [undefined, null].indexOf(_val) < 0) {
        _val = _val + ''
      }
      e.set(t, n, 'value', _val)
    },
    insertString: function(e, t, n, a, r, o) {
      var u = e.get(t, n, 'value')
      if (u.length < r)
        'tail' === a ? e.set(t, n, 'value', o + u) : e.set(t, n, 'value', u + o)
      else {
        var i = u.split('')
        'tail' === a && i.reverse(),
          i.splice(r, 0, o),
          'tail' === a && i.reverse()
        var l = i.join('')
        e.set(t, n, 'value', l)
      }
    },
    removeWithPos: function(e, t, n, a, r, o) {
      var u = e.get(t, n, 'value').split('')
      'tail' === a && u.reverse(), u.splice(r, o), 'tail' === a && u.reverse()
      var i = u.join('')
      e.set(t, n, 'value', i)
    },
    removeString: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = a.toString(),
        u = r.split(o).join('')
      e.set(t, n, 'value', u)
    },
    sliceString: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value').slice(a, r + 1)
      e.set(t, n, 'value', o)
    },
    randomString: function(e, t, n, a, r) {
      var o = [
          '0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          'a',
          'b',
          'c',
          'd',
          'e',
          'f',
          'g',
          'h',
          'i',
          'j',
          'k',
          'l',
          'm',
          'n',
          'o',
          'p',
          'q',
          'r',
          's',
          't',
          'u',
          'v',
          'w',
          'x',
          'y',
          'z',
          'A',
          'B',
          'C',
          'D',
          'E',
          'F',
          'G',
          'H',
          'I',
          'J',
          'K',
          'L',
          'M',
          'N',
          'O',
          'P',
          'Q',
          'R',
          'S',
          'T',
          'U',
          'V',
          'W',
          'X',
          'Y',
          'Z'
        ],
        u = ''
      if ('number' === r)
        for (var i = 0; i < a; i++) {
          u += o[Math.floor(10 * Math.random())]
        }
      else if ('string' === r)
        for (var l = 0; l < a; l++) {
          u += o[10 + Math.floor(52 * Math.random())]
        }
      else
        for (var s = 0; s < a; s++) {
          u += o[Math.floor(62 * Math.random())]
        }
      e.set(t, n, 'value', u)
    },
    splitString: function(_sys, node, id, divider, result, cb) {
      var originString = _sys.get(node, id, 'value')

      var arr = originString.split(divider.toString())
      result && result(arr)
      cb && cb('finished', arr)
    },
    searchString: function(_sys, node, id, str, result, cb) {
      var originString = _sys.get(node, id, 'value')

      var index = originString.indexOf(str.toString())
      result && result(index)
      cb && cb('finished', index)
    }
  }),
  ($funcs['data-num'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setValue: function(e, t, n, a, r) {
      var o = parseFloat(a)
      void 0 === r ||
        isNaN(r) ||
        isNaN(o) ||
        (o = parseFloat(o.toFixed(parseFloat(r)))),
        e.set(t, n, 'value', o)
    },
    addOne: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a || 0 === a || (a = 0)
      var r = parseFloat(a) + 1
      e.set(t, n, 'value', r)
    },
    minusOne: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a || 0 === a || (a = 0)
      var r = parseFloat(a) - 1
      e.set(t, n, 'value', r)
    },
    addN: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      r || 0 === r || (r = 0)
      var o = parseFloat(r) + parseFloat(a)
      e.set(t, n, 'value', o)
    },
    minusN: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      r || 0 === r || (r = 0)
      var o = parseFloat(r) - parseFloat(a)
      e.set(t, n, 'value', o)
    },
    randomValue: function(e, t, n, a, r) {
      var o = r - a,
        u = Math.random() * o + a
      e.set(t, n, 'value', u)
    },
    randomInteger: function(e, t, n, a, r) {
      var o = Math.floor(r),
        u = Math.floor(a),
        i = o - u + 1,
        l = Math.ceil(Math.random() * i + u - 1)
      e.set(t, n, 'value', l)
    }
  }),
  ($funcs['data-bool'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setValue: function(e, t, n, a) {
      var r = !!a
      e.set(t, n, 'value', r)
    },
    setTrue: function(e, t, n) {
      e.set(t, n, 'value', true)
    },
    setFalse: function(e, t, n) {
      e.set(t, n, 'value', false)
    },
    toggleValue: function(_sys, node, id) {
      var value = !!_sys.get(node, id, 'value')
      _sys.set(node, id, 'value', !value)
    }
  }),
  ($funcs['data-time'] = {
    consoleData: function(e, t, n) {
      var a = e.get(t, n, 'value') || new Date().getTime()
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(a),
          a && window.console.log(new Date(a)))
        : console && console.log
    },
    setValue: function(e, t, n, a) {
      var r = Number(a)
      void 0 === r
        ? e.set(t, n, 'value', r)
        : isNaN(parseInt(r)) ||
          13 !== parseInt(r).toString().length ||
          e.set(t, n, 'value', r)
    },
    setSixPartsValue: function(e, t, n, a, r, o, u, i, l) {
      var millisecond = undefined
      if (typeof l === 'string') {
        if (l.indexOf('.') >= 0 || l.indexOf(':') >= 0) {
          var arrSecondMs = undefined
          if (l.indexOf('.') >= 0) {
            arrSecondMs = l.split('.')
          } else if (l.indexOf(':') >= 0) {
            arrSecondMs = l.split(':')
          }
          if (arrSecondMs && arrSecondMs.length === 2) {
            l = arrSecondMs[0]
            millisecond = parseInt(arrSecondMs[1])
            if (isNaN(millisecond)) {
              millisecond = undefined
            }
          }
        }
      }
      var s = new Date(
        parseInt(a),
        parseInt(r) - 1,
        parseInt(o),
        parseInt(u),
        parseInt(i),
        parseInt(l),
        millisecond || 0
      )
      if (!isNaN(s.getTime())) {
        var c = s.getTime()
        e.set(t, n, 'value', c)
      }
    },
    setTwoPartsValue: function(e, t, n, a, r) {
      if (a && r) {
        var o = a.split('-'),
          u = r.split(':')
        if (3 === o.length && (3 === u.length || 4 === u.length)) {
          var i = o[0],
            l = o[1],
            s = o[2],
            c = u[0],
            f = u[1],
            v = u[2],
            millisecond = undefined
          if (u.length === 4) {
            millisecond = parseInt(u[3])
            if (isNaN(millisecond)) {
              millisecond = undefined
            }
          } else if (v.indexOf('.') >= 0) {
            var arrSecondMs = v.split('.')
            v = arrSecondMs[0]
            if (arrSecondMs.length === 2) {
              millisecond = parseInt(arrSecondMs[1])
              if (isNaN(millisecond)) {
                millisecond = undefined
              }
            }
          }
          var g = new Date(
            parseInt(i),
            parseInt(l) - 1,
            parseInt(s),
            parseInt(c),
            parseInt(f),
            parseInt(v),
            millisecond || 0
          )
          if (!isNaN(g.getTime())) {
            var h = g.getTime()
            e.set(t, n, 'value', h)
          }
        }
      }
    },
    clearValue: function(e, t, n) {
      e.set(t, n, 'value', null)
    },
    _curTime: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'curTime'), a)
      )
    },
    _lastDay: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'lastDay'), a)
      )
    },
    _nextDay: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'nextDay'), a)
      )
    },
    _lastWeek: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'lastWeek'), a)
      )
    },
    _nextWeek: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'nextWeek'), a)
      )
    },
    _lastMonth: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'lastMonth'), a)
      )
    },
    _nextMonth: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'nextMonth'), a)
      )
    },
    _lastYear: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'lastYear'), a)
      )
    },
    _nextYear: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      return (
        null == r && (r = new Date().getTime()),
        dateType(dateOption(r, 'nextYear'), a)
      )
    },
    _lastNDay: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'lastDay', r), a)
      )
    },
    _nextNDay: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'nextDay', r), a)
      )
    },
    _lastNWeek: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'lastWeek', r), a)
      )
    },
    _nextNWeek: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'nextWeek', r), a)
      )
    },
    _lastNMonth: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'lastMonth', r), a)
      )
    },
    _nextNMonth: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'nextMonth', r), a)
      )
    },
    _lastNYear: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'lastYear', r), a)
      )
    },
    _nextNYear: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      return (
        null == o && (o = new Date().getTime()),
        dateType(dateOption(o, 'nextYear', r), a)
      )
    }
  }),
  ($funcs['data-obj-arr'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setRawValue: function(e, t, n, a) {
      e.set(t, n, 'value', a)
    },
    setValue: function(e, t, n, a) {
      e.set(t, n, 'value', JSON.parse(JSON.stringify(a)))
    },
    clearValue: function(e, t, n, a) {
      e.set(t, n, 'value', [])
      if (!!a) {
        e.set(t, n, 'headers', [])
      }
    },
    reverse: function(e, t, n) {
      e.set(t, n, 'value', e.get(t, n, 'value').reverse())
    },
    findObjs: function(e, t, n, a, l, r, o) {
      var groupCons = []
      if (a && a.length) {
        for (var index = a.length - 1; index >= 0; index--) {
          if (a[index].pred === 'or') {
            groupCons.push(a.splice(index))
          }
          if (index === 0) {
            groupCons.push(a)
          }
        }
      }

      var headers = e.get(t, n, 'headers')
      var titleArr = []
      if (Array.isArray(headers)) {
        headers.map(headerObj => {
          titleArr.push(headerObj.title)
        })
      }
      // function canPassCons(row) {
      //   var result = false
      //   if (groupCons.length) {
      //     // 新的AND OR 关系为：逢OR将条件并列割开
      //     for (
      //       var groupIndex = groupCons.length - 1;
      //       groupIndex >= 0;
      //       groupIndex--
      //     ) {
      //       var singleGroupCons = groupCons[groupIndex]
      //       var singleResult = true
      //       for (
      //         var singleIndex = 0, len = singleGroupCons.length;
      //         singleIndex < len;
      //         singleIndex++
      //       ) {
      //         var target = singleGroupCons[singleIndex]
      //         var subResult = COMP_FUNCS[target.comp](
      //           row && row[target.column],
      //           target.value
      //         )
      //         if (!subResult) {
      //           singleResult = false
      //         }
      //       }
      //       if (singleResult) {
      //         return true
      //       }
      //     }
      //   } else {
      //     return true
      //   }
      //   return result
      // }
      var s = e.get(t, n, 'value'),
        c = []
      if (s) {
        for (var sIndex = 0, sLen = s.length; sIndex < sLen; sIndex++) {
          // if (canPassCons(s[sIndex])) {
          //   c.push(s[sIndex])
          // }
          if (
            canPassCons({
              row: s[sIndex],
              groupCons: groupCons,
              titleArr: titleArr,
              headers: headers
            })
          ) {
            c.push(s[sIndex])
          }
        }
      }
      if (l) {
        c.length &&
          l.length &&
          c.sort(function(e, t) {
            for (var n = 0, a = 0; a < l.length; ) {
              var r = /^alpha/i.test(l[a].asc),
                o = /descend$/i.test(l[a].asc),
                u = r ? '' + (e && e[l[a].column]) : e && e[l[a].column],
                i = r ? '' + (t && t[l[a].column]) : t && t[l[a].column]
              if (i < u) {
                n = o ? -1 : 1
                break
              }
              if (u < i) {
                n = o ? 1 : -1
                break
              }
              a++
            }
            return n
          })
      }

      var filteredArr = c
      if (r) {
        var f = isNaN(r && r.offset) ? 0 : r.offset,
          v = isNaN(r && r.limit) ? void 0 : r.offset + r.limit
        if (void 0 !== v && v <= f) {
          var g = f
          ;(f = v - 1), (v = g + 1)
        }
        filteredArr = (!f && isNaN(v)) || !c.length ? c : c.slice(f, v)
      }
      o && o(filteredArr.length === 0 ? 'successEmpty' : 'success', filteredArr)
    },
    findObjsCnt: function(e, t, n, a, o) {
      var groupCons = []
      if (a && a.length) {
        for (var index = a.length - 1; index >= 0; index--) {
          if (a[index].pred === 'or') {
            groupCons.push(a.splice(index))
          }
          if (index === 0) {
            groupCons.push(a)
          }
        }
      }
      function canPassCons(row) {
        var result = false
        if (groupCons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (
            var groupIndex = groupCons.length - 1;
            groupIndex >= 0;
            groupIndex--
          ) {
            var singleGroupCons = groupCons[groupIndex]
            var singleResult = true
            for (
              var singleIndex = 0, len = singleGroupCons.length;
              singleIndex < len;
              singleIndex++
            ) {
              var target = singleGroupCons[singleIndex]
              var subResult = COMP_FUNCS[target.comp](
                row && row[target.column],
                target.value
              )
              if (!subResult) {
                singleResult = false
              }
            }
            if (singleResult) {
              return true
            }
          }
        } else {
          return true
        }
        return result
      }
      var s = e.get(t, n, 'value'),
        c = 0
      if (s) {
        for (var sIndex = 0, sLen = s.length; sIndex < sLen; sIndex++) {
          if (canPassCons(s[sIndex])) {
            c += 1
          }
        }
      }

      var filteredArrCnt = c

      o && o(filteredArrCnt === 0 ? 'successEmpty' : 'success', filteredArrCnt)
    },
    deleteRow: function(_sys, node, id, cons) {
      var array = _sys.get(node, id, 'value')
      if (Array.isArray(array)) {
        array = array.slice()
      }
      var rowNum = cons
      if (array) {
        if (!isNaN(rowNum)) {
          // 兼容
          if (array && (rowNum || rowNum === 0)) {
            array.splice(rowNum, 1)
            _sys.set(node, id, 'value', array)
          }
        } else {
          var groupCons = []
          if (cons && cons.length) {
            // 新的AND OR 关系为：逢OR将条件并列割开
            for (var index = cons.length - 1; index >= 0; index--) {
              if (cons[index].pred === 'or') {
                groupCons.push(cons.splice(index))
              }
              if (index === 0) {
                groupCons.push(cons)
              }
            }
          }
          function canPassCons(row, index) {
            var result = false
            if (groupCons.length) {
              for (
                var groupIndex = groupCons.length - 1;
                groupIndex >= 0;
                groupIndex--
              ) {
                var singleGroupCons = groupCons[groupIndex]
                var singleResult = true
                for (
                  var singleIndex = 0, len = singleGroupCons.length;
                  singleIndex < len;
                  singleIndex++
                ) {
                  // 特殊处理行号，与index对比
                  var subResult = undefined
                  if (singleGroupCons[singleIndex].column === '$objArrRow') {
                    subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                      index,
                      singleGroupCons[singleIndex].value
                    )
                  } else {
                    subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                      row && row[singleGroupCons[singleIndex].column],
                      singleGroupCons[singleIndex].value
                    )
                  }
                  if (!subResult) {
                    singleResult = false
                  }
                }
                if (singleResult) {
                  result = true
                }
              }
            } else {
              result = true
            }
            return result
          }
          var arr = _sys.get(node, id, 'value')
          if (arr && arr.length > 0) {
            var filteredArr = arr.filter(function(row, index) {
              // 筛选出不符合条件的即为删除的
              return !canPassCons(row, index)
            })
            _sys.set(node, id, 'value', filteredArr)
          }
        }
      }
    },
    deleteRowByRowNum: function(_sys, node, id, rowNum) {
      var array = _sys.get(node, id, 'value')
      if (Array.isArray(array)) {
        array = array.slice()
      }

      if (!array || rowNum === undefined) {
        return
      }

      if (!isNaN(rowNum)) {
        array.splice(rowNum, 1)
        _sys.set(node, id, 'value', array)
      } else {
        var rows = []
        if (Array.isArray(rowNum)) {
          rows = rowNum
        } else {
          rows = rowNum.split(',')
        }
        rows = rows.map(function(item) {
          if (item !== undefined) {
            return parseInt(item)
          }
        })

        var filterArr = array.filter(function(item, index) {
          return !(rows.indexOf(index) >= 0)
        })
        _sys.set(node, id, 'value', filterArr)
      }
    },
    arrUpdate: function(_sys, node, id, cons, updates, cb) {
      var groupCons = []
      if (cons && cons.length) {
        for (var index = cons.length - 1; index >= 0; index--) {
          if (cons[index].pred === 'or') {
            groupCons.push(cons.splice(index))
          }
          if (index === 0) {
            groupCons.push(cons)
          }
        }
      }
      function canPassCons(row, cons) {
        var result = false
        if (groupCons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (
            var groupIndex = groupCons.length - 1;
            groupIndex >= 0;
            groupIndex--
          ) {
            var singleGroupCons = groupCons[groupIndex]
            var singleResult = true
            for (
              var singleIndex = 0, len = singleGroupCons.length;
              singleIndex < len;
              singleIndex++
            ) {
              var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                row && row[singleGroupCons[singleIndex].column],
                singleGroupCons[singleIndex].value
              )
              if (!subResult) {
                singleResult = false
              }
            }
            if (singleResult) {
              result = true
            }
          }
        } else {
          result = true
        }
        return result
      }
      // function canPassCons(row, cons) {
      //   var result = true
      //   if (cons && cons.length) {
      //     var i = 0
      //     while (i < cons.length) {
      //       if (cons[i] && COMP_FUNCS[cons[i].comp]) {
      //         var subResult = COMP_FUNCS[cons[i].comp](
      //           row && row[cons[i].column],
      //           cons[i].value
      //         )
      //         if (!subResult) {
      //           if (
      //             (cons[i + 1] && cons[i + 1].pred === 'and') ||
      //             !cons[i + 1]
      //           ) {
      //             result = false
      //             break
      //           }
      //         } else {
      //           while (cons[i + 1] && cons[i + 1].pred === 'or') i++
      //         }
      //       }
      //       i++
      //     }
      //   }
      //   return result
      // }
      // var headers = _sys.get(node, id, 'headers') || []
      // var _headers = headers.map(function(item) {
      //   return item.title
      // })
      var arr = _sys.get(node, id, 'value')
      var _arr = arr || []
      try {
        _arr = JSON.parse(JSON.stringify(arr))
      } catch (e) {}

      var filteredArr =
        _arr && _arr.length
          ? _arr.filter(function(row) {
              return canPassCons(row, cons)
            })
          : []

      var affect = []
      if (filteredArr.length && updates.length) {
        filteredArr.forEach(function(item, index) {
          updates.forEach(function(data, idx) {
            // if (_headers.indexOf(data.column) >= 0) {
            affect.push(index)
            var value = item[data.column]
            switch (data.op) {
              case 'set':
                item[data.column] = data.value
                break
              case 'inc':
                if (!isNaN(parseFloat(value))) {
                  item[data.column] = value + data.value
                }
                break
              case 'mul':
                if (!isNaN(parseFloat(value))) {
                  item[data.column] = value * data.value
                }
                break
            }
            // }
          })
        })
        var result = []
        var tmpObj = {}
        affect.forEach(function(a) {
          var key = typeof a + a
          if (!tmpObj[key]) {
            tmpObj[key] = true
            result.push(a)
          }
        })
        affect = result
        _sys.set(node, id, 'value', _arr)
      }
      if (cb) {
        var affectLength = affect.length
        if (affectLength > 0) {
          cb('success', { affect: affectLength })
        } else {
          cb('fail', { affect: affectLength })
        }
      }
    },
    rmRepeatRow: function(e, t, n) {
      var a = e.get(t, n, 'value')
      if (a && 0 < a.length) {
        var r = [],
          o = {}
        a.forEach(function(e) {
          var t = JSON.stringify(e)
          o[t] || ((o[t] = !0), r.push(e))
        }),
          e.set(t, n, 'value', r)
      }
    },
    rmRepeatRowByCol: function(e, t, n, col) {
      var a = e.get(t, n, 'value')
      if (a && 0 < a.length) {
        var r = [],
          o = {}
        a.forEach(function(e) {
          var t = e[col]
          if (t === null) {
            t = '__null__'
          } else if (t === undefined) {
            t = '__undefined__'
          } else if (typeof t === 'object') {
            t = JSON.stringify(t)
          } else {
            t = String(t)
          }
          o[t] || ((o[t] = !0), r.push(e))
        }),
          e.set(t, n, 'value', r)
      }
    },
    deleteCol: function(e, t, n, a) {
      var r = []
      r = Array.isArray(a) ? a : a.toString().split(',')
      var o = e.get(t, n, 'headers'),
        u = e.get(t, n, 'value')
      if (Array.isArray(u)) {
        u = u.slice()
      }
      r.forEach(function(n) {
        var a = -1
        o.forEach(function(e, t) {
          e.title === n && (a = t)
        }),
          a > -1 && o.splice(a, 1),
          u &&
            u.forEach(function(e) {
              delete e[n]
            })
      }),
        e.set(t, n, 'headers', o),
        e.set(t, n, 'value', u)
    },
    addCol: function(e, t, n, a, r) {
      var o = []
      a = klona(a)
      Array.isArray(a)
        ? (o = a)
        : (!a && 0 !== a) || (isNaN(a) || (a += ''), (o = a.split(',')))
      var u = e.get(t, n, 'headers'),
        i = e.get(t, n, 'value')
      0 === i.length && (i = [{}]),
        (o = (o = o.reduce(
          function(e, t) {
            return (
              null == t ||
              (isNaN(t) && 'String' !== (t.constructor.name || t.constructor))
                ? -1 === e.objArr.indexOf(t) &&
                  (e.objArr.push(t), e.uniqArr.push(t))
                : ((e.key = JSON.stringify(t)),
                  e.eleMap[e.key] ||
                    ((e.eleMap[e.key] = 1), e.uniqArr.push(t))),
              e
            )
          },
          { eleMap: {}, objArr: [], uniqArr: [], key: '' }
        ).uniqArr).filter(function(n) {
          var a = -1
          return (
            u.forEach(function(e, t) {
              e.title === n && (a = t)
            }),
            -1 === a
          )
        })).forEach(function(e) {
          u.push({ title: e, type: 's' })
        }),
        void 0 !== r &&
          (i.forEach(function(t) {
            o.forEach(function(e) {
              t[e] = r
            })
          }),
          e.set(t, n, 'value', i)),
        e.set(t, n, 'headers', u)
    },
    // addCol: function (_sys, node, id, cols, defaultValue) {
    //   var colArr = []
    //   try {
    //     cols = JSON.parse(JSON.stringify(cols))
    //   } catch (err) {}
    //   if (Array.isArray(cols)) {
    //     colArr = cols
    //   } else {
    //     if (cols || cols === 0) {
    //       if (!isNaN(cols)) {
    //         cols = cols + ''
    //       }

    //       colArr = cols.split(',')
    //     }
    //   }

    //   var headers = _sys.get(node, id, 'headers') || []

    //   var value = _sys.get(node, id, 'value') || []

    //   if (value.length === 0) {
    //     value = [{}]
    //   }
    //   colArr = colArr.reduce(
    //     function(res, el) {
    //       return (
    //         el === undefined ||
    //         (isNaN(el) && (el.constructor.name || el.constructor) !== 'String')
    //           ? res.objArr.indexOf(el) === -1
    //             ? (res.objArr.push(el), res.uniqArr.push(el))
    //             : void 0
    //           : ((res.key = JSON.stringify(el)),
    //             res.eleMap[res.key]
    //               ? void 0
    //               : ((res.eleMap[res.key] = 1), res.uniqArr.push(el))),
    //         res
    //       )
    //     },
    //     {
    //       eleMap: {},
    //       objArr: [],
    //       uniqArr: [],
    //       key: ''
    //     }
    //   ).uniqArr
    //   colArr = colArr.filter(function(c) {
    //     var index = -1
    //     headers.forEach(function(h, i) {
    //       if (h.title === c) {
    //         index = i
    //       }
    //     })
    //     return index === -1 // headers.findIndex((h) => h.title === c) === -1
    //   })
    //   colArr.forEach(function(col) {
    //     headers.push({
    //       title: col,
    //       type: 's'
    //     })
    //   }) // for (var col of colArr) {
    //   //   headers.push({ title: col, type: 's' })
    //   // }

    //   if (defaultValue !== undefined) {
    //     defaultValue = JSON.parse(JSON.stringify(defaultValue))
    //     value.forEach(function(r) {
    //       colArr.forEach(function(c) {
    //         r[c] = defaultValue
    //       })
    //     })

    //     _sys.set(node, id, 'value', value)
    //   }

    //   _sys.set(node, id, 'headers', headers)
    // },
    fillCol: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value'),
        u = e.get(t, n, 'headers')
      o = [].concat(o || [])
      try {
        r = JSON.parse(JSON.stringify(r))
      } catch (err) {}
      var i = -1
      if (
        ((u = u || []).forEach(function(e, t) {
          ;(t != a && e.title !== a) || (i = t)
        }),
        o.length && -1 !== i)
      ) {
        var l = u[i].title
        o.forEach(function(e, t) {
          o[t][l] = r
        }),
          e.set(t, n, 'value', o)
      }
    },
    addAnotherCol: function(e, t, n, a, r, o) {
      var u = e.get(t, n, 'value'),
        i = e.get(t, n, 'headers'),
        l = []
      Array.isArray(o)
        ? (l = o)
        : (!o && 0 !== o) || (isNaN(o) || (o += ''), (l = o.split(','))),
        r.forEach(function(e) {
          0 <= l.indexOf(e.title) && i.push(e)
        }),
        e.set(t, n, 'headers', i)
      var s = [],
        c = []
      a.forEach(function(e) {
        var t = {}
        for (var n in e) 0 <= l.indexOf(n) && (t[n] = e[n])
        s.push(t)
      }),
        (c =
          u.length >= s.length
            ? u.map(function(e, t) {
                return Object.assign(e, s[t])
              })
            : s.map(function(e, t) {
                return Object.assign(e, u[t])
              })),
        e.set(t, n, 'value', klona(c))
    },
    // addAnotherCol: function(_sys, node, id, objValue, objHeader, cols) {
    //   var array = _sys.get(node, id, 'value') || []
    //   var headers = _sys.get(node, id, 'headers') || []
    //   var colArr = []
    //   if (Array.isArray(cols)) {
    //     colArr = cols
    //   } else {
    //     if (cols || cols === 0) {
    //       if (!isNaN(cols)) {
    //         cols = cols + ''
    //       }
    //       colArr = cols.split(',')
    //     }
    //   }
    //   objHeader.forEach(function(h) {
    //     if (colArr.indexOf(h.title) >= 0) {
    //       headers.push(h)
    //     }
    //   })
    //   _sys.set(node, id, 'headers', headers)

    //   var arr = []
    //   var newArray = []
    //   objValue.forEach(function(item) {
    //     var rst = {}
    //     for (var i in item) {
    //       if (colArr.indexOf(i) >= 0) {
    //         rst[i] = item[i]
    //       }
    //     }
    //     arr.push(rst)
    //   })
    //   if (array.length >= arr.length) {
    //     newArray = array.map(function(item, idex) {
    //       return Object.assign(item, arr[idex])
    //     })
    //   } else {
    //     newArray = arr.map(function(item, idex) {
    //       return Object.assign(item, array[idex])
    //     })
    //   }
    //   try {
    //     newArray = JSON.parse(JSON.stringify(newArray))
    //   } catch (e) {}
    //   _sys.set(node, id, 'value', newArray)
    // },
    setOneValue: function(e, t, n, a, r, o) {
      var u = e.get(t, n, 'value')
      if (Array.isArray(u)) {
        u = u.slice()
      }
      o = klona(o)
      void 0 !== u[a] && (u[a][r] = o), e.set(t, n, 'value', u)
    },
    setRowColsValue: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      void 0 !== a &&
        r &&
        Array.isArray(r) &&
        0 < r.length &&
        r.forEach(function(e) {
          var t = e.col,
            n = e.value
          void 0 !== a &&
            void 0 !== t &&
            (null == o[a] && (o[a] = []), (o[a][t] = n))
        }),
        e.set(t, n, 'value', klona(o))
    },
    setMultiValue: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      a &&
        Array.isArray(a) &&
        0 < a.length &&
        a.forEach(function(e) {
          var t = e.col,
            n = e.row,
            a = e.value
          void 0 !== n &&
            void 0 !== t &&
            (null == r[n] && (r[n] = []), (r[n][t] = a))
        }),
        e.set(t, n, 'value', klona(r))
    },
    searchRowValue: function(_sys, node, id, value, result, cb) {
      // 参考arr2d的
      var array = _sys.get(node, id, 'value')
      if (Array.isArray(array)) {
        var arr = []
        array.forEach(function(item, i) {
          var idx = []
          if (Object.keys(item).length > 0) {
            Object.keys(item).forEach(function(key) {
              if (item[key] === value) {
                idx.push(i, key)
                arr.push(idx)
              }
            })
          }
        })
        if (result) {
          result(arr)
        }
        cb && cb('finished', arr)
      }
    },
    renameField: function(e, t, n, a) {
      if (a && 0 < a.length) {
        var r = []
        a.forEach(function(e) {
          e && e.key && e.value && r.push(e)
        })
        var o = e.get(t, n, 'value')
        o &&
          0 < o.length &&
          (o.forEach(function(t) {
            r.forEach(function(e) {
              t.hasOwnProperty(e.key) &&
                ((t[e.value] = t[e.key]), e.value !== e.key && delete t[e.key])
            })
          }),
          e.set(t, n, 'value', o))
      }
    },
    sortArr: function(e, t, n, r, a) {
      var o = e.get(t, n, 'value'),
        u = []
      switch (a) {
        case 'letterSort':
          u = o.sort(function(e, t) {
            var n = e[r].toString(),
              a = t[r].toString()
            return a < n ? 1 : n == a ? 0 : -1
          })
          break
        case 'letterReverse':
          u = o.sort(function(e, t) {
            var n = e[r].toString(),
              a = t[r].toString()
            return n < a ? 1 : n == a ? 0 : -1
          })
          break
        case 'numSort':
          u = o.sort(function(e, t) {
            return (
              (isNaN(Number(e[r])) ? 0 : Number(e[r])) -
              (isNaN(Number(t[r])) ? 0 : Number(t[r]))
            )
          })
          break
        case 'numReverse':
          u = o.sort(function(e, t) {
            var n = isNaN(Number(e[r])) ? 0 : Number(e[r])
            return (isNaN(Number(t[r])) ? 0 : Number(t[r])) - n
          })
      }
      e.set(t, n, 'value', u)
    },
    sortMultArr: function(e, t, n, r) {
      var o = e.get(t, n, 'value'),
        u = []
      if (!r || r.length === 0) {
        return
      }
      u = o.sort(function(a, b) {
        var c = 0,
          i = 0
        while (i < r.length) {
          var needToString = /^alpha/i.test(r[i].asc)
          //var needPinYin = /^pinyin/i.test(orders[i].asc)
          var isDescend = /descend$/i.test(r[i].asc)
          var left = needToString
            ? '' + (a && a[r[i].column])
            : a && a[r[i].column]
          var right = needToString
            ? '' + (b && b[r[i].column])
            : b && b[r[i].column]
          if (left > right) {
            c = isDescend ? -1 : 1
            break
          } else if (left < right) {
            c = isDescend ? 1 : -1
            break
          }
          i++
        }
        return c
      })
      e.set(t, n, 'value', u)
    },
    convertColArr: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = []
      r &&
        r.forEach(function(t) {
          try {
            t[a] = JSON.parse(t[a])
          } catch (e) {
            t[a] = t[a]
          }
          o.push(t)
        }),
        e.set(t, n, 'value', o)
    },
    addRow: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      if (Array.isArray(o)) {
        o = o.slice()
      }
      a = klona(a)
      a && ('head' === r ? o.unshift(a) : o.push(a), e.set(t, n, 'value', o))
    },
    addRowData: function(e, t, n, a) {
      var o = e.get(t, n, 'value')
      if (a !== undefined) {
        var insertTo = a['insertTo']
        delete a['insertTo']
        a = klona(a)
        if (Array.isArray(o)) {
          o = o.slice()
        }
        if (insertTo === 'head') {
          o.unshift(a)
        } else {
          o.push(a)
        }
        e.set(t, n, 'value', o)
      }
    },
    pushMulRow: function(e, t, n, a, i) {
      var r = e.get(t, n, 'value')
      if (a) {
        r = r.slice()
        var o = []
        if (i === 'head') {
          o = o.concat(a, r)
        } else {
          o = o.concat(r, a)
        }
        o = klona(o)
        e.set(t, n, 'value', o)
      }
    },
    insertRow: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      void 0 === a ||
        isNaN(r) ||
        ((o = o ? o.slice() : []).splice(r, 0, a),
        e.set(t, n, 'value', klona(o)))
    },
    insertMultipleRows: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
      if (void 0 !== a && a.length && !isNaN(r)) {
        var u = a.filter(function(e) {
          return void 0 !== e
        })
        u.length &&
          ((o = o
            .slice(0, r)
            .concat(u)
            .concat(o.slice(r))),
          e.set(t, n, 'value', klona(o)))
      }
    },
    cloneStructure: function(e, t, n, a) {
      if (a && 0 < a.length) {
        var r = e.get(t, n, 'value'),
          o = {}
        if (
          (a.forEach(function(e) {
            var t = e && void 0 !== e.title ? e.title : e
            o[t] = void 0
          }),
          r && 0 < r.length)
        ) {
          var u = []
          r.forEach(function(e) {
            var t = Object.assign({}, o, e)
            Object.keys(t).forEach(function(e) {
              a.indexOf(e) < 0 && delete t[e]
            }),
              u.push(t)
          }),
            0 === u.length && u.push(o),
            e.set(t, n, 'value', u)
        } else e.set(t, n, 'value', [o])
      } else {
        e.set(t, n, 'value', [])
      }
      var _headers = a
      try {
        _headers = JSON.parse(JSON.stringify(a))
      } catch (e) {}
      e.set(t, n, 'headers', _headers)
    },
    calculateSum: function(_sys, node, id, colNum, result, cb) {
      var array = _sys.get(node, id, 'value')
      var _colnum, _cb, _result, _cons, _orders, _range
      if (arguments.length === 6) {
        _colnum = colNum
        _cb = cb
        _result = result
      } else if (arguments.length === 5) {
        var params = arguments[3]
        if (params) {
          _colnum = params.colNum
          _cons = params.cons
          _orders = params.orders
          _range = params.range
          _result = params.result
        }
        _cb = arguments[4]
      }
      if (_cons || _orders || _range) {
        function transToNum(val) {
          if (isNaN(Number(val))) {
            if (typeof val === 'string') {
              return parseFloat(val) || 0
            } else {
              return 0
            }
          } else {
            return Number(val)
          }
        }
        var groupCons = []
        if (_cons && _cons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (var index = _cons.length - 1; index >= 0; index--) {
            if (_cons[index].pred === 'or') {
              groupCons.push(_cons.splice(index))
            }
            if (index === 0) {
              groupCons.push(_cons)
            }
          }
        }
        function canPassCons(row, cons) {
          var result = false
          if (groupCons.length) {
            for (
              var groupIndex = groupCons.length - 1;
              groupIndex >= 0;
              groupIndex--
            ) {
              var singleGroupCons = groupCons[groupIndex]
              var singleResult = true
              for (
                var singleIndex = 0, len = singleGroupCons.length;
                singleIndex < len;
                singleIndex++
              ) {
                var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                  row && row[singleGroupCons[singleIndex].column],
                  singleGroupCons[singleIndex].value
                )
                if (!subResult) {
                  singleResult = false
                }
              }
              if (singleResult) {
                result = true
              }
            }
          } else {
            result = true
          }
          return result
        }
        var arr = array
        var filteredArr = []
        if (arr) {
          for (var index = 0, len = arr.length; index < len; index++) {
            if (canPassCons(arr[index], _cons)) {
              filteredArr.push(arr[index])
            }
          }
        }
        if (filteredArr.length && _orders && _orders.length) {
          filteredArr.sort(function(a, b) {
            var result = 0
            var i = 0
            while (i < _orders.length) {
              var needToString = /^alpha/i.test(_orders[i].asc)
              var isDescend = /descend$/i.test(_orders[i].asc)
              var left = needToString
                ? '' + (a && a[_orders[i].column])
                : a && transToNum(a[_orders[i].column])
              var right = needToString
                ? '' + (b && b[_orders[i].column])
                : b && transToNum(b[_orders[i].column])

              if (left > right) {
                result = isDescend ? -1 : 1
                break
              } else if (left < right) {
                result = isDescend ? 1 : -1
                break
              }

              i++
            }
            return result
          })
        }
        if (_range) {
          var from = isNaN(_range && _range.offset) ? 0 : _range.offset
          var to = isNaN(_range && _range.limit)
            ? undefined
            : _range.offset + _range.limit
          if (to !== undefined && from >= to) {
            var temp = from
            from = to - 1
            to = temp + 1
          }
          if ((from || !isNaN(to)) && filteredArr.length) {
            filteredArr = filteredArr.slice(from, to)
          }
        }
        array = filteredArr
      }

      if (array && (_colnum || _colnum === 0)) {
        ;(function() {
          var sum = []
          var i = 0

          if (Array.isArray(_colnum)) {
            while (i < _colnum.length) {
              var itemSum = 0
              array.forEach(function(item) {
                var value = parseFloat(item[_colnum[i]])

                if (!isNaN(value)) {
                  itemSum += value
                }
              })
              sum.push(itemSum)
              i++
            }
          } else {
            sum = 0
            array.forEach(function(item) {
              var value = parseFloat(item[_colnum])

              if (!isNaN(value)) {
                sum += value
              }
            })
          }

          if (_result) {
            _result(sum)
          }

          _cb && _cb('finished', sum)
        })()
      }
    },
    calculateAverage: function(_sys, node, id, colNum, result, cb) {
      var array = _sys.get(node, id, 'value')
      var _colnum, _cb, _result, _cons, _orders, _range
      if (arguments.length === 6) {
        _colnum = colNum
        _cb = cb
        _result = result
      } else if (arguments.length === 5) {
        var params = arguments[3]
        if (params) {
          _colnum = params.colNum
          _cons = params.cons
          _orders = params.orders
          _range = params.range
          _result = params.result
        }
        _cb = arguments[4]
      }
      if (_cons || _orders || _range) {
        function transToNum(val) {
          if (isNaN(Number(val))) {
            if (typeof val === 'string') {
              return parseFloat(val) || 0
            } else {
              return 0
            }
          } else {
            return Number(val)
          }
        }
        var groupCons = []
        if (_cons && _cons.length) {
          // 新的AND OR 关系为：逢OR将条件并列割开
          for (var index = _cons.length - 1; index >= 0; index--) {
            if (_cons[index].pred === 'or') {
              groupCons.push(_cons.splice(index))
            }
            if (index === 0) {
              groupCons.push(_cons)
            }
          }
        }
        function canPassCons(row, cons) {
          var result = false
          if (groupCons.length) {
            for (
              var groupIndex = groupCons.length - 1;
              groupIndex >= 0;
              groupIndex--
            ) {
              var singleGroupCons = groupCons[groupIndex]
              var singleResult = true
              for (
                var singleIndex = 0, len = singleGroupCons.length;
                singleIndex < len;
                singleIndex++
              ) {
                var subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
                  row && row[singleGroupCons[singleIndex].column],
                  singleGroupCons[singleIndex].value
                )
                if (!subResult) {
                  singleResult = false
                }
              }
              if (singleResult) {
                result = true
              }
            }
          } else {
            result = true
          }
          return result
        }
        var arr = array
        var filteredArr = []
        if (arr) {
          for (var index = 0, len = arr.length; index < len; index++) {
            if (canPassCons(arr[index], _cons)) {
              filteredArr.push(arr[index])
            }
          }
        }
        if (filteredArr.length && _orders && _orders.length) {
          filteredArr.sort(function(a, b) {
            var result = 0
            var i = 0
            while (i < _orders.length) {
              var needToString = /^alpha/i.test(_orders[i].asc)
              var isDescend = /descend$/i.test(_orders[i].asc)
              var left = needToString
                ? '' + (a && a[_orders[i].column])
                : a && transToNum(a[_orders[i].column])
              var right = needToString
                ? '' + (b && b[_orders[i].column])
                : b && transToNum(b[_orders[i].column])

              if (left > right) {
                result = isDescend ? -1 : 1
                break
              } else if (left < right) {
                result = isDescend ? 1 : -1
                break
              }

              i++
            }
            return result
          })
        }
        if (_range) {
          var from = isNaN(_range && _range.offset) ? 0 : _range.offset
          var to = isNaN(_range && _range.limit)
            ? undefined
            : _range.offset + _range.limit
          if (to !== undefined && from >= to) {
            var temp = from
            from = to - 1
            to = temp + 1
          }
          if ((from || !isNaN(to)) && filteredArr.length) {
            filteredArr = filteredArr.slice(from, to)
          }
        }
        array = filteredArr
      }

      if (array && (_colnum || _colnum === 0)) {
        ;(function() {
          var average = []
          var i = 0

          if (Array.isArray(_colnum)) {
            while (i < _colnum.length) {
              var itemSum = 0
              array.forEach(function(item) {
                var value = parseFloat(item[_colnum[i]])

                if (!isNaN(value)) {
                  itemSum += value
                }
              })
              average.push(itemSum / array.length)
              i++
            }
          } else {
            var _itemSum = 0
            array.forEach(function(item) {
              var value = parseFloat(item[_colnum])

              if (!isNaN(value)) {
                _itemSum += value
              }
            })
            average = _itemSum / array.length
          }

          if (_result) {
            _result(average)
          }

          _cb && _cb('finished', average)
        })()
      }
    },
    _headers: function(e, t, n) {
      var a = e.get(t, n, 'headers')
      if (a) {
        var r = []
        return (
          a.forEach(function(e) {
            void 0 === e.title ? r.push(e.title) : r.push(e)
          }),
          a
        )
      }
      return []
    },
    _preHeaders: function(e, t, n) {
      var a = e.get(t, n, 'headers')
      if (a) {
        var r = []
        return (
          a.forEach(function(e) {
            void 0 === e.title ? r.push(e.title) : r.push(e)
          }),
          a
        )
      }
      return []
    },
    _curHeaders: function _curHeaders(_sys, node, id) {
      var value = _sys.get(node, id, 'value') || []
      var _headers = _sys.get(node, id, 'headers') || []
      function getHeaderType(_headers, headerName) {
        var type = 's'
        if (_headers instanceof Array && _headers.length > 0) {
          var _header = _headers.find(function(_header) {
            return _header['title'] === headerName
          })
          if (_header) {
            type = _header.type
          }
        }
        return type
      }
      var headers = []
      var headrNameList = []
      if (value instanceof Array) {
        value.map(function(val) {
          if (val instanceof Object) {
            Object.keys(val).map(function(key) {
              if (headrNameList.indexOf(key) < 0) {
                headrNameList.push(key)
                headers.push({
                  title: key,
                  type: getHeaderType(_headers, key)
                })
              }
            })
          }
        })
      } else if (value instanceof Object) {
        Object.keys(value).map(function(key) {
          headers.push({
            title: key,
            type: getHeaderType(_headers, key)
          })
        })
      }
      return headers
    },
    _rowCount: function(e, t, n) {
      var a = e.get(t, n, 'value')
      return a ? a.length : 0
    },
    _objArrCol: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = []
      return (
        r &&
          null != a &&
          r.forEach(function(e) {
            o.push(e[a])
          }),
        o
      )
    },
    _objArrItem: function(e, t, n, a) {
      var r = e.get(t, n, 'value'),
        o = {}
      return r && null != a && !isNaN(a) ? (o = r[parseFloat(a)]) : o
    },
    mergeTable: function(e, t, n, a, r) {
      var o =
        a &&
        a.filter &&
        a.filter(function(e) {
          return e && e.constructor === Array
        })
      if (0 < o.length) {
        function i(e, t) {
          for (var n = Object.getOwnPropertyNames(t), a = 0; a < n.length; a++)
            e[n[a]] = t[n[a]]
          return e
        }
        function u(e) {
          return Array.prototype.reduce.call(
            e,
            function(e, t) {
              return e + '' + (t + '').charCodeAt(0)
            },
            0
          )
        }
        function l(e) {
          return Array.prototype.reduce.call(
            e,
            function(e, t) {
              return e + s(t)
            },
            0
          )
        }
        var s = function(e) {
          return void 0 === e
            ? c
            : null === e
            ? f
            : isNaN(e)
            ? String === e.constructor
              ? u(e)
              : Array === e.constructor
              ? l(e)
              : (function(e) {
                  var t = 0
                  for (var n in e) t += l([n, e[n]])
                  return t
                })(e)
            : u('' + e)
        }
        o = o.reduce(function(e, t) {
          return e.concat(t)
        })
        var c = 946,
          f = 443
        e.set(
          t,
          n,
          'value',
          (function(e, t, n) {
            if (e && t && e.constructor === Array && t.constructor === Array)
              for (
                var a = e
                    .map(function(e) {
                      return [s(e && e[n]), e]
                    })
                    .sort(function(e, t) {
                      return e[0] - t[0]
                    }),
                  r = t
                    .map(function(e) {
                      return [s(e && e[n]), e]
                    })
                    .sort(function(e, t) {
                      return e[0] - t[0]
                    }),
                  o = 0,
                  u = 0;
                o < a.length && u < r.length;

              )
                r[u][0] < a[o][0] && u++,
                  r[u][0] > a[o][0] && o++,
                  r[u][0] === a[o][0] &&
                    (a[o][1] && i(a[o][1], r[u][1]), o++, u++)
            return e
          })(e.get(t, n, 'value'), o, r || '')
        )
      }
    },
    newMergeTable: function(_sys, node, id, params, callback) {
      var mergeSource = params.mergeSource
      var primaryKey = params.primaryKey
      var mergeMode = params.mergeMode //左联，右联，内联，外联
      if (!mergeMode) {
        mergeMode = 'left' //默认左联
      }

      var filteredParams =
        mergeSource &&
        mergeSource.filter &&
        mergeSource.filter(function(p) {
          return p && p.constructor === Array
        })

      if (filteredParams.length > 0) {
        var assign = function assign(obj1, obj2) {
          var cloneObj1 = JSON.parse(JSON.stringify(obj1))
          var cloneObj2 = JSON.parse(JSON.stringify(obj2))
          var keys = Object.getOwnPropertyNames(cloneObj2)

          for (var i = 0; i < keys.length; i++) {
            cloneObj1[keys[i]] = cloneObj2[keys[i]]
          }

          return cloneObj1
        }

        var encodeStr = function encodeStr(str) {
          return Array.prototype.reduce.call(
            str,
            function(code, s) {
              // 累加器计算错误的bug修复
              return code + '' + (s + '').charCodeAt(0)
            },
            0
          )
        }

        var encodeArr = function encodeArr(arr) {
          return Array.prototype.reduce.call(
            arr,
            function(code, el) {
              return code + encode(el)
            },
            0
          )
        }

        var encodeObj = function encodeObj(obj) {
          var code = 0

          for (var key in obj) {
            code += encodeArr([key, obj[key]])
          }

          return code
        }

        var encode = function encode(obj) {
          if (obj === undefined) return CODE_UNDEFINED
          if (obj === null) return CODE_NULL
          if (!isNaN(obj)) return encodeStr('' + obj)
          if (String === obj.constructor) return encodeStr(obj)
          if (Array === obj.constructor) return encodeArr(obj)
          return encodeObj(obj)
        }

        var sortMerge = function sortMerge(left, right, key, mergeMode) {
          var result = [],
            resultDict = {},
            resultOrderDict = {}
          if (
            left &&
            right &&
            left.constructor === Array &&
            right.constructor === Array
          ) {
            var newLeftTagArr = []
            var newLeft = left.map(function(el, index) {
              var arr = [encode(el && el[key]), el, index]
              newLeftTagArr.push(arr[0])
              return arr
            })
            var newRightTagArr = []
            var newRight = right.map(function(el, index) {
              var arr = [encode(el && el[key]), el, index]
              newRightTagArr.push(arr[0])
              return arr
            })

            // 重写合并算法：
            // 左联、内联、外联的情况都先遍历左表，在左表遍历时写入result
            // 右联则先遍历右表
            if (['left', 'inline', 'outline'].indexOf(mergeMode) > -1) {
              var matchTagDict = {}
              for (
                var leftIndex = 0, leftLen = newLeft.length;
                leftIndex < leftLen;
                leftIndex++
              ) {
                var leftTag = newLeftTagArr[leftIndex]
                var findInRight = false
                for (
                  var rightIndex = 0, rightLen = newRight.length;
                  rightIndex < rightLen;
                  rightIndex++
                ) {
                  var rightTag = newRightTagArr[rightIndex]
                  if (rightTag === leftTag) {
                    // 记录matchTag标记，用于外联查表
                    matchTagDict[leftTag] = true

                    findInRight = true
                    result.push(
                      assign(newLeft[leftIndex][1], newRight[rightIndex][1])
                    )
                  }
                }
                if (
                  !findInRight &&
                  ['left', 'outline'].indexOf(mergeMode) > -1
                ) {
                  result.push(assign({}, newLeft[leftIndex][1]))
                }
              }
              // 外联的情况，需要遍历右表,找到没有
              if (mergeMode === 'outline') {
                for (
                  var rightIndex = 0, rightLen = newRight.length;
                  rightIndex < rightLen;
                  rightIndex++
                ) {
                  var rightTag = newRightTagArr[rightIndex]
                  if (!matchTagDict[rightTag]) {
                    result.push(assign({}, newRight[rightIndex][1]))
                  }
                }
              }
            } else {
              // 右联则先遍历右表
              for (
                var rightIndex = 0, rightLen = newRight.length;
                rightIndex < rightLen;
                rightIndex++
              ) {
                var rightTag = newRightTagArr[rightIndex]
                var findInLeft = false
                for (
                  var leftIndex = 0, leftLen = newLeft.length;
                  leftIndex < leftLen;
                  leftIndex++
                ) {
                  var leftTag = newLeftTagArr[leftIndex]
                  if (rightTag === leftTag) {
                    findInLeft = true
                    result.push(
                      assign(newLeft[leftIndex][1], newRight[rightIndex][1])
                    )
                  }
                }
                if (!findInLeft) {
                  result.push(assign({}, newRight[rightIndex][1]))
                }
              }
            }
          }

          return result
        }

        filteredParams = filteredParams.reduce(function(res, p) {
          return res.concat(p)
        })
        var CODE_UNDEFINED = 946
        var CODE_NULL = 443

        var sortMergeResult = sortMerge(
          _sys.get(node, id, 'value'),
          filteredParams,
          primaryKey || '',
          mergeMode
        )
        callback && callback('finished', sortMergeResult)
      }
    },
    rowRandomSort: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a = JSON.parse(JSON.stringify(a))
      var r = []
      Object.assign(
        r,
        (function(e) {
          var t,
            n,
            a,
            r = e
          for (t = r.length - 1; 0 < t; t--)
            (n = Math.floor(Math.random() * (t + 1))),
              (a = r[t]),
              (r[t] = r[n]),
              (r[n] = a)
          return r
        })(a)
      ),
        e.set(t, n, 'value', r)
    },
    setRowData: function(_sys, node, id, rowNum, object) {
      var array = _sys.get(node, id, 'value')
      if (array && rowNum < array.length && object) {
        var newData = klona(object)
        if (Array.isArray(array)) {
          array = array.slice()
        }
        array[rowNum] = newData
      }
      _sys.set(node, id, 'value', array)
    },
    setMultiRowsData: function(_sys, node, id, rows, objArr) {
      var array = _sys.get(node, id, 'value')
      rows.forEach(function(rowNum, index) {
        var object = {}
        if (objArr && objArr[index]) {
          object = objArr[index]
        }
        if (array && rowNum < array.length && object) {
          var newData = klona(object)
          if (Array.isArray(array)) {
            array = array.slice()
          }
          array[rowNum] = newData
        }
      })
      _sys.set(node, id, 'value', array)
    },
    transformRowAndCol: function(_sys, node, id, arr, cb) {
      var objArr = _sys.get(node, id, 'value')
      var res = []
      if (
        arr instanceof Array &&
        arr[0] instanceof Array &&
        objArr instanceof Array &&
        objArr[0] instanceof Object
      ) {
        objArr.map(function(val) {
          arr.map(function(val2, index2) {
            if (res[index2] && res[index2] instanceof Object) {
              res[index2][val[val2[0]]] = val[val2[1]]
            } else {
              var temp = {}
              temp[val[val2[0]]] = val[val2[1]]
              res.push(temp)
            }
          })
        })
      }
      cb && cb('finished', res)
    }
  }),
  ($funcs['data-obj'] = {
    setValue: function(e, t, n, a) {
      e.set(t, n, 'value', a)
    }
  }),
  ($funcs['data-obj-1d'] = {
    setRawValue: function(_sys, node, id, value) {
      _sys.set(node, id, 'value', value)
    },
    setValue: function(_sys, node, id, value) {
      _sys.set(node, id, 'value', JSON.parse(JSON.stringify(value)))
    },
    clearValue: function(_sys, node, id) {
      _sys.set(node, id, 'value', {})
    },
    deleteCol: function(_sys, node, id, cols) {
      var colArr = []

      if (Array.isArray(cols)) {
        colArr = cols
      } else {
        colArr = cols.toString().split(',')
      }

      var headers = _sys.get(node, id, 'headers')

      var data = _sys.get(node, id, 'value')

      colArr.forEach(function(col) {
        var index = -1
        headers.forEach(function(e, i) {
          if (e.title === col) {
            index = i
          }
        }) // var index = headers.findIndex(e => e.title === col)
        if (index > -1) {
          headers.splice(index, 1)
        }
        if (data) {
          delete data[col]
        }
      })

      _sys.set(node, id, 'headers', headers)

      _sys.set(node, id, 'value', data)
    },
    addCol: function(_sys, node, id, cols, defaultValue) {
      var colArr = []

      if (Array.isArray(cols)) {
        colArr = cols
      } else {
        if (cols || cols === 0) {
          if (!isNaN(cols)) {
            cols = cols + ''
          }

          colArr = cols.split(',')
        }
      }

      var headers = _sys.get(node, id, 'headers')

      var value = _sys.get(node, id, 'value')

      colArr.forEach(function(col) {
        headers.push({
          title: col,
          type: 's'
        })
      }) // for (var col of colArr) {
      //   headers.push({ title: col, type: 's' })
      // }

      if (defaultValue !== undefined) {
        colArr.forEach(function(c) {
          value[c] = defaultValue
        })

        _sys.set(node, id, 'value', value)
      }

      _sys.set(node, id, 'headers', headers)
    },
    setOneValue: function(_sys, node, id, key, value) {
      var data = _sys.get(node, id, 'value')
      data[key] = value
      _sys.set(node, id, 'value', data)
    },
    setRowColsValue: function(_sys, node, id, colValue) {
      var data = _sys.get(node, id, 'value')

      if (colValue && Array.isArray(colValue) && colValue.length > 0) {
        colValue.forEach(function(item) {
          var col = item.col
          var value = item.value

          if (col !== undefined) {
            data[col] = value
          }
        })
      }

      _sys.set(node, id, 'value', data)
    },
    cloneStructure: function(_sys, node, id, headers) {
      if (headers && headers.length > 0) {
        var array = _sys.get(node, id, 'value')

        var item = {}
        headers.forEach(function(v) {
          var title = v && v.title !== undefined ? v.title : v
          item[title] = undefined
        })
        var props = Object.keys(item)

        if (array && array.length > 0) {
          // 检查每个对象
          var newArr = []
          array.forEach(function(v) {
            var _safeV = v || item
            newArr.push(
              props.reduce(function(_item, key) {
                var obj = {}
                obj[key] = _safeV[key]
                return Object.assign(_item, obj)
              }, {})
            )
          })

          if (newArr.length === 0) {
            _sys.set(node, id, 'value', item)
          } else {
            _sys.set(node, id, 'value', newArr[0])
          }
        } else {
          _sys.set(node, id, 'value', item)
        }
      } else {
        _sys.set(node, id, 'value', {})
      }
      var _headers = headers
      try {
        _headers = JSON.parse(JSON.stringify(headers))
      } catch (e) {}
      _sys.set(node, id, 'headers', _headers)
    },
    renameField: function(_sys, node, id, params) {
      if (params && params.length > 0) {
        var oldNewPairs = []
        params.forEach(function(pair) {
          if (pair && pair.key && pair.value) oldNewPairs.push(pair)
        })
        var data = _sys.get(node, id, 'value')
        if (data) {
          oldNewPairs.forEach(function(pair) {
            if (data.hasOwnProperty(pair.key)) {
              data[pair.value] = data[pair.key]
              delete data[pair.key]
            }
          })
          _sys.set(node, id, 'value', data)
        }
      }
    }
  }),
  ($funcs['data-int'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setValue: function(e, t, n, a, r) {
      var o = parseInt(a)
      e.set(t, n, 'value', o)
    },
    addOne: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a || 0 === a || (a = 0)
      var r = parseInt(a) + 1
      e.set(t, n, 'value', r)
    },
    minusOne: function(e, t, n) {
      var a = e.get(t, n, 'value')
      a || 0 === a || (a = 0)
      var r = parseInt(a) - 1
      e.set(t, n, 'value', r)
    },
    addN: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      r || 0 === r || (r = 0)
      var o = parseInt(r) + parseInt(a)
      e.set(t, n, 'value', o)
    },
    minusN: function(e, t, n, a) {
      var r = e.get(t, n, 'value')
      r || 0 === r || (r = 0)
      var o = parseInt(r) - parseInt(a)
      e.set(t, n, 'value', o)
    },
    randomInteger: function(e, t, n, a, r) {
      var o = Math.floor(r),
        u = Math.floor(a),
        i = o - u + 1,
        l = Math.ceil(Math.random() * i + u - 1)
      e.set(t, n, 'value', l)
    }
  })
var VALUE_DEFAULT = {
  string: '',
  boolean: !($funcs['data-obj-json'] = {
    consoleData: function(e, t, n) {
      window && window.console
        ? (window.console.log('===' + e.get(t, n, 'name') + '的当前值==='),
          window.console.log(e.get(t, n, 'value')))
        : console && console.log
    },
    setValue: function(e, t, n, a) {
      e.set(t, n, 'value', a)
    },
    cloneStructure: function(e, t, n, a, r) {
      var o = e.get(t, n, 'value')
          ? JSON.parse(JSON.stringify(e.get(t, n, 'value')))
          : e.get(t, n, 'value'),
        u = r || 'object'
      if (a && 0 < a.length) {
        if (
          o &&
          (('[object Object]' === Object.prototype.toString.call(o) &&
            'object' === u) ||
            (Array.isArray(o) && 'array' === u))
        ) {
          function s(t, n) {
            var e,
              a = (function(e) {
                var t = 'normal'
                switch (e) {
                  case '[object Array]':
                    t = 'array'
                    break
                  case '[object Object]':
                    t = 'object'
                    break
                  default:
                    t = 'normal'
                }
                return t
              })(Object.prototype.toString.call(t)),
              r = n.type
            if (
              (0 <= ['string', 'number', 'boolean'].indexOf(n.type) &&
                (r = 'normal'),
              a === r)
            )
              switch (a) {
                case 'array':
                  var o = []
                  0 === t.length
                    ? (o[0] = genArrayValue(n))
                    : n && n.children && 0 < n.children.length
                    ? t.forEach(function(e, t) {
                        o[t] = s(e, n.children[0])
                      })
                    : (o = t),
                    (e = o)
                  break
                case 'object':
                  var u = {}
                  if (n && n.children && 0 < n.children.length) {
                    var i = []
                    n.children.forEach(function(e, t) {
                      i.indexOf(e.name) < 0 && i.push({ key: e.name, index: t })
                    }),
                      i.forEach(function(e) {
                        u[e.key] = s(t[e.key], n.children[e.index])
                      })
                  } else u = t
                  e = u
                  break
                default:
                  e = void 0 === t ? VALUE_DEFAULT[n.type] : t
              }
            else if ('object' === n.type) {
              var l = {}
              genParams(n.children, l), (e = l)
            } else
              'array' === n.type
                ? (e = genArrayValue(n))
                : 0 <= ['string', 'number', 'boolean'].indexOf(n.type) &&
                  (e = void 0 === t ? VALUE_DEFAULT[n.type] : t)
            return e
          }
          if ('object' === u) {
            var i = {}
            a.forEach(function(e) {
              i[e.name] = s(o[e.name], e)
            }),
              (o = i)
          } else if ('array' === u) {
            var l = []
            o.forEach(function(e) {
              var t = a[0],
                n = s(e, t)
              l.push(n)
            }),
              (o = l)
          }
        } else o = genJsonDefaultValueByParams(a, u)
        e.set(t, n, 'value', o)
      } else 'array' === u ? e.set(t, n, 'value', []) : e.set(t, n, 'value', {})
    }
  }),
  number: 0
}
function dateOption(e, t, n) {
  var a = new Date(e),
    r = void 0 === n ? 1 : n,
    curDate = a.getDate()
  switch (
    (0 <= ['lastWeek', 'nextWeek'].indexOf(t) && (r = void 0 === n ? 7 : 7 * n),
    t)
  ) {
    case 'curTime':
      break
    case 'lastDay':
      a.setDate(a.getDate() - r)
      break
    case 'nextDay':
      a.setDate(a.getDate() + r)
      break
    case 'lastWeek':
      a.setDate(a.getDate() - r)
      break
    case 'nextWeek':
      a.setDate(a.getDate() + r)
      break
    case 'lastMonth':
      a.setMonth(a.getMonth() - r)
      break
    case 'nextMonth':
      a.setMonth(a.getMonth() + r)
      break
    case 'lastYear':
      a.setFullYear(a.getFullYear() - r)
      break
    case 'nextYear':
      a.setFullYear(a.getFullYear() + r)
  }
  if (0 <= ['lastMonth', 'nextMonth', 'lastYear', 'nextYear'].indexOf(t)) {
    var newDate = a.getDate()
    if (newDate !== curDate) {
      a.setDate(0)
    }
  }
  return a.getTime()
}
function dateType(e, t) {
  function n(e) {
    return e < 10 ? '0' + e : e
  }
  var a = new Date(e)
  switch (t) {
    case 'year':
      return n(a.getFullYear())
    case 'month':
      return n(a.getMonth() + 1)
    case 'day':
      return n(a.getDate())
    case 'hour':
      return n(a.getHours())
    case 'min':
      return n(a.getMinutes())
    case 'sec':
      return n(a.getSeconds())
    case 'weekDay':
      return [
        '星期天',
        '星期一',
        '星期二',
        '星期三',
        '星期四',
        '星期五',
        '星期六'
      ][a.getDay()]
    case 'weekDayValue':
      return a.getDay()
    case 'ymd':
      return (
        n(a.getFullYear()) + '-' + n(a.getMonth() + 1) + '-' + n(a.getDate())
      )
    case 'hms':
      return n(a.getHours()) + ':' + n(a.getMinutes()) + ':' + n(a.getSeconds())
    case 'ymdhms':
      return (
        n(a.getFullYear()) +
        '-' +
        n(a.getMonth() + 1) +
        '-' +
        n(a.getDate()) +
        ' ' +
        n(a.getHours()) +
        ':' +
        n(a.getMinutes()) +
        ':' +
        n(a.getSeconds())
      )
    case 'unixtime':
      return Math.round(e / 1e3)
    case 'unixtimeMil':
      return e
    case 'daysOfYear':
      return 28 === new Date(a.getFullYear(), 2, 0).getDate() ? 365 : 366
    case 'daysOfMon':
      var r = a.getFullYear(),
        o = a.getMonth() + 1
      return new Date(r, o, 0).getDate()
    default:
      return a
  }
}
var timeSubProps = [
  { name: 'year', locale: { zh: '年', en: 'Year' } },
  { name: 'month', locale: { zh: '月', en: 'Month' } },
  { name: 'day', locale: { zh: '日', en: 'day' } },
  { name: 'hour', locale: { zh: '时', en: 'Hour' } },
  { name: 'min', locale: { zh: '分', en: 'Min' } },
  { name: 'sec', locale: { zh: '秒', en: 'Sec' } },
  { name: 'weekDay', locale: { zh: '星期几(文本)', en: 'WeekDay(text)' } },
  { name: 'weekDayValue', locale: { zh: '星期几(0~6)', en: 'WeekDay(0~6)' } },
  { name: 'ymd', locale: { zh: '年月日', en: 'Y-M-D' } },
  { name: 'hms', locale: { zh: '时分秒', en: 'H:M:S' } },
  { name: 'ymdhms', locale: { zh: '年月日时分秒', en: 'Y-M-D H:M:S' } },
  { name: 'unixtime', locale: { zh: 'UNIX时间(秒)', en: 'Timestamp(s)' } },
  {
    name: 'unixtimeMil',
    locale: { zh: 'UNIX时间(毫秒)', en: 'Timestamp(ms)' }
  },
  {
    name: 'daysOfYear',
    locale: { zh: '本年天数', en: 'Number of days this year ' }
  },
  {
    name: 'daysOfMon',
    locale: { zh: '本月天数', en: 'Number of days this month ' }
  }
]
function toLowerCase(a) {
  return a ? String(a).toLowerCase() : a
}
var COMP_FUNCS = {
  eq: function(a, b, extra) {
    if (b === '$any') return true
    if (extra && extra.insensitiveString) {
      a = toLowerCase(a)
      b = toLowerCase(b)
    }
    return a == b
  },
  neq: function(a, b, extra) {
    if (b === '$any') return true
    if (extra && extra.insensitiveString) {
      a = toLowerCase(a)
      b = toLowerCase(b)
    }
    return a != b
  },
  gt: function(a, b) {
    if (b === '$any') return true
    return a > b
  },
  lt: function(a, b) {
    if (b === '$any') return true
    return a < b
  },
  gt: function(a, b) {
    if (b === '$any') return true
    return a > b
  },
  lt: function(a, b) {
    if (b === '$any') return true
    return a < b
  },
  gte: function(a, b) {
    if (b === '$any') return true
    return a >= b
  },
  lte: function(a, b) {
    if (b === '$any') return true
    return a <= b
  },
  has: function(a, b, extra) {
    if (b === '$any') return true
    if (extra && extra.insensitiveString) {
      a = toLowerCase(a)
      b = toLowerCase(b)
    }
    return a && a.length && a.indexOf(b) !== -1
  },
  nhas: function(a, b, extra) {
    if (b === '$any') return true
    if (extra && extra.insensitiveString) {
      a = toLowerCase(a)
      b = toLowerCase(b)
    }
    return !(a && a.length && a.indexOf(b) !== -1)
  },
  in: function(a, b, extra) {
    if (b === '$any') return true
    if (extra && extra.insensitiveString) {
      a = toLowerCase(a)
      b = toLowerCase(b)
    }
    return b && b.length && b.indexOf(a) !== -1
  },
  nin: function(a, b, extra) {
    if (b === '$any') return true
    if (extra && extra.insensitiveString) {
      a = toLowerCase(a)
      b = toLowerCase(b)
    }
    return !(b && b.length && b.indexOf(a) !== -1)
  }
}
function canPassCons({ row, cons, groupCons, titleArr, headers, is2dArray }) {
  var result = false
  if (groupCons.length) {
    // 新的AND OR 关系为：逢OR将条件并列割开
    for (var groupIndex = groupCons.length - 1; groupIndex >= 0; groupIndex--) {
      var singleGroupCons = groupCons[groupIndex]
      var singleResult = true
      for (
        var singleIndex = 0, len = singleGroupCons.length;
        singleIndex < len;
        singleIndex++
      ) {
        var subResult

        var titleIndex = is2dArray
          ? singleGroupCons[singleIndex].column
          : titleArr.indexOf(String(singleGroupCons[singleIndex].column))
        if (
          titleIndex > -1 &&
          headers[titleIndex] &&
          headers[titleIndex].type === 'insensitiveString' &&
          ['eq', 'neq', 'has', 'nhas', 'in', 'nin'].includes(
            singleGroupCons[singleIndex].comp
          )
        ) {
          //对象数组和二维数组的筛选支持不分大小写
          subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
            row && row[singleGroupCons[singleIndex].column],
            singleGroupCons[singleIndex].value,
            { insensitiveString: true }
          )
        } else {
          subResult = COMP_FUNCS[singleGroupCons[singleIndex].comp](
            row && row[singleGroupCons[singleIndex].column],
            singleGroupCons[singleIndex].value
          )
        }
        if (!subResult) {
          singleResult = false
        }
      }
      if (singleResult) {
        result = true
      }
    }
  } else {
    result = true
  }
  return result
}
function flatArray(e) {
  return Array.isArray(e)
    ? Array.prototype.concat.apply([], e.map(flatArray))
    : e
}
function flatten(e, t) {
  void 0 === t && (t = 1)
  for (var n = e; t--; ) n = shallowFlatten(n)
  return n
}
function shallowFlatten(e) {
  return e.reduce(function(e, t) {
    return e.concat(t)
  }, [])
}

// manual start
var sysUtil = {
  getSelf: function(item) {
    return item
  },
  getInParams: function(item) {
    var sysList = [
      '_client',
      '_eid',
      '_gid',
      '_lang',
      '_locOffset',
      '_nid',
      '_sid',
      '_uid'
    ]
    var result = item
    if (item && Object.keys(item).length > 0) {
      result = {}
      var keys = Object.keys(item)
      keys.forEach(function(key) {
        if (sysList.indexOf(key) < 0) {
          result[key] = item[key]
        }
      })
    }
    return result
  },
  getInParams_body: function(item) {
    var sysList = [
      '_client',
      '_eid',
      '_gid',
      '_lang',
      '_locOffset',
      '_nid',
      '_sid',
      '_uid',
      '_header',
      '_urlQuery'
    ]
    var result = item
    if (item && Object.keys(item).length > 0) {
      result = {}
      var keys = Object.keys(item)
      keys.forEach(function(key) {
        if (sysList.indexOf(key) < 0) {
          result[key] = item[key]
        }
      })
    }
    if (item._header) {
      // 公开服务,接收类型为string/array时,body信息需要去掉外层的{"body": xxx}
      if (item['_header']['Content-Type'] === 'text/plain') {
        result = item.body
      } else if (item['_header']['Content-Type'] === 'application/json') {
        if (
          item.body &&
          result.body &&
          result.body &&
          Array.isArray(result.body) &&
          Object.keys(result).length === 1
        ) {
          result = item.body
        }
      }
    }
    return result
  },
  getInParams_url: function(item) {
    var result = item
    if (item) {
      result = item['_urlQuery'] || {}
    }
    return result
  },
  toJsonString: function(item) {
    var result = item
    try {
      result = JSON.stringify(item)
    } catch (e) {}
    return result
  },
  getResult: function(cbParams) {
    return cbParams && cbParams.result
  },
  encrypt_getResult: function(cbParams) {
    return cbParams && cbParams.result && cbParams.result.result
  },
  obj_keys: function(obj) {
    return Object.keys(obj)
  },
  obj_item: function(obj, name) {
    var result = undefined
    var _value = obj || {}
    if (_value && name !== undefined && name !== null) {
      result = _value[name]
    }
    return result
  },
  // db方法
  db_getDataObjArr: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = []
    var lang = 'zh'
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    if (result && result.columns && result.data) {
      var isGroupBy = result.groupBy || false
      result.data.forEach(function(v) {
        var item = {}
        if (v) {
          v.forEach(function(v2, i2) {
            var name = result.columns[i2].name
            if (result.mapping) {
              // if (lang === 'zh') {
              if (isGroupBy) {
                if (!item[name]) {
                  item[name] = {}
                }
                if (!result.columns[i2].aggregate) {
                  item[name].DEFAULT = v2
                } else {
                  item[name][result.columns[i2].aggregate] = v2
                }
              } else {
                item[name] = v2
              }
              // }
              name = result.columns[i2].internal
                ? result.mapping[name] || name
                : name
            }
            if (isGroupBy) {
              if (!item[name]) {
                item[name] = {}
              }
              if (!result.columns[i2].aggregate) {
                item[name].DEFAULT = v2
              } else {
                item[name][result.columns[i2].aggregate] = v2
              }
            } else {
              item[name] = v2
            }
          })
        }
        objArr.push(item)
      })
    }
    // 对groupBy只有单个值的兼容处理
    if (isGroupBy && objArr.length > 0) {
      objArr.forEach(function(item) {
        if (item && Object.keys(item).length > 0) {
          Object.keys(item).forEach(function(key) {
            if (item[key] && Object.keys(item[key]).length === 1) {
              item[key] = item[key][Object.keys(item[key])[0]]
            }
          })
        }
      })
    }
    return objArr
  },
  db_getDataObjLocArr: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = []
    var lang = 'zh'
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    if (result && result.columns && result.data) {
      var isGroupBy = result.groupBy || false
      result.data.forEach(function(v) {
        var item = {}
        if (v) {
          v.forEach(function(v2, i2) {
            var name = result.columns[i2].name
            name = result.columns[i2].internal
              ? result.mapping
                ? result.mapping[name] || name
                : name
              : name
            if (isGroupBy) {
              if (!item[name]) {
                item[name] = {}
              }
              if (!result.columns[i2].aggregate) {
                item[name].DEFAULT = v2
              } else {
                item[name][result.columns[i2].aggregate] = v2
              }
            } else {
              item[name] = v2
            }
          })
          // 因为之前status没有翻译，所以增加一个status的翻译，为了兼容，原先的status不删除
          if (result.replenish && item.status) {
            item[result.replenish[lang].status] = item.status
          }
        }
        objArr.push(item)
      })
    }
    // 对groupBy只有单个值的兼容处理
    if (isGroupBy && objArr.length > 0) {
      objArr.forEach(function(item) {
        if (item && Object.keys(item).length > 0) {
          Object.keys(item).forEach(function(key) {
            if (item[key] && Object.keys(item[key]).length === 1) {
              item[key] = item[key][Object.keys(item[key])[0]]
            }
          })
        }
      })
    }
    return objArr
  },
  db_getLength: function(cbParams) {
    var data = cbParams && cbParams.result && cbParams.result.data
    return data ? data.length : 0
  },
  db_getDataObjJsonArr: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = []
    if (result && result.columns && result.data) {
      var lang = 'zh'
      try {
        lang = $sys.lang || 'zh'
      } catch (e) {}
      result.data.forEach(function(v) {
        var item = {}
        if (v) {
          var detail = []
          var hasSku = false
          v.forEach(function(v2, i2) {
            if (
              result.columns[i2].internal &&
              result.columns[i2].name.indexOf('sku_') >= 0
            ) {
              hasSku = true
              var name = result.columns[i2].name.substr(4)
              var value
              try {
                value = v2 ? JSON.parse(v2) : [undefined]
                if (!Array.isArray(value)) {
                  value = [undefined]
                }
              } catch (e) {
                value = [undefined]
              }
              value.forEach(function(vv, vi) {
                if (!detail[vi]) {
                  detail[vi] = {}
                }
                if (result.mapping) {
                  // if (lang === 'zh') {
                  detail[vi][name] = vv
                  // }
                  name = result.mapping[result.columns[i2].name] || name
                }
                detail[vi][name] = vv
              })
            } else {
              var name = result.columns[i2].name
              if (result.mapping) {
                // if (lang === 'zh') {
                item[name] = v2
                // }
                name = result.mapping[result.columns[i2].name] || name
              }
              item[name] = v2
            }
          })
          if (hasSku) {
            var detailName = 'detail'
            if (result.mapping) {
              // if (lang === 'zh') {
              item[detailName] = detail
              // }
              detailName = result.mapping[detailName] || detailName
            }
            item[detailName] = detail
          }
        }
        objArr.push(item)
      })
    }
    return objArr
  },
  // 是否成功
  db_isSuccess: function(cbParams) {
    var param = cbParams
    var result = true
    if (param && param.status !== 0) {
      result = false
    }
    var lang = 'zh'
    var map = {
      zh: ['是', '否'],
      en: ['true', 'false']
    }
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    var resMap = map[lang] || map['zh']
    return result ? resMap[0] : resMap[1]
  },
  // 失败原因
  db_failReason: function(cbParams) {
    var param = cbParams
    var reason = ''
    if (param) {
      if (param.status !== 0) {
        if (param.result && param.result.detail) {
          reason = param.result.detail
        }
      }
    }
    return reason
  },
  // 获取数据id
  db_getDataId: function(cbParams) {
    var param = cbParams
    var id = ''
    if (param) {
      if (
        param.status === 0 &&
        param.result &&
        param.result.data &&
        param.result.data.length > 0
      ) {
        id = param.result.data[0][0]
      }
    }
    return id
  },
  // 获取数据id组
  db_getDataIds: function(cbParams) {
    var param = cbParams
    var ids = []
    if (param) {
      if (
        param.status === 0 &&
        param.result &&
        param.result.data &&
        param.result.data.length > 0
      ) {
        param.result.data.forEach(function(item) {
          ids.push(item[0])
        })
      }
    }
    return ids
  },
  db_getOneArr: function(cbParams) {
    var result = cbParams && cbParams.result
    var arr = []
    if (result && result.data && result.data.length > 0) {
      arr = result.data[0] || []
    }
    return arr
  },
  db_getDataObj: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = []
    var lang = 'zh'
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    if (result && result.columns && result.data) {
      result.data.forEach(function(v) {
        var item = {}
        if (v) {
          v.forEach(function(v2, i2) {
            var name = result.columns[i2].name
            if (result.mapping) {
              // if (lang === 'zh') {
              item[name] = v2
              // }
              name = result.columns[i2].internal
                ? result.mapping[name] || name
                : name
            }
            item[name] = v2
          })
        }
        objArr.push(item)
      })
    }
    return objArr[0] || {}
  },
  db_getDataLocObj: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = []
    var lang = 'zh'
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    if (result && result.columns && result.data) {
      result.data.forEach(function(v) {
        var item = {}
        if (v) {
          v.forEach(function(v2, i2) {
            var name = result.columns[i2].name
            if (result.mapping) {
              name = result.columns[i2].internal
                ? result.mapping[name] || name
                : name
            }
            item[name] = v2
          })
        }
        objArr.push(item)
      })
    }
    return objArr[0] || {}
  },
  // 是否匿名
  db_isAnonymous: function(cbParams) {
    var param = cbParams
    var result = true
    if (param.status === 0 && param.result && !param.result.anonymous) {
      result = false
    }
    var lang = 'zh'
    var map = {
      zh: ['是', '否'],
      en: ['true', 'false']
    }
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    var resMap = map[lang] || map['zh']
    return result ? resMap[0] : resMap[1]
  },
  // 电商相关
  db_getMallData: function(cbParams) {
    var data = cbParams && cbParams.result
    var result = []
    if (data) {
      try {
        result = JSON.parse(data)
        if (!Array.isArray(result)) {
          result = data.data
        }
      } catch (e) {
        if (Array.isArray(data)) {
          result = data
        } else {
          result = data.data
        }
      }
    }
    return result
  },
  db_getMallDataLength: function(cbParams) {
    var data = cbParams && cbParams.result
    var result = []
    if (data) {
      try {
        result = JSON.parse(data)
        if (!Array.isArray(result)) {
          result = data.data
        }
      } catch (e) {
        if (Array.isArray(data)) {
          result = data
        } else {
          result = data.data
        }
      }
    }
    return result ? result.length : 0
  },
  obj_translateData: function(result) {
    var _result = result
    if (result.mapping) {
      var lang = 'zh'
      try {
        lang = $sys.lang || 'zh'
      } catch (e) {}
      _result = {}
      Object.keys(result).forEach(function(key) {
        var transKey = result.mapping[key]
        if (transKey) {
          // if (lang === 'zh') {
          _result[key] = result[key]
          // }
          _result[transKey] = result[key]
        } else {
          _result[key] = result[key]
        }
      })
    }
    return _result
  },
  db_translateMallData: function(cbParams) {
    var result = cbParams && cbParams.result
    var data = []
    if (result.mapping && result.data) {
      var lang = 'zh'
      try {
        lang = $sys.lang || 'zh'
      } catch (e) {}
      result.data.forEach(function(v) {
        var _result = {}
        Object.keys(v).forEach(function(key) {
          var transKey = result.mapping[key]
          if (transKey) {
            // if (lang === 'zh') {
            _result[key] = v[key]
            // }
            _result[transKey] = v[key]
            if (
              key === 'detail' &&
              _result[transKey] &&
              Array.isArray(_result[transKey])
            ) {
              var detail = []
              _result[transKey].forEach(function(item) {
                var _item = {}
                Object.keys(item).forEach(function(itemKey) {
                  var transItemKey = result.mapping[itemKey]
                  if (transItemKey) {
                    _item[transItemKey] = item[itemKey]
                  } else {
                    _item[itemKey] = item[itemKey]
                  }
                })
                detail.push(_item)
              })
              _result[transKey] = detail
            }
          } else {
            _result[key] = v[key]
          }
        })
        data.push(_result)
      })
    } else if (result.data) {
      data = result.data
    }
    return data
  },
  // db相关二级菜单
  db_getDbOneArrItem: function(data, colNum) {
    var result = undefined // 默认值
    if (data && colNum !== undefined && colNum !== null && !isNaN(colNum)) {
      result = data[parseFloat(colNum)]
      return result
    }
    return result
  },
  db_getDbTwoArrCol: function(data, colNum) {
    var result = []
    if (data && colNum !== undefined && colNum !== null && !isNaN(colNum)) {
      var col = parseFloat(colNum)
      data.forEach(function(v, i) {
        result.push(data[i][col])
      })
      return result
    }
    return result
  },
  db_getDbTwoArrRow: function(data, rowNum) {
    var result = []
    if (data && rowNum !== undefined && rowNum !== null && !isNaN(rowNum)) {
      result = data[parseFloat(rowNum)]
    }
    return result || []
  },
  db_getDbTwoArrItem: function(data, rowNum, colNum) {
    var result
    if (
      data &&
      colNum !== undefined &&
      colNum !== null &&
      rowNum !== undefined &&
      rowNum !== null &&
      !isNaN(colNum) &&
      !isNaN(rowNum)
    ) {
      var rowItem = data[parseFloat(rowNum)]
      if (rowItem) {
        result = rowItem[parseFloat(colNum)]
      }
      return result
    }
    return result
  },
  db_getDbObjArrCol: function(data, header) {
    var result = []
    if (data && header !== undefined && header !== null) {
      data.forEach(function(v) {
        result.push(v[header])
      })
      return result
    }
    return result
  },
  db_getDbObjArrRow: function(data, rowNum) {
    var result = {}
    if (data && rowNum !== undefined && rowNum !== null && !isNaN(rowNum)) {
      result = data[parseFloat(rowNum)]
    }
    return result || {}
  },
  db_getDbObjArrItem: function(data, rowNum, header) {
    var result = header === undefined || header === '' ? {} : undefined // 默认值
    if (data && rowNum !== undefined && rowNum !== null && !isNaN(rowNum)) {
      result = data[parseFloat(rowNum)]
      if (result) {
        if (!(header === undefined || header === '')) {
          result = result[header]
        }
      } else {
        result = header === undefined || header === '' ? {} : undefined
      }
      return result
    }
    return result
  },
  // ===== es方法 ======
  esDb_getTotal: function(result) {
    var total = 0
    if (result && result.status === 0) {
      var _result = result.result
      if (_result.hits && _result.hits.total) {
        total = _result.hits.total
      }
    }
    return total
  },
  esDb_getMaxScore: function(result) {
    var maxScore = 0
    if (result && result.status === 0) {
      var _result = result.result
      if (_result.hits && _result.hits.max_score) {
        maxScore = _result.hits.max_score
      }
    }
    return maxScore
  },
  esDb_getMatchObjArr: function(result) {
    var objArr = []
    if (result && result.status === 0) {
      var _result = result.result
      if (_result.hits && _result.hits.hits && _result.hits.hits.length > 0) {
        var _mapping = _result.mapping
        var _columns = _result.columns
        _result.hits.hits.forEach(function(item) {
          var _item = {}
          if (item._source) {
            Object.keys(item._source).forEach(function(key) {
              var data = item._source[key]
              var _key = key
              if (_columns && _columns.length > 0) {
                _columns.forEach(function(col) {
                  if (col.id === key) {
                    _key = col.name
                  }
                })
              }
              if (_mapping && ['_id', '_created'].indexOf(_key) >= 0) {
                _key = _mapping[_key]
              }
              _item[_key] = data
            })
          }
          if (item._id) {
            if (_mapping && _mapping['_id']) {
              _item[_mapping['_id']] = item._id
            } else {
              _item['_id'] = item._id
            }
          }
          if (item._score) {
            var _scoreKey = '_score'
            if (_mapping) {
              _scoreKey = _mapping[_scoreKey]
            }
            _item[_scoreKey] = item._score
          }
          if (item.highlight) {
            var _highlightKey = 'highlight'
            if (_mapping) {
              _highlightKey = _mapping[_highlightKey]
            }
            var _highlightItem = []
            Object.keys(item.highlight).forEach(function(key) {
              var data = item.highlight[key]
              if (Array.isArray(data)) {
                data.forEach(function(hl) {
                  if (hl.match) {
                    // var matched = hl.match(/<tag>(\w+)<\/tag>/g)
                    var matched = []
                    var subList = hl.split('tag>')
                    if (subList && subList.length) {
                      subList.forEach(function(sub) {
                        var target = '</'
                        if (
                          sub &&
                          sub.indexOf(target, sub.length - target.length) !== -1
                        ) {
                          var subItems = sub.split(target)
                          if (subItems && subItems.length === 2) {
                            matched.push(subItems[0])
                          }
                        }
                      })
                    }
                    if (matched && matched.length > 0) {
                      matched.forEach(function(v) {
                        var hlm = v
                          .split('<tag>')
                          .join('')
                          .split('</tag>')
                          .join('')
                        _highlightItem.push(hlm)
                      })
                    }
                  }
                })
              }
            })
            _item[_highlightKey] = _highlightItem
          }
          objArr.push(_item)
        })
      }
    }
    return objArr
  },
  // ======= end =======

  // ----- 数学公式 -----
  // default
  math_round: function(value) {
    return Math.round(value)
  },
  math_floor: function(value) {
    return Math.floor(value)
  },
  math_ceil: function(value) {
    return Math.ceil(value)
  },
  math_trunc: function(value) {
    return Math.trunc(value)
  },
  math_random: function() {
    return Math.random()
  },
  math_max: function(value, compare) {
    return Math.max.apply(this, arguments)
  },
  math_min: function(value, compare) {
    return Math.min.apply(this, arguments)
  },
  math_abs: function(value) {
    return Math.abs(value)
  },

  // props
  math_euler: function() {
    return Math.E
  },
  math_ln2: function() {
    return Math.LN2
  },
  math_ln10: function() {
    return Math.LN10
  },
  math_log2e: function() {
    return Math.LOG2E
  },
  math_log10e: function() {
    return Math.LOG10E
  },
  math_pi: function() {
    return Math.PI
  },
  math_sqrt1_2: function() {
    return Math.SQRT1_2
  },
  math_sqrt2: function() {
    return Math.SQRT2
  },

  // methods
  math_acos: function(x) {
    return Math.acos(x)
  },
  math_acosh: function(x) {
    return Math.acosh(x)
  },
  math_asin: function(x) {
    return Math.asin(x)
  },
  math_asinh: function(x) {
    return Math.asinh(x)
  },
  math_atan: function(x) {
    return Math.atan(x)
  },
  math_atanh: function(x) {
    return Math.atanh(x)
  },
  math_atan2: function(x, y) {
    return Math.atan2(x, y)
  },
  math_cbrt: function(x) {
    return Math.cbrt(x)
  },
  math_clz32: function(x) {
    return Math.clz32(x)
  },
  math_cos: function(x) {
    return Math.cos(x)
  },
  math_cosh: function(x) {
    return Math.cosh(x)
  },
  math_exp: function(x) {
    return Math.exp(x)
  },
  math_expm1: function(x) {
    return Math.expm1(x)
  },
  math_fround: function(x) {
    return Math.fround(x)
  },
  math_hypot: function(x, y) {
    return Math.hypot.apply(this, arguments)
  },
  math_imul: function(x, y) {
    return Math.imul(x, y)
  },
  math_log: function(x) {
    return Math.log(x)
  },
  math_log1p: function(x) {
    return Math.log1p(x)
  },
  math_log10: function(x) {
    return Math.log10(x)
  },
  math_log2: function(x) {
    return Math.log2(x)
  },
  math_pow: function(x, y) {
    return Math.pow(x, y)
  },
  math_sign: function(x) {
    return Math.sign(x)
  },
  math_sin: function(x) {
    return Math.sin(x)
  },
  math_sinh: function(x) {
    return Math.sinh(x)
  },
  math_sqrt: function(x) {
    return Math.sqrt(x)
  },
  math_tan: function(x) {
    return Math.tan(x)
  },
  math_tanh: function(x) {
    return Math.tanh(x)
  },
  // ----- 数学公式 end -----

  // ----- 对象变量 -----
  objJson_path: function(value, path) {
    var data = undefined
    if (path && path.match) {
      try {
        data = value
        var paths = path.match(/(\[\"\w+\"\])|(\[\'\w+\'\])|(\[\w+\])|(\w+)/g)
        if (paths && paths.length > 0) {
          paths.forEach(function(item) {
            if (
              item.substr(0, 1) === '[' &&
              item.substr(item.length - 1, 1) === ']'
            ) {
              var innerParam = item.substring(1, item.length - 1)
              if (
                (innerParam.substr(0, 1) === '"' &&
                  innerParam.substr(innerParam.length - 1, 1) === '"') ||
                (innerParam.substr(0, 1) === "'" &&
                  innerParam.substr(innerParam.length - 1, 1) === "'")
              ) {
                innerParam = innerParam.substring(1, innerParam.length - 1)
              } else {
                // 非字符串
                innerParam = parseFloat(innerParam)
              }
              data = data[innerParam]
            } else {
              data = data[item]
            }
          })
        }
      } catch (e) {}
    }
    return data
  },

  // ----- 一维数组 -----
  arr_itemTotal: function(value) {
    // 元素个数
    var _value = value && value.length ? value : []
    return _value.length
  },

  arr_oneArrItem: function(value, index) {
    // 某个元素
    var result = undefined
    var _value = value && value.length ? value : []
    if (_value && index !== undefined && index !== null && !isNaN(index)) {
      result = _value[parseFloat(index)]
    }
    return result
  },

  arr_uniqSet: function(value) {
    // 去重值
    var _value = value && value.length ? value : []
    return _value.reduce(
      function(res, el) {
        return (
          el === undefined ||
          (isNaN(el) && (el.constructor.name || el.constructor) !== 'String')
            ? res.objArr.indexOf(el) === -1
              ? (res.objArr.push(el), res.uniqArr.push(el))
              : void 0
            : ((res.key = JSON.stringify(el)),
              res.eleMap[res.key]
                ? void 0
                : ((res.eleMap[res.key] = 1), res.uniqArr.push(el))),
          res
        )
      },
      { eleMap: {}, objArr: [], uniqArr: [], key: '' }
    ).uniqArr
  },

  arr_search: function(value, target) {
    // 搜索值
    var _value = value && value.length ? value : []
    var index = -1
    var len = _value.length
    for (var i = 0; i < len; i++) {
      var item = _value[i]
      if (item === target) {
        index = i
      }
    }
    return index
    // return _value.findIndex(item => {
    //   return target === item
    // })
  },

  arr_reverse: function(value) {
    // 倒序
    var _value = value && value.length ? JSON.parse(JSON.stringify(value)) : []
    return _value.reverse()
  },

  arr_randomOrder: function(value) {
    // 随机排序
    var _value = value && value.length ? value : []
    var randomOrderFunc = function(arr) {
      var cloneArr = arr.concat()
      var len = cloneArr.length
      for (var i = 0; i < len; i++) {
        var index = Math.floor(Math.random() * len)
        var temp = cloneArr[index]
        cloneArr[index] = cloneArr[i]
        cloneArr[i] = temp
      }
      return cloneArr
    }
    return randomOrderFunc(_value)
  },

  arr_ascOrder: function(value) {
    // 字符升序
    var _value = value && value.length ? value : []
    return _value.slice().sort()
  },

  arr_descOrder: function(value) {
    // 字符倒序
    var _value = value && value.length ? value : []
    return _value
      .slice()
      .sort()
      .reverse()
  },

  arr_ascNumOrder: function(value) {
    // 数值升序
    var _value = value && value.length ? value : []
    return _value.slice().sort(function(a, b) {
      return a - b
    })
  },

  arr_descNumOrder: function(value) {
    // 数值降序
    var _value = value && value.length ? value : []
    return _value.slice().sort(function(a, b) {
      return b - a
    })
  },

  arr_randomValue: function(value) {
    // 随机取一值
    var _value = value && value.length ? value : []
    var index = Math.floor(Math.random() * _value.length)
    return _value[index]
  },

  arr_maxValue: function(value) {
    // 最大值
    var _value = value && value.length ? value : []
    return _value.reduce(function(res, el) {
      return el > res ? el : res
    }, -Infinity)
  },

  arr_minValue: function(value) {
    // 最小值
    var _value = value && value.length ? value : []
    return _value.reduce(function(res, el) {
      return el < res ? el : res
    }, Infinity)
  },

  arr_total: function(value) {
    // 总和
    var _value = value && value.length ? value : []
    return _value.reduce(function(res, el) {
      return (res += isNaN(el) ? 0 : Number(el))
    }, 0)
  },

  arr_avg: function(value) {
    // 平均值
    var _value = value && value.length ? value : []
    if (_value.length === 0) {
      return 0
    } else {
      return (
        _value.reduce(function(res, el) {
          return (res += isNaN(el) ? 0 : Number(el))
        }, 0) / _value.length
      )
    }
  },

  // ----- 二维数组 -----
  arr2d_arrRowNum: function(value) {
    // 行数
    var _value = value && value.length ? value : []
    return _value.length
  },

  arr2d_aArrRow: function(value, row) {
    // 某一行
    var result = []
    var _value = value && value.length ? value : []
    if (_value && row !== undefined && row !== null && !isNaN(row)) {
      result = _value[parseFloat(row)] || []
    }
    return result
  },

  arr2d_aArrCol: function(value, col) {
    // 某一列
    var result = []
    var _value = value && value.length ? value : []
    if (_value && col !== undefined && col !== null && !isNaN(col)) {
      var _col = parseFloat(col)
      _value.forEach(function(v, i) {
        result.push(_value[i][_col])
      })
    }
    return result
  },

  arr2d_someCols: function(value, cols) {
    // 某几列
    var result = []
    var _value = value && value.length ? value : []
    _value.forEach(function(row) {
      var item = []
      row.forEach(function(value, j) {
        if (cols && cols.indexOf(j) >= 0) {
          item.push(value)
        }
      })
      result.push(item)
    })
    if (result.length === 0) {
      result = [[]]
    }
    return result
  },

  arr2d_twoArrItem: function(value, row, col) {
    // 某个值
    var _value = value && value.length ? value : []
    var result = undefined
    if (
      _value &&
      col !== undefined &&
      col !== null &&
      row !== undefined &&
      row !== null &&
      !isNaN(col) &&
      !isNaN(row)
    ) {
      var rowItem = _value[parseFloat(row)]
      if (rowItem) {
        result = rowItem[parseFloat(col)]
      }
    }
    return result
  },

  arr2d_reverse: function(value) {
    // 倒序
    var _value = value && value.length ? value : []
    return _value.reverse()
  },

  arr2d_randomOrder: function(value) {
    // 随机排序
    var _value = value && value.length ? value : []
    var randomOrderFunc = function(arr) {
      var cloneArr = arr.concat()
      var len = cloneArr.length
      for (var i = 0; i < len; i++) {
        var index = Math.floor(Math.random() * len)
        var temp = cloneArr[index]
        cloneArr[index] = cloneArr[i]
        cloneArr[i] = temp
      }
      return cloneArr
    }
    return randomOrderFunc(_value)
  },

  arr2d_ascOrder: function(value, col) {
    // 字符升序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null && !isNaN(col)) {
      var _col = parseFloat(col)
      result = _value.slice().sort(function(a, b) {
        return a[_col] > b[_col] ? 1 : -1
      })
    }
    return result
  },

  arr2d_descOrder: function(value, col) {
    // 字符降序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null && !isNaN(col)) {
      var _col = parseFloat(col)
      result = _value.slice().sort(function(a, b) {
        return a[_col] < b[_col] ? 1 : -1
      })
    }
    return result
  },

  arr2d_ascNumOrder: function(value, col) {
    // 数值升序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null && !isNaN(col)) {
      var _col = parseFloat(col)
      result = _value.slice().sort(function(a, b) {
        return a[_col] - b[_col]
      })
    }
    return result
  },

  arr2d_descNumOrder: function(value, col) {
    // 数值降序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null && !isNaN(col)) {
      var _col = parseFloat(col)
      result = _value.slice().sort(function(a, b) {
        return b[_col] - a[_col]
      })
    }
    return result
  },

  arr2d_randRow: function(value) {
    // 随机取一行
    var _value = value && value.length ? value : []
    var index = Math.floor(Math.random() * _value.length)
    return _value[index]
  },

  // ----- 文本变量 -----
  var_varNum: function(value) {
    var _value = value || ''
    return _value.length
  },

  var_transNum: function(value) {
    return parseFloat(value)
  },

  var_substr: function(value, start, length) {
    var _value = value || ''
    return _value.substr(start, length)
  },

  var_split: function(value, mark) {
    var _value = value || ''
    return _value.split(mark || '')
  },

  var_replace: function(value, replaced, replacement) {
    var _value = value || ''
    return _value.replace(replaced, replacement)
  },

  var_replaceAll: function(value, replaced, replacement) {
    var _value = (value || '') + ''
    return _value.split(replaced).join(replacement)
  },

  var_uppercase: function(value) {
    var _value = value || ''
    return _value.toUpperCase()
  },

  var_lowercase: function(value) {
    var _value = value || ''
    return _value.toLowerCase()
  },

  var_rmSpace: function(value) {
    var _value = value || ''
    return _value.replace(/\s+/g, '')
  },

  var_jsonParse: function(value) {
    var _res = undefined
    try {
      _res = JSON.parse(value)
    } catch (e) {}
    return _res
  },

  // ----- 对象数组 -----
  objArr_rowNum: function(value) {
    // 行数
    var _value = value && value.length ? value : []
    return _value.length
  },

  objArr_rowItem: function(value, row) {
    // 某一行
    var result = {}
    var _value = value && value.length ? value : []
    if (_value && row !== undefined && row !== null && !isNaN(row)) {
      result = _value[parseFloat(row)] || {}
    }
    return result
  },

  objArr_colItem: function(value, col) {
    // 某一列
    var result = []
    var _value = value && value.length ? value : []
    if (_value && col !== undefined && col !== null) {
      var _col = col
      _value.forEach(function(v, i) {
        result.push(_value[i][_col])
      })
    }
    return result
  },

  objArr_someCols: function(value, cols) {
    // 某几列
    var result = []
    var _value = value && value.length ? value : []
    _value.forEach(function(obj) {
      var item = {}
      if (cols && cols.length > 0) {
        cols.forEach(function(col) {
          item[col] = obj ? obj[col] : undefined
        })
      }
      result.push(item)
    })
    if (result.length === 0) {
      result = [{}]
    }
    return result
  },

  objArr_item: function(value, row, col) {
    // 某个值
    var _value = value && value.length ? value : []
    var result = undefined
    if (
      _value &&
      col !== undefined &&
      col !== null &&
      row !== undefined &&
      row !== null &&
      !isNaN(row)
    ) {
      var rowItem = _value[parseFloat(row)]
      if (rowItem) {
        result = rowItem[col]
      }
    }
    return result
  },

  objArr_reverse: function(value) {
    // 倒序
    var _value = value && value.length ? value : []
    return _value.reverse()
  },

  objArr_randomOrder: function(value) {
    // 随机排序
    var _value = value && value.length ? value : []
    var randomOrderFunc = function(arr) {
      var cloneArr = arr.concat()
      var len = cloneArr.length
      for (var i = 0; i < len; i++) {
        var index = Math.floor(Math.random() * len)
        var temp = cloneArr[index]
        cloneArr[index] = cloneArr[i]
        cloneArr[i] = temp
      }
      return cloneArr
    }
    return randomOrderFunc(_value)
  },

  objArr_ascOrder: function(value, col) {
    // 字符升序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null) {
      var _col = col
      result = _value.slice().sort(function(a, b) {
        return a[_col] > b[_col] ? 1 : -1
      })
    }
    return result
  },

  objArr_descOrder: function(value, col) {
    // 字符降序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null) {
      var _col = col
      result = _value.slice().sort(function(a, b) {
        return a[_col] < b[_col] ? 1 : -1
      })
    }
    return result
  },

  objArr_ascNumOrder: function(value, col) {
    // 数值升序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null) {
      var _col = col
      result = _value.slice().sort(function(a, b) {
        return a[_col] - b[_col]
      })
    }
    return result
  },

  objArr_descNumOrder: function(value, col) {
    // 数值降序
    var _value = value && value.length ? value : []
    var result = _value
    if (_value && col !== undefined && col !== null) {
      var _col = col
      result = _value.slice().sort(function(a, b) {
        return b[_col] - a[_col]
      })
    }
    return result
  },

  objArr_randRow: function(value) {
    // 随机取一行
    var _value = value && value.length ? value : []
    var index = Math.floor(Math.random() * _value.length)
    return _value[index]
  },

  reg_isBankCard: function(cardNum) {
    var isCard = false
    var bankcardList = [
      {
        bankName: '中国邮政储蓄银行',
        bankCode: 'PSBC',
        patterns: [
          {
            reg: /^(621096|621098|622150|622151|622181|622188|622199|955100|621095|620062|621285|621798|621799|621797|620529|621622|621599|621674|623218|623219)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(62215049|62215050|62215051|62218850|62218851|62218849)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622812|622810|622811|628310|625919)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '中国工商银行',
        bankCode: 'ICBC',
        patterns: [
          {
            reg: /^(620200|620302|620402|620403|620404|620406|620407|620409|620410|620411|620412|620502|620503|620405|620408|620512|620602|620604|620607|620611|620612|620704|620706|620707|620708|620709|620710|620609|620712|620713|620714|620802|620711|620904|620905|621001|620902|621103|621105|621106|621107|621102|621203|621204|621205|621206|621207|621208|621209|621210|621302|621303|621202|621305|621306|621307|621309|621311|621313|621211|621315|621304|621402|621404|621405|621406|621407|621408|621409|621410|621502|621317|621511|621602|621603|621604|621605|621608|621609|621610|621611|621612|621613|621614|621615|621616|621617|621607|621606|621804|621807|621813|621814|621817|621901|621904|621905|621906|621907|621908|621909|621910|621911|621912|621913|621915|622002|621903|622004|622005|622006|622007|622008|622010|622011|622012|621914|622015|622016|622003|622018|622019|622020|622102|622103|622104|622105|622013|622111|622114|622017|622110|622303|622304|622305|622306|622307|622308|622309|622314|622315|622317|622302|622402|622403|622404|622313|622504|622505|622509|622513|622517|622502|622604|622605|622606|622510|622703|622715|622806|622902|622903|622706|623002|623006|623008|623011|623012|622904|623015|623100|623202|623301|623400|623500|623602|623803|623901|623014|624100|624200|624301|624402|623700|624000)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622200|622202|622203|622208|621225|620058|621281|900000|621558|621559|621722|621723|620086|621226|621618|620516|621227|621288|621721|900010|623062|621670|621720|621379|621240|621724|621762|621414|621375|622926|622927|622928|622929|622930|622931|621733|621732|621372|621369|621763)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(402791|427028|427038|548259|621376|621423|621428|621434|621761|621749|621300|621378|622944|622949|621371|621730|621734|621433|621370|621764|621464|621765|621750|621377|621367|621374|621731|621781)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(9558)\d{15}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(370246|370248|370249|370247|370267|374738|374739)\d{9}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(427010|427018|427019|427020|427029|427030|427039|438125|438126|451804|451810|451811|458071|489734|489735|489736|510529|427062|524091|427064|530970|530990|558360|524047|525498|622230|622231|622232|622233|622234|622235|622237|622239|622240|622245|622238|451804|451810|451811|458071|628288|628286|622206|526836|513685|543098|458441|622246|544210|548943|356879|356880|356881|356882|528856|625330|625331|625332|622236|524374|550213|625929|625927|625939|625987|625930|625114|622159|625021|625022|625932|622889|625900|625915|625916|622171|625931|625113|625928|625914|625986|625925|625921|625926|625942|622158|625917|625922|625934|625933|625920|625924|625017|625018|625019)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(45806|53098|45806|53098)\d{11}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(622210|622211|622212|622213|622214|622220|622223|622225|622229|622215|622224)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(620054|620142|620184|620030|620050|620143|620149|620124|620183|620094|620186|620148|620185)\d{10}$/g,
            cardType: 'PC'
          },
          {
            reg: /^(620114|620187|620046)\d{13}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '中国农业银行',
        bankCode: 'ABC',
        patterns: [
          {
            reg: /^(622841|622824|622826|622848|620059|621282|622828|622823|621336|621619|622821|622822|622825|622827|622845|622849|623018|623206|621671|622840|622843|622844|622846|622847|620501)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(95595|95596|95597|95598|95599)\d{14}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(103)\d{16}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(403361|404117|404118|404119|404120|404121|463758|519412|519413|520082|520083|552599|558730|514027|622836|622837|628268|625996|625998|625997|622838|625336|625826|625827|544243|548478|628269)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(622820|622830)\d{10}$/g,
            cardType: 'SCC'
          }
        ]
      },
      {
        bankName: '中国银行',
        bankCode: 'BOC',
        patterns: [
          {
            reg: /^(621660|621661|621662|621663|621665|621667|621668|621669|621666|456351|601382|621256|621212|621283|620061|621725|621330|621331|621332|621333|621297|621568|621569|621672|623208|621620|621756|621757|621758|621759|621785|621786|621787|621788|621789|621790|622273|622274|622771|622772|622770|621741|621041)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621293|621294|621342|621343|621364|621394|621648|621248|621215|621249|621231|621638|621334|621395|623040|622348)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625908|625910|625909|356833|356835|409665|409666|409668|409669|409670|409671|409672|512315|512316|512411|512412|514957|409667|438088|552742|553131|514958|622760|628388|518377|622788|628313|628312|622750|622751|625145|622479|622480|622789|625140|622346|622347)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(518378|518379|518474|518475|518476|524865|525745|525746|547766|558868|622752|622753|622755|524864|622757|622758|622759|622761|622762|622763|622756|622754|622764|622765|558869|625905|625906|625907|625333)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(53591|49102|377677)\d{11}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(620514|620025|620026|620210|620211|620019|620035|620202|620203|620048|620515|920000)\d{10}$/g,
            cardType: 'PC'
          },
          {
            reg: /^(620040|620531|620513|921000|620038)\d{13}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '中国建设银行',
        bankCode: 'CCB',
        patterns: [
          {
            reg: /^(621284|436742|589970|620060|621081|621467|621598|621621|621700|622280|622700|623211|623668)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(421349|434061|434062|524094|526410|552245|621080|621082|621466|621488|621499|622966|622988|622382|621487|621083|621084|620107)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(436742193|622280193)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(553242)\d{12}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(625362|625363|628316|628317|356896|356899|356895|436718|436738|436745|436748|489592|531693|532450|532458|544887|552801|557080|558895|559051|622166|622168|622708|625964|625965|625966|628266|628366|622381|622675|622676|622677)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(5453242|5491031|5544033)\d{11}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(622725|622728|436728|453242|491031|544033|622707|625955|625956)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(53242|53243)\d{11}$/g,
            cardType: 'SCC'
          }
        ]
      },
      {
        bankName: '中国交通银行',
        bankCode: 'COMM',
        patterns: [
          {
            reg: /^(622261|622260|622262|621002|621069|621436|621335)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(620013)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(405512|601428|405512|601428|622258|622259|405512|601428)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(49104|53783)\d{11}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(434910|458123|458124|520169|522964|552853|622250|622251|521899|622253|622656|628216|622252|955590|955591|955592|955593|628218|625028|625029)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(622254|622255|622256|622257|622284)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(620021|620521)\d{13}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '招商银行',
        bankCode: 'CMB',
        patterns: [
          {
            reg: /^(402658|410062|468203|512425|524011|622580|622588|622598|622609|95555|621286|621483|621485|621486|621299)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(690755)\d{9}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(690755)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(356885|356886|356887|356888|356890|439188|439227|479228|479229|521302|356889|545620|545621|545947|545948|552534|552587|622575|622576|622577|622578|622579|545619|622581|622582|545623|628290|439225|518710|518718|628362|439226|628262|625802|625803)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(370285|370286|370287|370289)\d{9}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620520)\d{13}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '中国民生银行',
        bankCode: 'CMBC',
        patterns: [
          {
            reg: /^(622615|622616|622618|622622|622617|622619|415599|421393|421865|427570|427571|472067|472068|622620)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(545392|545393|545431|545447|356859|356857|407405|421869|421870|421871|512466|356856|528948|552288|622600|622601|622602|517636|622621|628258|556610|622603|464580|464581|523952|545217|553161|356858|622623|625912|625913|625911)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(377155|377152|377153|377158)\d{9}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '中国光大银行',
        bankCode: 'CEB',
        patterns: [
          {
            reg: /^(303)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(90030)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(620535)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(620085|622660|622662|622663|622664|622665|622666|622667|622669|622670|622671|622672|622668|622661|622674|622673|620518|621489|621492)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(356837|356838|486497|622657|622685|622659|622687|625978|625980|625981|625979|356839|356840|406252|406254|425862|481699|524090|543159|622161|622570|622650|622655|622658|625975|625977|628201|628202|625339|625976)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '中信银行',
        bankCode: 'CITIC',
        patterns: [
          {
            reg: /^(433670|433680|442729|442730|620082|622690|622691|622692|622696|622698|622998|622999|433671|968807|968808|968809|621771|621767|621768|621770|621772|621773|622453|622456)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622459)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(376968|376969|376966)\d{9}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(400360|403391|403392|404158|404159|404171|404172|404173|404174|404157|433667|433668|433669|514906|403393|520108|433666|558916|622678|622679|622680|622688|622689|628206|556617|628209|518212|628208|356390|356391|356392|622916|622918|622919)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '华夏银行',
        bankCode: 'HXBANK',
        patterns: [
          {
            reg: /^(622630|622631|622632|622633|999999|621222|623020|623021|623022|623023)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(523959|528709|539867|539868|622637|622638|628318|528708|622636|625967|625968|625969)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '深发/平安银行',
        bankCode: 'SPABANK',
        patterns: [
          {
            reg: /^(621626|623058)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(602907|622986|622989|622298|627069|627068|627066|627067|412963|415752|415753|622535|622536|622538|622539|998800|412962|622983)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(531659|622157|528020|622155|622156|526855|356869|356868|625360|625361|628296|435744|435745|483536|622525|622526|998801|998802)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620010)\d{10}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '兴业银行',
        bankCode: 'CIB',
        patterns: [
          {
            reg: /^(438589)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(90592)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(966666|622909|438588|622908)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(461982|486493|486494|486861|523036|451289|527414|528057|622901|622902|622922|628212|451290|524070|625084|625085|625086|625087|548738|549633|552398|625082|625083|625960|625961|625962|625963)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620010)\d{10}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '上海银行',
        bankCode: 'SHBANK',
        patterns: [
          {
            reg: /^(621050|622172|622985|622987|620522|622267|622278|622279|622468|622892|940021)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(438600)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(356827|356828|356830|402673|402674|486466|519498|520131|524031|548838|622148|622149|622268|356829|622300|628230|622269|625099|625953)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '浦东发展银行',
        bankCode: 'SPDB',
        patterns: [
          {
            reg: /^(622516|622517|622518|622521|622522|622523|984301|984303|621352|621793|621795|621796|621351|621390|621792|621791)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(84301|84336|84373|84385|84390|87000|87010|87030|87040|84380|84361|87050|84342)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(356851|356852|404738|404739|456418|498451|515672|356850|517650|525998|622177|622277|628222|622500|628221|622176|622276|622228|625957|625958|625993|625831)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(622520|622519)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(620530)\d{13}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '广发银行',
        bankCode: 'GDB',
        patterns: [
          {
            reg: /^(622516|622517|622518|622521|622522|622523|984301|984303|621352|621793|621795|621796|621351|621390|621792|621791)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622568|6858001|6858009|621462)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(9111)\d{15}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(406365|406366|428911|436768|436769|436770|487013|491032|491033|491034|491035|491036|491037|491038|436771|518364|520152|520382|541709|541710|548844|552794|493427|622555|622556|622557|622558|622559|622560|528931|558894|625072|625071|628260|628259|625805|625806|625807|625808|625809|625810)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(685800|6858000)\d{13}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '渤海银行',
        bankCode: 'BOHAIB',
        patterns: [
          {
            reg: /^(621268|622684|622884|621453)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '广州银行',
        bankCode: 'GCB',
        patterns: [
          {
            reg: /^(603445|622467|940016|621463)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '金华银行',
        bankCode: 'JHBANK',
        patterns: [
          {
            reg: /^(622449|940051)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622450|628204)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '温州银行',
        bankCode: 'WZCB',
        patterns: [
          {
            reg: /^(621977)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622868|622899|628255)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '徽商银行',
        bankCode: 'HSBANK',
        patterns: [
          {
            reg: /^(622877|622879|621775|623203)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(603601|622137|622327|622340|622366)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628251|622651|625828)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '江苏银行',
        bankCode: 'JSBANK',
        patterns: [
          {
            reg: /^(621076|622173|622131|621579|622876)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(504923|622422|622447|940076)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628210|622283|625902)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '南京银行',
        bankCode: 'NJCB',
        patterns: [
          {
            reg: /^(621777|622305|621259)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622303|628242|622595|622596)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '宁波银行',
        bankCode: 'NBBANK',
        patterns: [
          {
            reg: /^(621279|622281|622316|940022)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621418)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625903|622778|628207|512431|520194|622282|622318)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '北京银行',
        bankCode: 'BJBANK',
        patterns: [
          {
            reg: /^(623111|421317|422161|602969|422160|621030|621420|621468)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(522001|622163|622853|628203|622851|622852)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '北京农村商业银行',
        bankCode: 'BJRCB',
        patterns: [
          {
            reg: /^(620088|621068|622138|621066|621560)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625526|625186|628336)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '汇丰银行',
        bankCode: 'HSBC',
        patterns: [
          {
            reg: /^(622946)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622406|621442)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622407|621443)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622360|622361|625034|625096|625098)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '渣打银行',
        bankCode: 'SCB',
        patterns: [
          {
            reg: /^(622948|621740|622942|622994)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622482|622483|622484)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '花旗银行',
        bankCode: 'CITI',
        patterns: [
          {
            reg: /^(621062|621063)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625076|625077|625074|625075|622371|625091)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '东亚银行',
        bankCode: 'HKBEA',
        patterns: [
          {
            reg: /^(622933|622938|623031|622943|621411)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622372|622471|622472|622265|622266|625972|625973)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(622365)\d{11}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '广东华兴银行',
        bankCode: 'GHB',
        patterns: [
          {
            reg: /^(621469|621625)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '深圳农村商业银行',
        bankCode: 'SRCB',
        patterns: [
          {
            reg: /^(622128|622129|623035)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '广州农村商业银行股份有限公司',
        bankCode: 'GZRCU',
        patterns: [
          {
            reg: /^(909810|940035|621522|622439)\d{12}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '东莞农村商业银行',
        bankCode: 'DRCBCL',
        patterns: [
          {
            reg: /^(622328|940062|623038)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625288|625888)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '东莞市商业银行',
        bankCode: 'BOD',
        patterns: [
          {
            reg: /^(622333|940050)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621439|623010)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622888)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '广东省农村信用社联合社',
        bankCode: 'GDRCC',
        patterns: [
          {
            reg: /^(622302)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622477|622509|622510|622362|621018|621518)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '大新银行',
        bankCode: 'DSB',
        patterns: [
          {
            reg: /^(622297|621277)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622375|622489)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622293|622295|622296|622373|622451|622294|625940)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '永亨银行',
        bankCode: 'WHB',
        patterns: [
          {
            reg: /^(622871|622958|622963|622957|622861|622932|622862|621298)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622798|625010|622775|622785)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '星展银行香港有限公司',
        bankCode: 'DBS',
        patterns: [
          {
            reg: /^(621016|621015)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622487|622490|622491|622492)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622487|622490|622491|622492|621744|621745|621746|621747)\d{11}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '恒丰银行',
        bankCode: 'EGBANK',
        patterns: [
          {
            reg: /^(623078)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622384|940034)\d{11}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '天津市商业银行',
        bankCode: 'TCCB',
        patterns: [
          {
            reg: /^(940015|622331)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(6091201)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622426|628205)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '浙商银行',
        bankCode: 'CZBANK',
        patterns: [
          {
            reg: /^(621019|622309|621019)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(6223091100|6223092900|6223093310|6223093320|6223093330|6223093370|6223093380|6223096510|6223097910)\d{9}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '南洋商业银行',
        bankCode: 'NCB',
        patterns: [
          {
            reg: /^(621213|621289|621290|621291|621292|621042|621743)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(623041|622351)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625046|625044|625058|622349|622350)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620208|620209|625093|625095)\d{10}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '厦门银行',
        bankCode: 'XMBANK',
        patterns: [
          {
            reg: /^(622393|940023)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(6886592)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(623019|621600|)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '福建海峡银行',
        bankCode: 'FJHXBC',
        patterns: [
          {
            reg: /^(622388)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621267|623063)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(620043|)\d{12}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '吉林银行',
        bankCode: 'JLBANK',
        patterns: [
          {
            reg: /^(622865|623131)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940012)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622178|622179|628358)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '汉口银行',
        bankCode: 'HKB',
        patterns: [
          {
            reg: /^(990027)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622325|623105|623029)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '盛京银行',
        bankCode: 'SJBANK',
        patterns: [
          {
            reg: /^(566666)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622455|940039)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(623108|623081)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622466|628285)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '大连银行',
        bankCode: 'DLB',
        patterns: [
          {
            reg: /^(603708)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622993|623069|623070|623172|623173)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622383|622385|628299)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '河北银行',
        bankCode: 'BHB',
        patterns: [
          {
            reg: /^(622498|622499|623000|940046)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622921|628321)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '乌鲁木齐市商业银行',
        bankCode: 'URMQCCB',
        patterns: [
          {
            reg: /^(621751|622143|940001|621754)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622476|628278)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '绍兴银行',
        bankCode: 'SXCB',
        patterns: [
          {
            reg: /^(622486)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(603602|623026|623086)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628291)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '成都商业银行',
        bankCode: 'CDCB',
        patterns: [
          {
            reg: /^(622152|622154|622996|622997|940027|622153|622135|621482|621532)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '抚顺银行',
        bankCode: 'FSCB',
        patterns: [
          {
            reg: /^(622442)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940053)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622442|623099)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '郑州银行',
        bankCode: 'ZZBANK',
        patterns: [
          {
            reg: /^(622421)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940056)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(96828)\d{11}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '宁夏银行',
        bankCode: 'NXBANK',
        patterns: [
          {
            reg: /^(621529|622429|621417|623089|623200)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628214|625529|622428)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '重庆银行',
        bankCode: 'CQBANK',
        patterns: [
          {
            reg: /^(9896)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622134|940018|623016)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '哈尔滨银行',
        bankCode: 'HRBANK',
        patterns: [
          {
            reg: /^(621577|622425)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940049)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622425)\d{11}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '兰州银行',
        bankCode: 'LZYH',
        patterns: [
          {
            reg: /^(622139|940040|628263)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621242|621538|621496)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '青岛银行',
        bankCode: 'QDCCB',
        patterns: [
          {
            reg: /^(621252|622146|940061|628239)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621419|623170)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '秦皇岛市商业银行',
        bankCode: 'QHDCCB',
        patterns: [
          {
            reg: /^(62249802|94004602)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621237|623003)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '青海银行',
        bankCode: 'BOQH',
        patterns: [
          {
            reg: /^(622310|940068)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622817|628287|625959)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(62536601)\d{8}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '台州银行',
        bankCode: 'TZCB',
        patterns: [
          {
            reg: /^(622427)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940069)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(623039)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622321|628273)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(625001)\d{10}$/g,
            cardType: 'SCC'
          }
        ]
      },
      {
        bankName: '长沙银行',
        bankCode: 'CSCB',
        patterns: [
          {
            reg: /^(694301)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940071|622368|621446)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625901|622898|622900|628281|628282|622806|628283)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620519)\d{13}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '泉州银行',
        bankCode: 'BOQZ',
        patterns: [
          {
            reg: /^(683970|940074)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622370)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621437)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628319)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '包商银行',
        bankCode: 'BSB',
        patterns: [
          {
            reg: /^(622336|621760)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622165)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622315|625950|628295)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '龙江银行',
        bankCode: 'DAQINGB',
        patterns: [
          {
            reg: /^(621037|621097|621588|622977)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(62321601)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622860)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622644|628333)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '上海农商银行',
        bankCode: 'SHRCB',
        patterns: [
          {
            reg: /^(622478|940013|621495)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625500)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(622611|622722|628211|625989)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '浙江泰隆商业银行',
        bankCode: 'ZJQL',
        patterns: [
          {
            reg: /^(622717)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(628275|622565|622287)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '内蒙古银行',
        bankCode: 'H3CB',
        patterns: [
          {
            reg: /^(622147|621633)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628252)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '广西北部湾银行',
        bankCode: 'BGB',
        patterns: [
          {
            reg: /^(623001)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628227)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '桂林银行',
        bankCode: 'GLBANK',
        patterns: [
          {
            reg: /^(621456)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621562)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628219)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '龙江银行',
        bankCode: 'DAQINGB',
        patterns: [
          {
            reg: /^(621037|621097|621588|622977)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(62321601)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622475|622860)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625588)\d{10}$/g,
            cardType: 'SCC'
          },
          {
            reg: /^(622270|628368|625090|622644|628333)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '成都农村商业银行',
        bankCode: 'CDRCB',
        patterns: [
          {
            reg: /^(623088)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622829|628301|622808|628308)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '福建省农村信用社联合社',
        bankCode: 'FJNX',
        patterns: [
          {
            reg: /^(622127|622184|621701|621251|621589|623036)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628232|622802|622290)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '天津农村商业银行',
        bankCode: 'TRCB',
        patterns: [
          {
            reg: /^(622531|622329)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622829|628301)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '江苏省农村信用社联合社',
        bankCode: 'JSRCU',
        patterns: [
          {
            reg: /^(621578|623066|622452|622324)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622815|622816|628226)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '湖南农村信用社联合社',
        bankCode: 'SLH',
        patterns: [
          {
            reg: /^(622906|628386|625519|625506)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '江西省农村信用社联合社',
        bankCode: 'JXNCX',
        patterns: [
          {
            reg: /^(621592)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628392)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '商丘市商业银行',
        bankCode: 'SCBBANK',
        patterns: [
          {
            reg: /^(621748)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628271)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '华融湘江银行',
        bankCode: 'HRXJB',
        patterns: [
          {
            reg: /^(621366|621388)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628328)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '衡水市商业银行',
        bankCode: 'HSBK',
        patterns: [
          {
            reg: /^(621239|623068)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '重庆南川石银村镇银行',
        bankCode: 'CQNCSYCZ',
        patterns: [
          {
            reg: /^(621653004)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '湖南省农村信用社联合社',
        bankCode: 'HNRCC',
        patterns: [
          {
            reg: /^(622169|621519|621539|623090)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '邢台银行',
        bankCode: 'XTB',
        patterns: [
          {
            reg: /^(621238|620528)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '临汾市尧都区农村信用合作联社',
        bankCode: 'LPRDNCXYS',
        patterns: [
          {
            reg: /^(628382|625158)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '东营银行',
        bankCode: 'DYCCB',
        patterns: [
          {
            reg: /^(621004)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628217)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '上饶银行',
        bankCode: 'SRBANK',
        patterns: [
          {
            reg: /^(621416)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628217)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '德州银行',
        bankCode: 'DZBANK',
        patterns: [
          {
            reg: /^(622937)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628397)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '承德银行',
        bankCode: 'CDB',
        patterns: [
          {
            reg: /^(628229)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '云南省农村信用社',
        bankCode: 'YNRCC',
        patterns: [
          {
            reg: /^(622469|628307)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '柳州银行',
        bankCode: 'LZCCB',
        patterns: [
          {
            reg: /^(622292|622291|621412)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622880|622881)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(62829)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '威海市商业银行',
        bankCode: 'WHSYBANK',
        patterns: [
          {
            reg: /^(623102)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628234)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '湖州银行',
        bankCode: 'HZBANK',
        patterns: [
          {
            reg: /^(628306)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '潍坊银行',
        bankCode: 'BANKWF',
        patterns: [
          {
            reg: /^(622391|940072)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628391)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '赣州银行',
        bankCode: 'GZB',
        patterns: [
          {
            reg: /^(622967|940073)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628233)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '日照银行',
        bankCode: 'RZGWYBANK',
        patterns: [
          {
            reg: /^(628257)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '南昌银行',
        bankCode: 'NCB',
        patterns: [
          {
            reg: /^(621269|622275)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940006)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628305)\d{11}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '贵阳银行',
        bankCode: 'GYCB',
        patterns: [
          {
            reg: /^(622133|621735)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(888)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628213)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '锦州银行',
        bankCode: 'BOJZ',
        patterns: [
          {
            reg: /^(622990|940003)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628261)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '齐商银行',
        bankCode: 'QSBANK',
        patterns: [
          {
            reg: /^(622311|940057)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628311)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '珠海华润银行',
        bankCode: 'RBOZ',
        patterns: [
          {
            reg: /^(622363|940048)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628270)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '葫芦岛市商业银行',
        bankCode: 'HLDCCB',
        patterns: [
          {
            reg: /^(622398|940054)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '宜昌市商业银行',
        bankCode: 'HBC',
        patterns: [
          {
            reg: /^(940055)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622397)\d{11}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '杭州商业银行',
        bankCode: 'HZCB',
        patterns: [
          {
            reg: /^(603367|622878)\d{12}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622397)\d{11}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '苏州市商业银行',
        bankCode: 'JSBANK',
        patterns: [
          {
            reg: /^(603506)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '辽阳银行',
        bankCode: 'LYCB',
        patterns: [
          {
            reg: /^(622399|940043)\d{11}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '洛阳银行',
        bankCode: 'LYB',
        patterns: [
          {
            reg: /^(622420|940041)\d{11}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '焦作市商业银行',
        bankCode: 'JZCBANK',
        patterns: [
          {
            reg: /^(622338)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(940032)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '镇江市商业银行',
        bankCode: 'ZJCCB',
        patterns: [
          {
            reg: /^(622394|940025)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '法国兴业银行',
        bankCode: 'FGXYBANK',
        patterns: [
          {
            reg: /^(621245)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '大华银行',
        bankCode: 'DYBANK',
        patterns: [
          {
            reg: /^(621328)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '企业银行',
        bankCode: 'DIYEBANK',
        patterns: [
          {
            reg: /^(621651)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '华侨银行',
        bankCode: 'HQBANK',
        patterns: [
          {
            reg: /^(621077)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '恒生银行',
        bankCode: 'HSB',
        patterns: [
          {
            reg: /^(622409|621441)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622410|621440)\d{11}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622950|622951)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625026|625024|622376|622378|622377|625092)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '临沂商业银行',
        bankCode: 'LSB',
        patterns: [
          {
            reg: /^(622359|940066)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '烟台商业银行',
        bankCode: 'YTCB',
        patterns: [
          {
            reg: /^(622886)\d{10}$/g,
            cardType: 'DC'
          }
        ]
      },
      {
        bankName: '齐鲁银行',
        bankCode: 'QLB',
        patterns: [
          {
            reg: /^(940008|622379)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(628379)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: 'BC卡公司',
        bankCode: 'BCCC',
        patterns: [
          {
            reg: /^(620011|620027|620031|620039|620103|620106|620120|620123|620125|620220|620278|620812|621006|621011|621012|621020|621023|621025|621027|621031|620132|621039|621078|621220|621003)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625003|625011|625012|625020|625023|625025|625027|625031|621032|625039|625078|625079|625103|625106|625006|625112|625120|625123|625125|625127|625131|625032|625139|625178|625179|625220|625320|625111|625132|625244)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '集友银行',
        bankCode: 'CYB',
        patterns: [
          {
            reg: /^(622355|623042)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(621043|621742)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622352|622353|625048|625053|625060)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620206|620207)\d{10}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: '大丰银行',
        bankCode: 'TFB',
        patterns: [
          {
            reg: /^(622547|622548|622546)\d{13}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(625198|625196|625147)\d{10}$/g,
            cardType: 'CC'
          },
          {
            reg: /^(620072)\d{13}$/g,
            cardType: 'PC'
          },
          {
            reg: /^(620204|620205)\d{10}$/g,
            cardType: 'PC'
          }
        ]
      },
      {
        bankName: 'AEON信贷财务亚洲有限公司',
        bankCode: 'AEON',
        patterns: [
          {
            reg: /^(621064|622941|622974)\d{10}$/g,
            cardType: 'DC'
          },
          {
            reg: /^(622493)\d{10}$/g,
            cardType: 'CC'
          }
        ]
      },
      {
        bankName: '澳门BDA',
        bankCode: 'MABDA',
        patterns: [
          {
            reg: /^(621274|621324)\d{13}$/g,
            cardType: 'DC'
          }
        ]
      }
    ]
    var bankListLength = bankcardList.length
    for (var i = 0; i < bankListLength && !isCard; i++) {
      var bank = bankcardList[i]
      if (bank.patterns) {
        bank.patterns.forEach(function(pattern) {
          if (pattern.reg.test(cardNum)) {
            isCard = true
          }
        })
      }
    }
    return isCard
  },

  customRegExp: function(reg) {
    return new RegExp(reg)
  },

  // ------ 时间相关 -------
  time_curTime: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastDay: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() - 1)
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextDay: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() + 1)
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastWeek: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() - 7)
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextWeek: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() + 7)
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastMonth: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setMonth(date.getMonth() - 1)
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextMonth: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setMonth(date.getMonth() + 1)
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastYear: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setFullYear(date.getFullYear() - 1)
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextYear: function(value) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setFullYear(date.getFullYear() + 1)
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastNDay: function(value, day) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() - parseFloat(day))
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextNDay: function(value, day) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() + parseFloat(day))
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastNWeek: function(value, week) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() - 7 * parseFloat(week))
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextNWeek: function(value, week) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    date.setDate(date.getDate() + 7 * parseFloat(week))
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastNMonth: function(value, month) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setMonth(date.getMonth() - parseFloat(month))
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextNMonth: function(value, month) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setMonth(date.getMonth() + parseFloat(month))
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_lastNYear: function(value, year) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setFullYear(date.getFullYear() - parseFloat(year))
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  time_nextNYear: function(value, year) {
    var unixTime = value
    if (!value && value !== 0) {
      unixTime = new Date().getTime()
    } else if (value && typeof value === 'string') {
      var timeList = value.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          unixTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          ).getTime()
        }
      }
    }
    var date = new Date(unixTime)
    var curDate = date.getDate()
    date.setFullYear(date.getFullYear() + parseFloat(year))
    var nowDate = date.getDate()
    if (curDate !== nowDate) {
      date.setDate(0)
    }
    // 返回结果毫秒
    return date.getTime()
  },

  timeDetail_year: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return format(date.getFullYear())
  },

  timeDetail_month: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return format(date.getMonth() + 1)
  },

  timeDetail_day: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return format(date.getDate())
  },

  timeDetail_hour: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return format(date.getHours())
  },

  timeDetail_min: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return format(date.getMinutes())
  },

  timeDetail_sec: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return format(date.getSeconds())
  },

  timeDetail_weekDay: function(value) {
    var unixTime = value
    // 毫秒
    var date = new Date(unixTime)
    var weekDayList = [
      '星期天',
      '星期一',
      '星期二',
      '星期三',
      '星期四',
      '星期五',
      '星期六'
    ]
    return weekDayList[date.getDay()]
  },

  timeDetail_weekDayValue: function(value) {
    var unixTime = value
    // 毫秒
    var date = new Date(unixTime)
    return date.getDay()
  },

  timeDetail_ymd: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return (
      format(date.getFullYear()) +
      '-' +
      format(date.getMonth() + 1) +
      '-' +
      format(date.getDate())
    )
  },

  timeDetail_hms: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return (
      format(date.getHours()) +
      ':' +
      format(date.getMinutes()) +
      ':' +
      format(date.getSeconds())
    )
  },

  timeDetail_ymdhms: function(value) {
    var unixTime = value
    // 毫秒
    var format = function(s) {
      return s < 10 ? '0' + s : s
    }
    var date = new Date(unixTime)
    return (
      format(date.getFullYear()) +
      '-' +
      format(date.getMonth() + 1) +
      '-' +
      format(date.getDate()) +
      ' ' +
      format(date.getHours()) +
      ':' +
      format(date.getMinutes()) +
      ':' +
      format(date.getSeconds())
    )
  },

  timeDetail_unixtime: function(value) {
    var unixTime = value
    return Math.round(unixTime / 1000)
  },

  timeDetail_unixtimeMil: function(value) {
    var unixTime = value
    return unixTime
  },

  timeDetail_daysOfYear: function(value) {
    var unixTime = value
    var date = new Date(unixTime)
    // 当年二月天数
    var FebDays = new Date(date.getFullYear(), 2, 0).getDate()
    if (FebDays === 28) {
      return 365
    } else {
      return 366
    }
  },

  timeDetail_daysOfMon: function(value) {
    var unixTime = value
    var date = new Date(unixTime)
    // 构造日期对象时，date.getMonth() + 1是实际构造的下一个月份，因为月份是从0开始的
    // 第三个数0天数，要求最小是1号，比1号小的话，就成了你要的上个月最后那一天了
    var year = date.getFullYear()
    var mon = date.getMonth() + 1
    var day = new Date(year, mon, 0)
    return day.getDate()
  },

  dy_getTransData: function(value) {
    var result = value || {}
    if (result && result._mapping) {
      var temp = {}
      var mapping = result._mapping || {}
      var columns = result._columns || []
      Object.keys(result).forEach(function(key) {
        if (['_mapping', '_columns'].indexOf(key) < 0) {
          var name = key
          var hasAlias = false
          columns.forEach(function(col) {
            if (col.name === key && col.alias) {
              name = col.alias
              hasAlias = true
            }
          })
          if (!hasAlias && mapping[key]) {
            name = mapping[key]
          }
          temp[name] = result[key]
        }
      })
      result = temp
    }
    return result
  },

  dy_getDataObjLocArr: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = []
    var lang = 'zh'
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    if (result && (result.mapping || result.columns) && result.items) {
      // 替换中文字段
      result.items.forEach(function(_item) {
        var item = {}
        if (_item) {
          Object.keys(_item).forEach(function(key) {
            var name = key
            var hasAlias = false
            if (result.columns) {
              result.columns.forEach(function(col) {
                if (col.name === key && col.alias) {
                  name = col.alias
                  hasAlias = true
                }
              })
            }
            if (!hasAlias && result.mapping && result.mapping[name]) {
              name = result.mapping[name]
            }
            item[name] = _item[key]
          })
        }
        objArr.push(item)
      })
    } else if (result.items) {
      objArr = result.items
    }
    return objArr
  },

  // 用户组件返回内容翻译
  db_resultLocale: function(cbParams) {
    var result = cbParams && cbParams.result
    var objArr = {}
    var lang = 'zh'
    try {
      lang = $sys.lang || 'zh'
    } catch (e) {}
    var dbHeaderMapping = {
      zh: {
        _id: '用户ID',
        _user: '手机号',
        _create: '创建时间',
        _update: '更新时间',
        nick: '昵称',
        banned: '被屏蔽',
        _nick: '昵称',
        _banned: '被屏蔽',
        user_type: '用户类型',
        account_type: '登录类型',
        password: '密码',
        openid: 'openid',
        unionid: 'unionid',
        email: '邮箱地址',
        headimgurl: '头像'
      },
      en: {
        _id: 'DataID',
        _user: 'Submitter',
        _create: 'CreationTime',
        _update: 'ModificationTime',
        nick: 'Nickname',
        banned: 'Blocked',
        user_type: 'User_Type',
        account_type: 'Account_Type',
        _nick: 'Nickname',
        _banned: 'Blocked',
        password: 'Password',
        openid: 'Openid',
        unionid: 'Unionid',
        email: 'Email',
        headimgurl: 'Avatar'
      }
    }

    var mapping = dbHeaderMapping[lang]

    Object.keys(result).forEach(function(_item) {
      if (mapping[_item]) {
        objArr[mapping[_item]] = result[_item]
      } else {
        objArr[_item] = result[_item]
      }
    })

    return objArr
  },

  dy_getLength: function(cbParams) {
    var data = cbParams && cbParams.result && cbParams.result.items
    return data ? data.length : 0
  }
}

// function _dealServiceErrorDetail(result) {
//   var _result = result
//   if (_result.result && _result.result.detail) {
//     var lang = param._lang || 'zh'
//     // 插入数据类型错误
//     var changed = false
//     var detail = _result.result.detail
//     var code = _result.result.code
//     try {
//       if (detail === 'Not allowed to run function' && code === 401) {
//         changed = true
//         if (lang === 'zh') {
//           detail = '无调用权限，请检查用户组件服务权限配置'
//         } else {
//           detail = '无调用权限，请检查用户组件服务权限配置'
//         }
//       }
//     } catch (e) {}
//     if (changed) {
//       _result.result.detail = detail
//       _result = JSON.parse(JSON.stringify(_result))
//     }
//   }
//   return _result
// }

$funcs['data-service'] = {
  runService: function(_sys, node, id, params, cb) {
    // 去掉对入参的验证
    // // 对入参的处理
    // var inParams = _sys.get(node, id, 'inParams')
    // var inParamsError = _inParamsHasError(inParams, params)
    // if (inParamsError) {
    //   cb &&
    //     cb('fail', {
    //       detail: inParamsError
    //     })
    //   return
    // }
    var result = _serviceCmd(id, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', {
            detail: 'error'
          })
        }
      }
    }
  },
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  customParamResult: function(_sys, node, id, params) {
    if (params) {
      var code = params.code !== undefined ? parseInt(params.code) : 0
      var contentType = params.contentType
      var headers = params.headers
      var message = params.message
      if (code || code === 0) {
        setHttpCode(code)
      }
      if (contentType) {
        setHttpHeader({ 'Content-Type': contentType })
      }
      if (headers) {
        setHttpHeader(headers)
      }
      $result = message
    }
  },
  setCookies: function(_sys, node, id, params) {
    if (params) {
      var path = params.path
      var domain = params.domain
      var maxAge = params.maxAge
      var content = params.content
      var httpOnly = params.httpOnly
      var secure = params.secure
      var sameSite = params.sameSite
      // 处理content
      if (content && content.length > 0) {
        content.forEach(function(item) {
          var cookie = item.key + '=' + encodeURIComponent(item.value)
          if (maxAge) {
            cookie += '; Max-Age=' + maxAge
          }
          if (path) {
            cookie += '; Path=' + path
          }
          if (domain) {
            cookie += '; Domain=' + domain
          }
          if (httpOnly) {
            cookie += '; HttpOnly'
          }
          if (secure) {
            cookie += '; Secure'
          }
          if (sameSite) {
            cookie += '; SameSite=' + sameSite
          }
          setHttpHeader({ 'Set-Cookie': cookie })
        })
      }
    }
  },
  setLog: function(_sys, node, id, params, cb) {
    var _params = params || {}
    var obj = {
      topic: _params.topic,
      level: _params.level,
      msg: _params.sMsg
    }
    if (_params.aData) {
      obj.data = _params.aData
    }
    var result = userLog(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  sendToMQ: function(_sys, node, id, params, cb) {
    // 对入参的处理
    var inParams = _sys.get(node, id, 'inParams')
    var inParamsError = _inParamsHasError(inParams, params)
    if (inParamsError) {
      cb &&
        cb('fail', {
          status: 500,
          result: {
            detail: inParamsError
          }
        })
      return
    }
    var result = mqSend({
      sid: id,
      param: params
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  }
}
$funcs['data-service-code-mode'] = {
  runService: function(_sys, node, id, params, cb) {
    var result = _serviceCmd(id, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', {
            detail: 'error'
          })
        }
      }
    }
  }
}
$funcs['data-sharedService'] = {
  runService: function(_sys, node, id, params, cb) {
    // 对入参的处理
    var inParams = _sys.get(node, id, 'inParams')
    var inParamsError = _inParamsHasError(inParams, params)
    if (inParamsError) {
      cb &&
        cb('fail', {
          detail: inParamsError
        })
      return
    }
    var result = _serviceCmd(id, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', { detail: 'error' })
        }
      }
    }
  }
}
$funcs['data-transaction'] = {
  runTransaction: function(_sys, node, id, params, cb) {
    var result = _serviceCmd(id, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', {
            detail: 'error'
          })
        }
      }
    }
  },
  rollback: function(_sys, node, id, result) {
    $result = result
    if (_sys.inTransaction) {
      txRollback()
      throw 'rollback'
    }
  },
  paramResult: function(_sys, node, id, result) {
    $result = result
  }
}
function _serviceCmd(id, params, modId, useClient) {
  var obj = params || {}
  obj['_nid'] = param._nid
  obj['_uid'] = param._uid
  obj['_gid'] = param._gid
  obj['_eid'] = param._eid
  obj['_sid'] = id
  obj['_locOffset'] = param._locOffset
  if (param._instance) obj['_instance'] = param._instance
  if (param._client) obj['_client'] = param._client
  if (param._mini) {
    obj['mini'] = param._mini
  }
  modId = modId || param._modid
  if (modId) {
    obj['_modid'] = modId
  }
  // 不需要client的情况(只有false的情况)
  if (useClient === false && obj['_client']) {
    delete obj['_client']
  }
  if ($sys.microMap && id in $sys.microMap) {
    obj['_sid'] = $sys.microMap[id]
    return runMicro(obj)
  }
  var result = run(obj)
  return result
}
function _addDbIdPrefix(obj) {
  var scope = obj.scope
  var dbId = obj.dbId
  var prefix = ''
  switch (scope) {
    case 'n':
      prefix = 'n' + param._nid
      break
    case 'g':
      prefix = 'g' + param._gid
      break
    case 'e':
      prefix = 'e' + param._eid
      break
    case 'u':
      prefix = 'n' + param._uid
      if (param._instance) {
        dbId += '_' + param._instance
      }
      break
    default:
  }
  return prefix ? prefix + '_' + dbId : dbId
}
function _searchBindsDb(obj) {
  if (
    $vars[param._modid] &&
    $vars[param._modid].Binds &&
    $vars[param._modid].Binds.value
  ) {
    var value = $vars[param._modid].Binds.value

    var strArr = obj['dbId'].split('_')
    var id = /^N/.test(obj['dbId'])
      ? strArr[0]
      : strArr.length > 2
      ? strArr[1]
      : undefined
    if (value[id] && value[id].dbId) {
      obj['dbId'] = _addDbIdPrefix({
        scope: value[id].scope,
        dbId: value[id].dbId
      })
    } else if (value[obj['dbId']] && value[obj['dbId']].dbId) {
      obj['dbId'] = value[obj['dbId']].dbId
    } else if (value instanceof Object) {
      // 处理云端小模块数据库的nid和使用案例nid不一致的情况
      var res = obj['dbId'].replace(/.*?_/, '')
      var keyList = Object.keys(value).filter(function(key) {
        return key.indexOf(res) > -1
      })
      if (keyList.length > 0) {
        var targetDbId = value[keyList[0]].dbId
        var sArr = targetDbId.split('_')
        if (strArr.length > 2 && sArr.length > 0) {
          targetDbId = targetDbId.replace(sArr[0], strArr[0])
        }
        obj['dbId'] = targetDbId
      }
    }
  }
}
function _dbCmd(id, func, obj, type) {
  obj = obj || {}
  if ($dbs[id].scope == 'n') {
    // 应用级别
    obj['dbId'] = 'n' + param._nid + '_' + $dbs[id].dbId
  } else if ($dbs[id].scope == 'g') {
    // 组应用级别
    obj['dbId'] = 'g' + param._gid + '_' + $dbs[id].dbId
  } else if ($dbs[id].scope == 'e') {
    // 企业应用级别
    obj['dbId'] = 'e' + param._eid + '_' + $dbs[id].dbId
  } else {
    // 用户级别
    obj['dbId'] = 'u' + param._uid + '_' + $dbs[id].dbId
    if (param._instance) {
      obj['dbId'] += '_' + param._instance
    }
  }
  if ($dbs[id].scope == 'n') {
    if (param._modid) {
      obj['dbId'] += '_' + param._modid
      _searchBindsDb(obj)
    }
  } else {
    // 小模块的账号数据库dbId的处理
    var classId = $vars.modCls && $vars.modCls[param._modid]
    if (classId) {
      obj['dbId'] += '_' + classId
      _searchBindsDb(obj)
    }
  }

  var postfix = ''
  switch ($dbs[id].type) {
    case 'data-mallOrder':
      postfix = '_order'
      break
    case 'data-mallCart':
      postfix = '_cart'
      break
    case 'data-voteRecord':
      postfix = '_record'
      break
  }
  if (type) {
    postfix = '_' + type
  }
  obj['dbId'] += postfix
  obj['_locOffset'] = $sys.lang === 'en' ? 0 : param._locOffset
  if (param._mini) {
    obj['mini'] = param._mini
  }
  if (obj['structDbId']) {
    obj['dbId'] = obj['structDbId']
    delete obj['structDbId']
  }
  var result = func(obj)
  return result
}
function _cacheDbCmd(key) {
  var modCls = $vars['modCls'] && $vars['modCls'][param._modid]
  // 处理小模块中的cacheDb
  if (param._modid && modCls) {
    var res = key.split(':')
    var obj = { dbId: res[0] + '_' + modCls }
    _searchBindsDb(obj)
    if (res[1]) {
      key = obj['dbId'] + ':' + res[1]
    }
  }
  return key
}
function _dyGetId(id) {
  var obj = { dbId: $dys[id] && $dys[id].dbId }
  // 小模块的账号数据库dbId的处理
  var classId = $vars.modCls && $vars.modCls[param._modid]
  if (classId) {
    obj['dbId'] += '_' + classId
    _searchBindsDb(obj)
  }
  return obj['dbId']
}
function _dyCmd(id, func, obj, noTable) {
  obj = obj || {}
  if (!Array.isArray(obj) && !noTable) {
    obj.table = _dyGetId(id)
  }
  var result = func(obj)
  return result
}
function _inParamsHasError(inParams, params) {
  var inParamsError = undefined
  var lang = param._lang || 'zh'
  var typeMap = {
    Number: {
      zh: '数字',
      en: 'Number'
    },
    String: {
      zh: '字符串',
      en: 'String'
    },
    Boolean: {
      zh: '布尔',
      en: 'Boolean'
    },
    Object: {
      zh: '对象',
      en: 'Object'
    }
  }
  function genRequiredError(par, lang) {
    if (lang === 'en') {
      return 'Please pass in the required parameter of ' + par.name
    } else {
      return '请传必填参数' + par.name
    }
  }
  function genWrongTypeError(par, curType, lang) {
    var _curType = curType
    _curType = _curType.charAt(0).toUpperCase() + _curType.slice(1)
    var allowString = typeMap[par.type] ? typeMap[par.type][lang] : par.type
    var curString = typeMap[_curType] ? typeMap[_curType][lang] : _curType
    if (lang === 'en') {
      return (
        'wrong type of parameter ' +
        par.name +
        ': please pass in ' +
        allowString +
        ' instead of ' +
        curString
      )
    } else {
      return (
        par.name +
        '参数类型错误：请传' +
        allowString +
        '类型，当前为' +
        curString +
        '类型'
      )
    }
  }
  if (inParams && inParams.length > 0) {
    inParams.forEach(function(par) {
      if (typeof par === 'object') {
        if (!inParamsError && par.required) {
          if (!params) {
            inParamsError = genRequiredError(par, lang)
          } else if (!params[par.name]) {
            // 忽略数字类型0的情况
            if (
              !(
                (par.type === 'Number' || par.type === undefined) &&
                params[par.name] === 0
              )
            ) {
              inParamsError = genRequiredError(par, lang)
            }
          }
        }
        if (!inParamsError && par.type) {
          // 参数为0的情况也要处理
          if (params && (params[par.name] || params[par.name] === 0)) {
            var curType = typeof params[par.name]
            var allowType = par.type.toLowerCase()
            if (allowType !== curType) {
              inParamsError = genWrongTypeError(par, curType, lang)
            }
          }
        }
      }
    })
  }
  return inParamsError
}
function _getCurUserId() {
  var curUserId
  if ($dbs) {
    var length = Object.keys($dbs).length
    for (var i = 0; i < length; i++) {
      var id = Object.keys($dbs)[i]
      if ($dbs[id].type === 'data-user' && $dbs[id].curLoginUse) {
        curUserId = id
        break
      }
    }
  }
  return curUserId
}
function _curLoginCmd(func, obj) {
  var curUserId = _getCurUserId()
  var result
  if (curUserId !== undefined) {
    result = _dbCmd(curUserId, func, obj)
  }
  return result
}
function _msgTo(name, userCid, message) {
  var result = imChat({
    to: userCid + '@' + name,
    body: JSON.stringify(message),
    from: 'server'
  })
  return result
}
function _sendServerApiReq(
  _sys,
  node,
  id,
  method,
  _url,
  reqType,
  noHeader,
  headers,
  body,
  _timeout,
  verify,
  _cb
) {
  var getFullURL = function(oUrl, allowSameScope) {
    var url = oUrl.trim()
    if (
      url &&
      url.substring &&
      url.substr(0, 4) !== 'http' &&
      url.substr(0, 2) !== '//'
    ) {
      if (allowSameScope && url.substr(0, 1) === '/') {
        // 允许同域名下url
        return url
      }
      url = 'http://' + url
    }
    return url
  }
  var addBodyParams = function(_url, _body) {
    var result = _url
    var _bodyParams = ''
    if (_body && Object.keys(_body).length >= 0) {
      Object.keys(_body).forEach(function(key, i) {
        if (i === 0) {
          _bodyParams +=
            encodeURIComponent(key) + '=' + encodeURIComponent(_body[key])
        } else {
          _bodyParams +=
            '&' + encodeURIComponent(key) + '=' + encodeURIComponent(_body[key])
        }
      })
    }
    if (_url.indexOf('?') >= 0) {
      var urlArr = _url.split('?')
      if (urlArr.length === 2) {
        result =
          urlArr[0] +
          '?' +
          urlArr[1] +
          (_bodyParams === '' ? _bodyParams : '&' + _bodyParams)
      }
    } else {
      result = _url + (_bodyParams === '' ? _bodyParams : '?' + _bodyParams)
    }
    return result
  }
  // _url useless
  var cUrl = _sys.get(node, id, 'url')
  if (method === 'GET' && cUrl) {
    if (cUrl.indexOf('#') >= 0) {
      // 带#
      var restArr = cUrl.split('#')
      if (restArr.length === 2) {
        cUrl = addBodyParams(restArr[0], body) + '#' + restArr[1]
      }
    } else {
      // 不带#
      cUrl = addBodyParams(cUrl, body)
    }
  }
  var url = cUrl ? getFullURL(cUrl, true) : undefined
  var _headers = {}
  // 对header处理
  if (headers) {
    Object.keys(headers).forEach(function(head) {
      _headers[head] = headers[head] + ''
    })
  }
  if (reqType === 'FORM') {
    var newBody = ''
    for (var i in body) {
      newBody = newBody + '&' + i + '=' + encodeURIComponent(body[i])
    }
    body = newBody.slice(1)
  }
  var req = {
    url: url,
    method: method,
    type: reqType,
    //noHeader: noHeader,
    header: _headers,
    body: body
  }
  if (_timeout !== undefined) {
    req.timeout = _timeout
  }
  if (verify) {
    req.sslSkipVerify = verify
  }
  if (noHeader) {
    req.noHeader = noHeader
  }
  req.url = req.url.trim()
  var result = serverApi(req)
  if (_cb && result) {
    if (result.status === 0) {
      _cb('success', result.result)
    } else {
      if (result.result) {
        if (result.result.code === 408) {
          _cb('timeout', result.result)
        } else {
          _cb('fail', result.result)
        }
      } else {
        _cb('fail', { detail: 'error' })
      }
    }
  }
}

function _iotMessageCmd(id, func, params) {
  var obj = params || {}
  obj['_nid'] = param._nid
  obj['_uid'] = param._uid
  obj['_gid'] = param._gid
  obj['_eid'] = param._eid
  obj['_sid'] = id
  obj['sid'] = id
  obj['_locOffset'] = param._locOffset
  if (param._instance) obj['_instance'] = param._instance
  if (param._client) obj['_client'] = param._client
  if (param._mini) {
    obj['mini'] = param._mini
  }
  var result = func(obj)
  return result
}

function _getWorkConfig(type) {
  var configData = workConfig()
  if (configData.status === 0) {
    var result = configData.result
    if (
      !result ||
      ['{}', 'null'].indexOf(result) >= 0 ||
      Object.keys(result).length === 0
    ) {
      return {}
    } else {
      var configs = result
      try {
        configs = JSON.parse(result)
      } catch (e) {}
      if (!configs) {
        return {}
      } else {
        var res = configs[type] || {}
        try {
          res = JSON.parse(JSON.stringify(res))
        } catch (e) {}
        return res
      }
    }
  }
}

function _getModConfig(id) {
  var custom = _getWorkConfig('custom')
  if (custom) {
    var modConfigs = custom.modConfigs || {}
    var item = param._modid ? modConfigs[param._modid] : {}
    item = item ? item : {}
    var rst = item[id]
    return rst
  }
}

function _customApiCmd(type, cmdName, obj) {
  return runCustomApi({
    _provider: 'customApi',
    _service: cmdName,
    body: obj,
    _locOffset: param._locOffset,
    _lang: param._lang
  })
}

function _liveCmd(cmdName, obj) {
  obj['liveConfig'] = _getWorkConfig('live')
  return _customApiCmd('live', cmdName, obj)
}

function _serviceCookies() {
  var headers = getHttpHeader()
  var cookies = (headers && headers.result && headers.result.Cookie) || []
  var obj = {}
  if (cookies && cookies.length > 0) {
    cookies.forEach(function(cookie) {
      var cookieList = cookie.split(/; */)
      if (cookieList && cookieList.length > 0) {
        cookieList.forEach(function(item) {
          var eq_idx = item.indexOf('=')
          if (eq_idx >= 0) {
            var key = item.substr(0, eq_idx).trim()
            var val = item.substr(++eq_idx, item.length).trim()
            if ('"' === val[0]) {
              val = val.slice(1, -1)
            }
            if (key) {
              obj[key] = decodeURIComponent(val)
            }
          }
        })
      }
    })
  }
  return obj
}

function _serviceReqHeader() {
  var headers = getHttpHeader()
  var reqHeader = (headers && headers.result) || {}
  return reqHeader
}

function _serviceReqIP() {
  var headers = getHttpHeader()
  var reqIP =
    (headers &&
      headers['result'] &&
      headers['result']['X-Real-Ip'] &&
      headers['result']['X-Real-Ip'][0]) ||
    ''
  return reqIP
}

function _serviceReqUserAgent() {
  var headers = getHttpHeader()
  var reqUserAgent =
    (headers &&
      headers['result'] &&
      headers['result']['User-Agent'] &&
      headers['result']['User-Agent'][0]) ||
    ''
  return reqUserAgent
}

function _dealCons(cons) {
  var result = []
  if (cons && cons.length > 0) {
    cons.forEach(function(con) {
      if (con) {
        if (
          [
            'dateEqual',
            'dateNotE',
            'dateGreater',
            'dateLess',
            'dateGE',
            'dateLE'
          ].indexOf(con.comp) >= 0
        ) {
          // 替换日期条件
          if (con.value) {
            var isValid = false
            var dateValue = con.value
            var timeFormat = function(s) {
              return s < 10 ? '0' + s : s
            }
            if (isNaN(con.value)) {
              dateValue = dateValue.split('/').join('-')
              if (dateValue.indexOf('T') >= 0) {
                dateValue = dateValue.split('T')[0]
              } else if (dateValue.indexOf(' ') >= 0) {
                dateValue = dateValue.split(' ')[0]
              }
              var reg = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/g
              if (reg.test(dateValue)) {
                isValid = true
              }
            } else {
              isValid = true
              // 时间戳要处理时区，因为下面standardDate的计算是取的UTC时间
              var tempDate = new Date(dateValue)
              dateValue =
                tempDate.getFullYear() +
                '-' +
                timeFormat(tempDate.getMonth() + 1) +
                '-' +
                timeFormat(tempDate.getDate())
            }
            if (isValid) {
              var date = new Date(dateValue)
              if (date && !isNaN(date.getDate())) {
                // 下一天
                var nDate = new Date(
                  new Date(dateValue).setDate(date.getDate() + 1)
                )
                // 合法
                var formatDate = function(date) {
                  // 2019-06-10T00:00:00Z
                  return (
                    date.getUTCFullYear() +
                    '-' +
                    timeFormat(date.getUTCMonth() + 1) +
                    '-' +
                    timeFormat(date.getUTCDate())
                  )
                }
                var standardDate = formatDate(date)
                var nextDate = formatDate(nDate)
                switch (con.comp) {
                  case 'dateEqual':
                    result.push({
                      pred: con.pred,
                      column: con.column,
                      comp: 'gte',
                      value: standardDate
                    })
                    result.push({
                      pred: 'and',
                      column: con.column,
                      comp: 'lt',
                      value: nextDate
                    })
                    break
                  case 'dateNotE':
                    // result.push({
                    //   pred: con.pred,
                    //   column: con.column,
                    //   comp: 'lt',
                    //   value: standardDate
                    // })
                    // result.push({
                    //   pred: 'or',
                    //   column: con.column,
                    //   comp: 'gte',
                    //   value: nextDate
                    // })

                    // 不能像上面那样直接将dataNotE的条件拆成两个,因为拆成pred: 'or'会破坏原来的cons判断条件
                    result.push({
                      pred: con.pred,
                      column: con.column,
                      comp: 'dateNotE',
                      value: { standardDate, nextDate }
                    })
                    break
                  case 'dateGreater':
                    result.push({
                      pred: con.pred,
                      column: con.column,
                      comp: 'gte',
                      value: nextDate
                    })
                    break
                  case 'dateLess':
                    result.push({
                      pred: con.pred,
                      column: con.column,
                      comp: 'lt',
                      value: standardDate
                    })
                    break
                  case 'dateGE':
                    result.push({
                      pred: con.pred,
                      column: con.column,
                      comp: 'gte',
                      value: standardDate
                    })
                    break
                  case 'dateLE':
                    result.push({
                      pred: con.pred,
                      column: con.column,
                      comp: 'lt',
                      value: nextDate
                    })
                    break
                }
              } else {
                if (con.comp === 'dateEqual' || con.comp === 'dateNotE') {
                  throw new Error('unsupport date ' + con.value)
                }
              }
            } else {
              throw new Error('unsupport date ' + con.value)
            }
          }
        } else {
          result.push(con)
        }
      }
    })
  }

  // 对dateNotE特殊处理
  if (result.length > 0) {
    var index = result.findIndex(function(con) {
      return con.comp === 'dateNotE'
    })
    while (index >= 0) {
      var temp = []
      if (result[index]['pred'] === 'and') {
        if (index === 0) {
          for (var i = index + 1; i < result.length; i++) {
            if (result[i]['pred'] === 'and') {
              temp.push(JSON.parse(JSON.stringify(result[i])))
            } else {
              break
            }
          }
        } else {
          for (var i = index - 1; i >= 0; i--) {
            temp.push(JSON.parse(JSON.stringify(result[i])))
            temp[temp.length - 1]['pred'] = 'and'
            if (result[i]['pred'] === 'or') {
              break
            }
          }
          for (var i = index + 1; i < result.length; i++) {
            if (result[i]['pred'] === 'and') {
              temp.push(JSON.parse(JSON.stringify(result[i])))
            } else {
              break
            }
          }
        }
      } else if (result[index]['pred'] === 'or') {
        for (var i = index + 1; i < result.length; i++) {
          if (result[i]['pred'] === 'and') {
            temp.push(JSON.parse(JSON.stringify(result[i])))
          } else {
            break
          }
        }
      }
      temp.unshift({
        pred: 'or',
        column: result[index]['column'],
        comp: 'gte',
        value: result[index]['value']['nextDate']
      })
      result = result.concat(temp)
      result[index]['comp'] = 'lt'
      result[index]['value'] = result[index]['value']['standardDate']
      index = result.findIndex(function(con) {
        return con.comp === 'dateNotE'
      })
    }
  }

  return result
}

function _dealErrorDetail(result) {
  var _result = result
  if (_result.result && _result.result.detail) {
    var lang = param._lang || 'zh'
    // 插入数据类型错误
    var changed = false
    var detail = _result.result.detail
    try {
      if (detail.indexOf('bad column value:') >= 0) {
        var columnType = detail.match(
          /columnType\(([a-zA-Z0-9_\u4e00-\u9fa5]+)\)/g
        )
        var columns = detail.match(/columns\(([a-zA-Z0-9_\u4e00-\u9fa5]+)\)/g)
        var valueType = detail.match(
          /valueType\(([a-zA-Z0-9_\u4e00-\u9fa5]+)\)/g
        )
        var value = detail.match(/value\(([a-zA-Z0-9_\u4e00-\u9fa5]+)\)/g)
        if (columnType && columns && valueType && value) {
          columnType = columnType[0]
            .replace('columnType(', '"')
            .replace(')', '"')
          columns = columns[0].replace('columns(', '"').replace(')', '"')
          valueType = valueType[0].replace('valueType(', '"').replace(')', '"')
          value = value[0].replace('value(', '"').replace(')', '"')
          if (columnType && columns && valueType && value) {
            changed = true
            if (lang === 'zh') {
              detail =
                '数据类型错误，无法向类型为' +
                columnType +
                '的字段' +
                columns +
                '中插入类型为' +
                valueType +
                '的值' +
                value
            } else {
              detail =
                'Wrong value type: cannot insert ' +
                value +
                ' of type ' +
                valueType +
                ' into column ' +
                columns +
                ' of type ' +
                columnType +
                '.'
            }
          }
        }
      } else if (
        detail.indexOf('insert failed count') >= 0 &&
        detail.indexOf('reason: elastic: Error 400 (Bad Request)') >= 0
      ) {
        var field = detail.match(/field \[([a-zA-Z0-9_\u4e00-\u9fa5]+)\]/g)
        var type = detail.match(/type \[([a-zA-Z0-9_\u4e00-\u9fa5]+)\]/g)
        if (field && type) {
          field = field[0].replace('field [', '"').replace(']', '"')
          type = type[0].replace('type [', '"').replace(']', '"')
          if (field && type) {
            changed = true
            if (lang === 'zh') {
              detail =
                '数据类型错误，无法向字段' +
                field +
                '中插入类型非' +
                type +
                '的数据'
            } else {
              detail =
                'Wrong value type: cannot insert a non-' +
                type +
                ' value into the field ' +
                field +
                '.'
            }
          }
        }
      } else if (
        detail.indexOf('insert failed count') >= 0 &&
        detail.indexOf('reason: elastic: Error 409 (Conflict)') >= 0
      ) {
        var doc = detail.match(
          /\(Conflict\): \[([a-zA-Z0-9_\u4e00-\u9fa5]+)\]/g
        )
        if (doc) {
          doc = doc[0].replace('(Conflict): [', '"').replace(']', '"')
          if (doc) {
            changed = true
            if (lang === 'zh') {
              detail = '数据ID' + doc + '重复'
            } else {
              detail = 'Duplicated document ID of ' + doc
            }
          }
        }
      }
    } catch (e) {}
    if (changed) {
      _result.result.detail = detail
      // _result = JSON.parse(JSON.stringify(_result))
    }
  }
  return _result
}
// cons中banned条件为等于false时,需要进行处理,兼容null的情况
function _processBannedItem(consTemp) {
  if (consTemp && consTemp.length > 0) {
    var bIndex = []
    var additionalCons = []
    consTemp.forEach(function(con, index) {
      if (con.column === 'banned' && con.comp === 'eq' && con.value === false) {
        bIndex.push(index)
      }
    })
    if (bIndex.length > 0) {
      bIndex.forEach(function(index) {
        var temp = []
        if (consTemp[index]['pred'] === 'and') {
          if (index === 0) {
            for (var i = index + 1; i < consTemp.length; i++) {
              if (consTemp[i]['pred'] === 'and') {
                temp.push(JSON.parse(JSON.stringify(consTemp[i])))
              } else {
                break
              }
            }
          } else {
            for (var i = index - 1; i >= 0; i--) {
              temp.push(JSON.parse(JSON.stringify(consTemp[i])))
              temp[temp.length - 1]['pred'] = 'and'
              if (consTemp[i]['pred'] === 'or') {
                break
              }
            }
            for (var i = index + 1; i < consTemp.length; i++) {
              if (consTemp[i]['pred'] === 'and') {
                temp.push(JSON.parse(JSON.stringify(consTemp[i])))
              } else {
                break
              }
            }
          }
        } else if (consTemp[index]['pred'] === 'or') {
          for (var i = index + 1; i < consTemp.length; i++) {
            if (consTemp[i]['pred'] === 'and') {
              temp.push(JSON.parse(JSON.stringify(consTemp[i])))
            } else {
              break
            }
          }
        }
        temp.unshift({
          pred: 'or',
          column: 'banned',
          comp: 'eq',
          value: null
        })
        additionalCons = additionalCons.concat(temp)
      })
    }
    if (additionalCons.length > 0) {
      consTemp = consTemp.concat(additionalCons)
    }
  }
  return consTemp
}
function _ivxTestGetPlayer({ id, obj }) {
  let argObj = _dbCmd(id, p => p, obj)
  let _locOffset = argObj._locOffset
  let dbId = argObj.dbId
  // 取用户数据库中第一条数据作为用户信息
  let ret = dbSelect({ _locOffset, dbId, limit: 1 })
  let result = {
    status: ret.status,
    result: {
      anonymous: true,
      sid: 'cm53c8ttbmfrta6dogdg',
      uid: 'oxtx30nk_FQM6TJUtzn1dbI3_onI'
    }
  }
  if (
    ret &&
    ret.result &&
    ret.result.data.length > 0 &&
    Array.isArray(ret.result.columns)
  ) {
    let item = ret.result.data[0]
    let userInfo = { anonymous: false }
    ret.result.columns.forEach((col, index) => {
      userInfo[col.name] = item[index]
    })
    result.result = Object.assign(result.result, userInfo)
  }
  return result
}

$funcs['data-league-db'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      // var colMapping = {
      //   zh: {
      //     数据ID: '_id',
      //     提交用户: '_user',
      //     创建时间: '_create',
      //     更新时间: '_update'
      //   },
      //   en: {
      //     DataID: '_id',
      //     Submitter: '_user',
      //     CreationTime: '_create',
      //     ModificationTime: '_update'
      //   }
      // }
      // var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          // if (mapping[col]) {
          //   targetCols.push({ name: mapping[col] })
          // } else {
          //   targetCols.push({ name: col })
          // }
          targetCols.push({ name: col })
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      if (result.result.columns) {
        result.result.columns.forEach(function(col) {
          col.name = col.alias
        })
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      if (result.result.columns) {
        result.result.columns.forEach(function(col) {
          col.name = col.alias
        })
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  execSql: function(_sys, node, id, sql, variables, cb) {
    function dealJson(sqlJson) {
      var result = {}
      if (sqlJson) {
        var opMap = {
          '=': 'eq',
          '!=': 'neq',
          '>=': 'gte',
          '>': 'gt',
          '<=': 'lte',
          '<': 'lt',
          LIKE: 'like',
          like: 'like',
          'NOT LIKE': 'nlike',
          'not like': 'nlike',
          IS: 'eq',
          is: 'eq',
          'IS NOT': 'neq',
          'is not': 'neq',
          IN: 'eq',
          in: 'eq',
          'NOT IN': 'neq',
          'not in': 'neq'
        }
        var conMap = {
          AND: 'and',
          OR: 'or'
        }
        function genAst(obj, isHavingClause) {
          var ast = {}
          switch (obj.type) {
            case 'conditional':
              ast['op'] = conMap[obj.value] || obj.value
              ast['args'] = []
              if (
                obj.left &&
                ['conditional', 'operator', 'in'].indexOf(obj.left.type) >= 0 &&
                obj.right &&
                ['conditional', 'operator', 'in'].indexOf(obj.right.type) >= 0
              ) {
                ast.args.push(genAst(obj.left), genAst(obj.right))
              } else {
                if (!!isHavingClause) {
                  throw new Error('The HAVING statement has errors')
                } else {
                  throw new Error('The WHERE statement has errors')
                }
              }
              break
            case 'operator':
              var op = obj.value
              if (['IS', 'is', 'IS NOT', 'is not'].indexOf(op) >= 0) {
                if (
                  obj.left &&
                  obj.left.type === 'literal' &&
                  obj.right &&
                  obj.right.type === 'literal' &&
                  (obj.right.value === 'NULL' || obj.right.value === 'null')
                ) {
                  ast['op'] = opMap[op]
                  ast['col'] = obj.left.value
                } else {
                  if (!!isHavingClause) {
                    throw new Error('The HAVING statement has errors')
                  } else {
                    throw new Error('The WHERE statement has errors')
                  }
                }
              } else {
                if (
                  obj.left &&
                  obj.left.type === 'literal' &&
                  obj.right &&
                  ['literal', 'number', 'placeholder'].indexOf(
                    obj.right.type
                  ) >= 0
                ) {
                  ast['op'] = opMap[op]
                  ast['col'] = obj.left.value
                  if (obj.right.type === 'placeholder') {
                    ast['val'] = variables[obj.right.index]
                  } else {
                    ast['val'] = obj.right.value
                  }
                } else {
                  if (!!isHavingClause) {
                    throw new Error('The HAVING statement has errors')
                  } else {
                    throw new Error('The WHERE statement has errors')
                  }
                }
              }
              break
            case 'in':
              ast['op'] = opMap[obj.op]
              ast['col'] = obj.value
              if (Array.isArray(obj.arguments)) {
                ast['val'] = obj.arguments.map(function(item) {
                  return item.value
                })
              } else if (obj.arguments.type === 'placeholder') {
                ast['val'] = variables[obj.arguments.index]
              }
              break
            default:
              if (!!isHavingClause) {
                throw new Error('The HAVING statement has errors')
              } else {
                throw new Error('The WHERE statement has errors')
              }
          }
          return ast
        }
        if (sqlJson.where && sqlJson.where.length > 0) {
          var wheres = []
          sqlJson.where.forEach(function(w) {
            var where = genAst(w)
            wheres.push(where)
          })
          if (wheres.length > 0) {
            result['wheres'] = wheres
          }
        }

        if (
          sqlJson.select &&
          sqlJson.select.length > 0 &&
          sqlJson.select[0].type !== 'wildcard'
        ) {
          var cols = []
          var distinctCols = []
          sqlJson.select.forEach(function(col) {
            if (col.type === 'literal') {
              cols.push({ name: col.value })
            } else if (
              col.type === 'function' &&
              col.arguments.length === 1 &&
              col.arguments[0] &&
              col.arguments[0].type === 'literal'
            ) {
              var colName = col.arguments[0].value
              cols.push({
                name: colName,
                aggregate: col.value
              })
            } else if (
              col.type === 'function' &&
              ['count', 'COUNT'].indexOf(col.value) >= 0 &&
              col.arguments.length > 1 &&
              ['distinct', 'DISTINCT'].indexOf(col.arguments[0].value) >= 0
            ) {
              // distinctCount
              for (let i = 1; i < col.arguments.length; i++) {
                if (col.arguments[i] && col.arguments[i].type === 'literal') {
                  distinctCols.push(col.arguments[i].value)
                } else {
                  throw new Error('The SELECT statement has errors')
                }
              }
            } else {
              throw new Error('The SELECT statement has errors')
            }
          })
          if (cols.length > 0) {
            result['columns'] = cols
          }
          if (distinctCols.length > 0) {
            result['distinctColumns'] = distinctCols
          }
        }

        if (sqlJson.orderBy && sqlJson.orderBy.length > 0) {
          var orders = []
          sqlJson.orderBy.forEach(function(order) {
            if (order.type === 'literal') {
              orders.push({
                column: order.value,
                asc:
                  order.direction === 'DESC' || order.direction === 'desc'
                    ? false
                    : true
              })
            }
          })
          if (orders.length > 0) {
            result['orders'] = orders
          }
        }

        if (sqlJson.group && sqlJson.group.length > 0) {
          var groups = []
          sqlJson.group.forEach(function(g) {
            if (g.type === 'literal') {
              groups.push({ column: g.value })
            }
          })
          if (groups.length > 0) {
            result['groups'] = groups
          }
        }

        if (sqlJson.having && sqlJson.having.length > 0) {
          var havingAst = []
          sqlJson.having.forEach(function(h) {
            var hAst = genAst(h, true)
            havingAst.push(hAst)
          })
          if (havingAst.length > 0) {
            result['having'] = havingAst
          }
        }

        if (sqlJson.offset || sqlJson.offset === 0) {
          if (
            Object.prototype.toString.call(sqlJson.offset) ===
              '[object Object]' &&
            sqlJson.offset.type === 'placeholder'
          ) {
            result['offset'] = variables[sqlJson.offset.index]
          } else {
            result['offset'] = sqlJson.offset
          }
        }

        if (sqlJson.limit || sqlJson.limit === 0) {
          if (
            Object.prototype.toString.call(sqlJson.limit) ===
              '[object Object]' &&
            sqlJson.limit.type === 'placeholder'
          ) {
            result['limit'] = variables[sqlJson.limit.index]
          } else {
            result['limit'] = sqlJson.limit
          }
        }
      }

      return result
    }

    var sqlJson = new sql2json(sql).toJSON()
    var obj = dealJson(sqlJson)
    var result
    if (obj.distinctColumns) {
      // dbDistinctCount
      result = _dbCmd(
        id,
        !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
        obj
      )
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
    } else {
      // select
      result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
      if (result && result.result && result.result.data) {
        var dbHeaderMapping = {
          zh: {
            _id: '数据ID',
            _user: '提交用户',
            _create: '创建时间',
            _update: '更新时间'
          },
          en: {
            _id: 'DataID',
            _user: 'Submitter',
            _create: 'CreationTime',
            _update: 'ModificationTime'
          }
        }
        if (result.result.columns) {
          result.result.columns.forEach(function(col) {
            col.name = col.alias
          })
        }
        result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
        result = JSON.parse(JSON.stringify(result))
      }
      if (cb) {
        if (result && result.status === 0) {
          if (
            result.result &&
            ((result.result.data && result.result.data.length === 0) ||
              !result.result.data)
          ) {
            cb('successEmpty', result)
          } else {
            cb('success', result)
          }
        } else {
          cb('fail', result)
        }
      }
    }

    return result
  }
}

function _newDbOpen(resourceID, dbId) {
  var dbConfig = lookupResource({
    id: resourceID
  })
  if (dbConfig.status === 0) {
    dbConfig.result.config = JSON.parse(dbConfig.result.config)
    var oldTable = dbConfig.result['config']['tables'][dbId]
    var uri = JSON.parse(dbConfig.result.uri)
    var dbOpen = ndbOpen({
      scheme: uri['scheme'],
      username: uri['username'],
      password: uri['password'],
      host: uri['host'],
      db: oldTable.name.split('.')[0]
    })
    if (dbOpen.status === 0) {
      return { status: 'success', sessId: dbOpen.result, oldTable: oldTable }
    } else {
      return { status: 'fail', failReason: dbOpen.result }
    }
  } else {
    return { status: 'fail', failReason: dbConfig.result }
  }
}

$funcs['data-newDb'] = {
  dbSelect: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var cons = paramObj.cons
    var orders = paramObj.orders
    var range = paramObj.range
    var cols = paramObj.cols
    var obj = {}
    var compLocale = {
      eq: '=',
      neq: '!=',
      gt: '>',
      lt: '<',
      gte: '>=',
      lte: '<='
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (cols) {
      let newCols = []
      cols.forEach(item => {
        newCols.push({ col: item.name })
      })
      obj['cols'] = newCols
    }
    if (orders) {
      obj['orderBy'] = { col: orders[0].column, desc: !orders[0].asc }
    }
    if (cons) {
      var where = {}
      var args_and = []
      var args_or = []
      var op = []
      cons.map(item => {
        if (item.pred == 'and') {
          if (!op.includes('and')) {
            op.push('and')
          }
          args_and.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        } else {
          if (!op.includes('or')) {
            op.push('or')
          }
          args_or.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        }
      })
      if (op.length == 2) {
        where.op = 'or'
        where.args = [
          {
            op: 'and',
            args: args_and
          },
          {
            op: 'or',
            args: args_or
          }
        ]
      } else if (op.length == 1) {
        where.op = op[0]
        where.args = op[0] === 'and' ? args_and : args_or
      }

      obj['where'] = where
    }
    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      var dbSelect = ndbSelect({
        sessId: newDbOpen.sessId,
        //txId: txId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        ...obj
      })
      if (dbSelect.status === 0) {
        cb && cb('success', { data: dbSelect.result, status: dbSelect.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbSelect.result.detail,
            status: dbSelect.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var obj = {}
    if (header && data) {
      header.forEach((item, key) => {
        obj[item] = data[key]
      })
    }

    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      var dbInsert = ndbInsert({
        sessId: newDbOpen.sessId,
        //txId: '',
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        data: [obj]
      })
      if (dbInsert.status === 0) {
        cb &&
          cb('success', { dataId: dbInsert.result[0], status: dbInsert.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbInsert.result.detail,
            status: dbInsert.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  dbInsertJson: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var data = paramObj.data
    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      var dbInsert = ndbInsert({
        sessId: newDbOpen.sessId,
        //txId: '',
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        data: [data]
      })
      if (dbInsert.status === 0) {
        cb &&
          cb('success', { dataId: dbInsert.result[0], status: dbInsert.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbInsert.result.detail,
            status: dbInsert.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  dbInsertMulti: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')

    var spec = paramObj.spec
    var data = paramObj.data

    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      var dbInsert = ndbInsert({
        sessId: newDbOpen.sessId,
        //txId: '',
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: spec || newDbOpen.oldTable['spec'],
        data: data
      })
      if (dbInsert.status === 0) {
        cb &&
          cb('success', { dataIds: dbInsert.result, status: dbInsert.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbInsert.result.detail,
            status: dbInsert.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  dbBatchUpdate: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var cons = paramObj.cons
    var updates = paramObj.updates
    var obj = {}
    var compLocale = {
      eq: '=',
      neq: '!=',
      gt: '>',
      lt: '<',
      gte: '>=',
      lte: '<='
    }
    if (cons) {
      var where = {}
      var args_and = []
      var args_or = []
      var op = []
      cons.map(item => {
        if (item.pred == 'and') {
          if (!op.includes('and')) {
            op.push('and')
          }
          args_and.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        } else {
          if (!op.includes('or')) {
            op.push('or')
          }
          args_or.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        }
      })
      if (op.length == 2) {
        where.op = 'or'
        where.args = [
          {
            op: 'and',
            args: args_and
          },
          {
            op: 'or',
            args: args_or
          }
        ]
      } else if (op.length == 1) {
        where.op = op[0]
        where.args = op[0] === 'and' ? args_and : args_or
      }

      obj['where'] = where
    }

    if (updates) {
      let cols = []
      updates.forEach(item => {
        cols.push({
          col: item.column,
          val: {
            op: 'val',
            val: item.value
          }
        })
      })
      obj['cols'] = cols
    }

    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      var dbUpdate = ndbUpdate({
        sessId: newDbOpen.sessId,
        //txId: txId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        ...obj
      })
      if (dbUpdate.status === 0) {
        cb &&
          cb('success', { affect: dbUpdate.result, status: dbUpdate.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbUpdate.result.detail,
            status: dbUpdate.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  dbUpdateById: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var data = paramObj.data
    var items = []
    if (data) {
      for (var i = 0; i < data.length; i++) {
        var cols = []
        Object.keys(data[i]).forEach(key => {
          if (key !== '_id' && key !== '数据ID') {
            cols.push({
              col: key,
              val: {
                op: 'val',
                val: data[i][key]
              }
            })
          }
        })

        items.push({
          cols: cols,
          where: {
            op: '=',
            args: [
              {
                op: 'col',
                val: '_id'
              },
              {
                op: 'val',
                val: data[i]['_id'] || data[i]['数据ID']
              }
            ]
          }
        })
      }
    }
    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      //cb && cb('success', { affect: items })
      var dbUpdate = ndbUpdateBatch({
        sessId: newDbOpen.sessId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        items
      })
      if (dbUpdate.status === 0) {
        cb &&
          cb('success', { affect: dbUpdate.result, status: dbUpdate.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbUpdate.result.detail,
            status: dbUpdate.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  dbCount: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var newDbOpen = _newDbOpen(resourceID, dbId)
    var cons = paramObj.cons
    var obj = {
      cols: [{ col: '*', fn: 'COUNT' }]
    }
    var compLocale = {
      eq: '=',
      neq: '!=',
      gt: '>',
      lt: '<',
      gte: '>=',
      lte: '<='
    }
    if (cons) {
      var where = {}
      var args_and = []
      var args_or = []
      var op = []
      cons.map(item => {
        if (item.pred == 'and') {
          if (!op.includes('and')) {
            op.push('and')
          }
          args_and.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        } else {
          if (!op.includes('or')) {
            op.push('or')
          }
          args_or.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        }
      })
      if (op.length == 2) {
        where.op = 'or'
        where.args = [
          {
            op: 'and',
            args: args_and
          },
          {
            op: 'or',
            args: args_or
          }
        ]
      } else if (op.length == 1) {
        where.op = op[0]
        where.args = op[0] === 'and' ? args_and : args_or
      }

      obj['where'] = where
    }
    if (newDbOpen.status === 'success') {
      var dbSelect = ndbSelect({
        sessId: newDbOpen.sessId,
        //txId: txId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        ...obj
      })
      if (dbSelect.status === 0) {
        cb && cb('success', dbSelect.result[0]['COUNT(*)'])
      } else {
        cb && cb('fail', dbSelect.result)
      }
    } else {
      cb && cb('fail', newDbOpen.failReason)
    }
  },
  dbSum: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var newDbOpen = _newDbOpen(resourceID, dbId)
    var cons = paramObj.cons
    var column = paramObj.column

    var obj = {
      cols: [{ col: column, fn: 'SUM' }]
    }
    var compLocale = {
      eq: '=',
      neq: '!=',
      gt: '>',
      lt: '<',
      gte: '>=',
      lte: '<='
    }
    if (cons) {
      var where = {}
      var args_and = []
      var args_or = []
      var op = []
      cons.map(item => {
        if (item.pred == 'and') {
          if (!op.includes('and')) {
            op.push('and')
          }
          args_and.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        } else {
          if (!op.includes('or')) {
            op.push('or')
          }
          args_or.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        }
      })
      if (op.length == 2) {
        where.op = 'or'
        where.args = [
          {
            op: 'and',
            args: args_and
          },
          {
            op: 'or',
            args: args_or
          }
        ]
      } else if (op.length == 1) {
        where.op = op[0]
        where.args = op[0] === 'and' ? args_and : args_or
      }

      obj['where'] = where
    }
    if (newDbOpen.status === 'success') {
      var dbSelect = ndbSelect({
        sessId: newDbOpen.sessId,
        //txId: txId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        ...obj
      })
      if (dbSelect.status === 0) {
        cb && cb('success', dbSelect.result[0]['SUM(`' + column + '`)'])
      } else {
        cb && cb('fail', dbSelect.result)
      }
    } else {
      cb && cb('fail', newDbOpen.failReason)
    }
  },
  dbAvg: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var newDbOpen = _newDbOpen(resourceID, dbId)
    var cons = paramObj.cons
    var column = paramObj.column
    var obj = {
      cols: [{ col: column, fn: 'AVG' }]
    }
    var compLocale = {
      eq: '=',
      neq: '!=',
      gt: '>',
      lt: '<',
      gte: '>=',
      lte: '<='
    }
    if (cons) {
      var where = {}
      var args_and = []
      var args_or = []
      var op = []
      cons.map(item => {
        if (item.pred == 'and') {
          if (!op.includes('and')) {
            op.push('and')
          }
          args_and.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        } else {
          if (!op.includes('or')) {
            op.push('or')
          }
          args_or.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        }
      })
      if (op.length == 2) {
        where.op = 'or'
        where.args = [
          {
            op: 'and',
            args: args_and
          },
          {
            op: 'or',
            args: args_or
          }
        ]
      } else if (op.length == 1) {
        where.op = op[0]
        where.args = op[0] === 'and' ? args_and : args_or
      }

      obj['where'] = where
    }
    if (newDbOpen.status === 'success') {
      var dbSelect = ndbSelect({
        sessId: newDbOpen.sessId,
        //txId: txId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        ...obj
      })
      if (dbSelect.status === 0) {
        cb && cb('success', dbSelect.result[0]['AVG(`' + column + '`)'])
      } else {
        cb && cb('fail', dbSelect.result)
      }
    } else {
      cb && cb('fail', newDbOpen.failReason)
    }
  },
  dbDataRm: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var cons = paramObj.cons
    var limit = paramObj.limit

    var obj = {}
    var compLocale = {
      eq: '=',
      neq: '!=',
      gt: '>',
      lt: '<',
      gte: '>=',
      lte: '<='
    }
    if (cons) {
      var where = {}
      var args_and = []
      var args_or = []
      var op = []
      cons.map(item => {
        if (item.pred == 'and') {
          if (!op.includes('and')) {
            op.push('and')
          }
          args_and.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        } else {
          if (!op.includes('or')) {
            op.push('or')
          }
          args_or.push({
            op: compLocale[item.comp],
            args: [
              {
                op: 'col',
                val: item.column
              },
              {
                op: 'val',
                val: item.value
              }
            ]
          })
        }
      })
      if (op.length == 2) {
        where.op = 'or'
        where.args = [
          {
            op: 'and',
            args: args_and
          },
          {
            op: 'or',
            args: args_or
          }
        ]
      } else if (op.length == 1) {
        where.op = op[0]
        where.args = op[0] === 'and' ? args_and : args_or
      }

      obj['where'] = where
    }
    if (limit) {
      obj['limit'] = limit
    }

    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      var dbDelete = ndbDelete({
        sessId: newDbOpen.sessId,
        //txId: txId,
        tableName: newDbOpen.oldTable.name.split('.')[1],
        spec: newDbOpen.oldTable['spec'],
        ...obj
        //orderBy: orderBy,
        //limit: limit
      })
      if (dbDelete.status === 0) {
        cb &&
          cb('success', { affect: dbDelete.result, status: dbDelete.status })
      } else {
        cb &&
          cb('fail', {
            failReason: dbDelete.result.detail,
            status: dbDelete.status
          })
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  },
  execSql: function(_sys, node, id, paramObj, cb) {
    var resourceID = _sys.get(node, id, 'resourceID')
    var dbId = _sys.get(node, id, 'dbId')
    var sqlType = paramObj.sqlType
    var sqlCode = paramObj.sqlCode
    var sqlParam = []
    var newDbOpen = _newDbOpen(resourceID, dbId)
    if (newDbOpen.status === 'success') {
      if (sqlType === 'exec') {
        var sqlDb = sqlExec({
          sessId: newDbOpen.sessId,
          sql: sqlCode,
          params: sqlParam
        })
      } else {
        var sqlDb = sqlQuery({
          sessId: newDbOpen.sessId,
          sql: sqlCode,
          params: sqlParam
        })
      }
      if (sqlDb.status === 0) {
        cb && cb('success', sqlDb)
      } else {
        cb && cb('fail', sqlDb)
      }
    } else {
      cb && cb('fail', { failReason: newDbOpen.failReason })
    }
  }
}

$funcs['data-db'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[$sys.lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          // if (
          //   cons[0] &&
          //   (cons[0].value === '2021-02-31' || cons[0].value === '2021-03-04')
          // ) {
          //   result.result.data[0][0] = cons[0].value
          //   result.result.data[0][1] = new Date(cons[0].value).getDate()
          // }
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbOriginalSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[$sys.lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbSearch: function(_sys, node, id, cons, range, cb) {
    var obj = {}
    if (cons) {
      obj['query'] = cons
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSmartSearch: function(
    _sys,
    node,
    id,
    query,
    searchRange,
    minMatch,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = { query: query }
    var _searchRange = searchRange
    var _minMatch = minMatch
    var dbCons = cons
    var _orders = orders
    var _range = range
    var _cols = cols
    var _cb = cb
    if (arguments && arguments.length === 10) {
      _cb = _cols
      _cols = _range
      _range = _orders
      _orders = dbCons
      dbCons = _minMatch
      _minMatch = _searchRange
      _searchRange = undefined
    }
    if (_minMatch !== undefined) {
      if (!isNaN(_minMatch)) {
        _minMatch += ''
      }
      obj['minimumShouldMatch'] = _minMatch
    }
    if (_searchRange) {
      var multiQuery = { text: query, boostFields: _searchRange }
      if (obj['minimumShouldMatch']) {
        multiQuery.minimumShouldMatch = obj['minimumShouldMatch']
        delete obj['minimumShouldMatch']
      }
      delete obj.query
      obj.multiQueries = [multiQuery]
    }
    if (dbCons) {
      var _cons = []
      dbCons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_orders) {
      obj['orders'] = _orders
    }
    if (_range) {
      if (_range.offset) {
        obj['offset'] = _range.offset
      }
      if (_range.limit) {
        obj['limit'] = _range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[$sys.lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbCustomizeSearch: function(
    _sys,
    node,
    id,
    queries,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb
    obj.multiQueries = queries
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[$sys.lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGetConfig: function(_sys, node, id, cb) {
    var result = _dbCmd(id, dbGetConfig)
    if (cb) {
      if (result && result.status === 0) {
        //result = JSON.parse(JSON.stringify(result))
        if (
          !result.result ||
          (result.result && !result.result.hasOwnProperty('openConfig'))
        ) {
          result.result = {
            openConfig: false
          }
        }
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSetConfig: function(
    _sys,
    node,
    id,
    openConfig,
    startTime,
    endTime,
    timeLimit,
    countLimit,
    dayLimit,
    totalCountLimit,
    totalDayLimit,
    cb
  ) {
    var obj = {
      config: {
        openConfig: openConfig,
        startTime: startTime,
        endTime: endTime,
        timeLimit: timeLimit,
        countLimit: countLimit,
        dayLimit: dayLimit,
        totalCountLimit: totalCountLimit,
        totalDayLimit: totalDayLimit
      }
    }
    var result = _dbCmd(id, dbSetConfig, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbDelete: function(_sys, node, id, rowId) {
    return _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, {
      rowId: rowId
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateById: function(_sys, node, id, data, cb) {
    var rst = []
    if (data && Array.isArray(data)) {
      var exceptKeys = [
        'id',
        '_id',
        '数据ID',
        '提交用户',
        '创建时间',
        '更新时间',
        'DataID',
        'Submitter',
        'CreationTime',
        'ModificationTime'
      ]
      data.forEach(function(obj) {
        if (obj) {
          var rowId = obj['数据ID'] || obj['DataID'] || obj['_id'] || obj['id']
          var item = { data: [], header: [], rowId: rowId }
          for (var key in obj) {
            if (exceptKeys.indexOf(key) < 0) {
              item.header.push(key)
              item.data.push(obj[key])
            }
          }
          rst.push(item)
        }
      })
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: rst
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }

    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[$sys.lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    //-----------兼容之前版本------------
    var _cb = cb
    var _limit = limit
    var _orders = orders
    if (arguments && arguments.length == 6) {
      _cb = limit
      _limit = orders
      _orders = undefined
    }

    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_orders) {
      obj['orders'] = _orders
    }
    if (_limit !== undefined) {
      obj['limit'] = _limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      obj['data'] = [data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update'
          }
        }
        var map = objHeaderMap[$sys.lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }

    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbBatchInsert: function(_sys, node, id, header, data, cb) {
    if (data) {
      var param = {
        header: header,
        data: data
      }

      // 对象数组header处理
      if (header && header[0] && typeof header[0] === 'object') {
        param.header = header.map(function(head) {
          return head.title
        })
      }
      // 对象数组data处理(如果是二维数组就不处理)
      if (
        data &&
        data[0] &&
        !Array.isArray(data[0]) &&
        typeof data[0] === 'object'
      ) {
        param.data = data.map(function(dat) {
          var result = []
          param.header.forEach(function(head, index) {
            result[index] = dat[head]
          })
          return result
        })
      }

      // 处理翻译问题
      if (param.header && param.header.length > 0) {
        var colMapping = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update'
          }
        }
        var mapping = colMapping[$sys.lang || 'zh']
        param.header = param.header.map(function(head) {
          return mapping[head] ? mapping[head] : head
        })
      }

      var result = _dbCmd(
        id,
        !_sys.inTransaction ? dbBatchInsert : txBatchInsert,
        param
      )
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
      return result
    }
  },
  dbExportConsExcel: function(_sys, node, id, cons, orders, range, cb) {
    var lang = $sys.lang || 'zh'
    var dbHeaderMapping = {
      zh: {
        _id: '数据ID',
        _user: '提交用户',
        _create: '创建时间',
        _update: '更新时间'
      },
      en: {
        _id: 'DataID',
        _user: 'Submitter',
        _create: 'CreationTime',
        _update: 'ModificationTime'
      }
    }
    var header = dbHeaderMapping[lang] || {}
    var obj = { header: header }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, dbExportExcel, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbExportExcel: function(_sys, node, id, cb) {
    var lang = $sys.lang || 'zh'
    var dbHeaderMapping = {
      zh: {
        _id: '数据ID',
        _user: '提交用户',
        _create: '创建时间',
        _update: '更新时间'
      },
      en: {
        _id: 'DataID',
        _user: 'Submitter',
        _create: 'CreationTime',
        _update: 'ModificationTime'
      }
    }
    var header = dbHeaderMapping[lang] || {}
    var obj = { header: header }
    var result = _dbCmd(id, dbExportExcel, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  execSql: function(_sys, node, id, sql, variables, cb) {
    function dealJson(sqlJson) {
      var result = {}
      if (sqlJson) {
        var colMapping = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update'
          }
        }
        var mapping = colMapping[$sys.lang || 'zh']
        var opMap = {
          '=': 'eq',
          '!=': 'neq',
          '>=': 'gte',
          '>': 'gt',
          '<=': 'lte',
          '<': 'lt',
          LIKE: 'like',
          like: 'like',
          'NOT LIKE': 'nlike',
          'not like': 'nlike',
          IS: 'eq',
          is: 'eq',
          'IS NOT': 'neq',
          'is not': 'neq',
          IN: 'eq',
          in: 'eq',
          'NOT IN': 'neq',
          'not in': 'neq'
        }
        var conMap = {
          AND: 'and',
          OR: 'or'
        }
        function genAst(obj, isHavingClause) {
          var ast = {}
          switch (obj.type) {
            case 'conditional':
              ast['op'] = conMap[obj.value] || obj.value
              ast['args'] = []
              if (
                obj.left &&
                ['conditional', 'operator', 'in'].indexOf(obj.left.type) >= 0 &&
                obj.right &&
                ['conditional', 'operator', 'in'].indexOf(obj.right.type) >= 0
              ) {
                ast.args.push(genAst(obj.left), genAst(obj.right))
              } else {
                if (!!isHavingClause) {
                  throw new Error('The HAVING statement has errors')
                } else {
                  throw new Error('The WHERE statement has errors')
                }
              }
              break
            case 'operator':
              var op = obj.value
              if (['IS', 'is', 'IS NOT', 'is not'].indexOf(op) >= 0) {
                if (
                  obj.left &&
                  obj.left.type === 'literal' &&
                  obj.right &&
                  obj.right.type === 'literal' &&
                  (obj.right.value === 'NULL' || obj.right.value === 'null')
                ) {
                  ast['op'] = opMap[op]
                  ast['col'] = mapping[obj.left.value] || obj.left.value
                } else {
                  if (!!isHavingClause) {
                    throw new Error('The HAVING statement has errors')
                  } else {
                    throw new Error('The WHERE statement has errors')
                  }
                }
              } else {
                if (
                  obj.left &&
                  obj.left.type === 'literal' &&
                  obj.right &&
                  ['literal', 'number', 'placeholder'].indexOf(
                    obj.right.type
                  ) >= 0
                ) {
                  ast['op'] = opMap[op]
                  ast['col'] = mapping[obj.left.value] || obj.left.value
                  if (obj.right.type === 'placeholder') {
                    ast['val'] = variables[obj.right.index]
                  } else {
                    ast['val'] = obj.right.value
                  }
                } else {
                  if (!!isHavingClause) {
                    throw new Error('The HAVING statement has errors')
                  } else {
                    throw new Error('The WHERE statement has errors')
                  }
                }
              }
              break
            case 'in':
              ast['op'] = opMap[obj.op]
              ast['col'] = mapping[obj.value] || obj.value
              if (Array.isArray(obj.arguments)) {
                ast['val'] = obj.arguments.map(function(item) {
                  return item.value
                })
              } else if (obj.arguments.type === 'placeholder') {
                ast['val'] = variables[obj.arguments.index]
              }
              break
            default:
              if (!!isHavingClause) {
                throw new Error('The HAVING statement has errors')
              } else {
                throw new Error('The WHERE statement has errors')
              }
          }
          return ast
        }

        if (sqlJson.from && sqlJson.from !== '*') {
          result['structDbId'] = sqlJson.from
        }

        if (sqlJson.update && sqlJson.update !== '*') {
          result['structDbId'] = sqlJson.update
        }

        if (sqlJson.where && sqlJson.where.length > 0) {
          var wheres = []
          sqlJson.where.forEach(function(w) {
            var where = genAst(w)
            wheres.push(where)
          })
          if (wheres.length > 0) {
            result['wheres'] = wheres
          }
        }

        if (
          sqlJson.select &&
          sqlJson.select.length > 0 &&
          sqlJson.select[0].type !== 'wildcard'
        ) {
          var cols = []
          var distinctCols = []
          sqlJson.select.forEach(function(col) {
            if (col.type === 'literal') {
              cols.push({ name: mapping[col.value] || col.value })
            } else if (
              col.type === 'function' &&
              col.arguments.length === 1 &&
              col.arguments[0] &&
              col.arguments[0].type === 'literal'
            ) {
              var colName = col.arguments[0].value
              cols.push({
                name: mapping[colName] || colName,
                aggregate: col.value
              })
            } else if (
              col.type === 'function' &&
              ['count', 'COUNT'].indexOf(col.value) >= 0 &&
              col.arguments.length > 1 &&
              ['distinct', 'DISTINCT'].indexOf(col.arguments[0].value) >= 0
            ) {
              // distinctCount
              for (let i = 1; i < col.arguments.length; i++) {
                if (col.arguments[i] && col.arguments[i].type === 'literal') {
                  distinctCols.push(col.arguments[i].value)
                } else {
                  throw new Error('The SELECT statement has errors')
                }
              }
            } else {
              throw new Error('The SELECT statement has errors')
            }
          })
          if (cols.length > 0) {
            result['columns'] = cols
          }
          if (distinctCols.length > 0) {
            result['distinctColumns'] = distinctCols
          }
        }

        if (sqlJson.orderBy && sqlJson.orderBy.length > 0) {
          var orders = []
          sqlJson.orderBy.forEach(function(order) {
            if (order.type === 'literal') {
              orders.push({
                column: mapping[order.value] || order.value,
                asc:
                  order.direction === 'DESC' || order.direction === 'desc'
                    ? false
                    : true
              })
            }
          })
          if (orders.length > 0) {
            result['orders'] = orders
          }
        }

        if (sqlJson.group && sqlJson.group.length > 0) {
          var groups = []
          sqlJson.group.forEach(function(g) {
            if (g.type === 'literal') {
              groups.push({ column: mapping[g.value] || g.value })
            }
          })
          if (groups.length > 0) {
            result['groups'] = groups
          }
        }

        if (sqlJson.having && sqlJson.having.length > 0) {
          var havingAst = []
          sqlJson.having.forEach(function(h) {
            var hAst = genAst(h, true)
            havingAst.push(hAst)
          })
          if (havingAst.length > 0) {
            result['having'] = havingAst
          }
        }

        if (sqlJson.offset || sqlJson.offset === 0) {
          if (
            Object.prototype.toString.call(sqlJson.offset) ===
              '[object Object]' &&
            sqlJson.offset.type === 'placeholder'
          ) {
            result['offset'] = variables[sqlJson.offset.index]
          } else {
            result['offset'] = sqlJson.offset
          }
        }

        if (sqlJson.limit || sqlJson.limit === 0) {
          if (
            Object.prototype.toString.call(sqlJson.limit) ===
              '[object Object]' &&
            sqlJson.limit.type === 'placeholder'
          ) {
            result['limit'] = variables[sqlJson.limit.index]
          } else {
            result['limit'] = sqlJson.limit
          }
        }

        if (sqlJson.set && sqlJson.set.length > 0) {
          var updates = []
          var setOpMap = {
            '=': 'set',
            '+': 'inc',
            '*': 'mul'
          }
          sqlJson.set.forEach(function(item) {
            updates.push({
              column: mapping[item.left.value] || item.left.value,
              op: setOpMap[item.value],
              value:
                item.right.type === 'placeholder'
                  ? variables[item.right.index]
                  : item.right.type === 'null'
                  ? null
                  : item.right.value
            })
          })
          if (updates.length > 0) {
            result['updates'] = updates
          }
        }
      }

      return result
    }

    var sqlJson = new sql2json(sql).toJSON()
    var obj = dealJson(sqlJson)
    var result
    if (sqlJson.update) {
      // update
      result = _dbCmd(id, dbBatchUpdate, obj)

      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
    } else if (obj.distinctColumns) {
      // dbDistinctCount
      result = _dbCmd(
        id,
        !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
        obj
      )
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
    } else {
      // select
      result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
      if (result && result.result && result.result.data) {
        var dbHeaderMapping = {
          zh: {
            _id: '数据ID',
            _user: '提交用户',
            _create: '创建时间',
            _update: '更新时间'
          },
          en: {
            _id: 'DataID',
            _user: 'Submitter',
            _create: 'CreationTime',
            _update: 'ModificationTime'
          }
        }
        result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
        result = JSON.parse(JSON.stringify(result))
      }
      if (cb) {
        if (result && result.status === 0) {
          if (
            result.result &&
            ((result.result.data && result.result.data.length === 0) ||
              !result.result.data)
          ) {
            cb('successEmpty', result)
          } else {
            cb('success', result)
          }
        } else {
          cb('fail', result)
        }
      }
    }

    return result
  }
}
$funcs['data-custom'] = $funcs['data-db']
$funcs['data-cacheDb'] = {
  cacheSet: function(_sys, node, id, key, value, expire, cb) {
    var result
    var dbId = _sys.get(node, id, 'dbId')
    if (dbId) {
      //key中不能含有汉字
      if (escape(key).indexOf('%u') != -1) {
        result = {
          status: 500,
          result: {
            detail: 'key不能包含中文字符'
          }
        }
      } else {
        var obj = {}
        var _key = dbId + ':' + key
        _key = _cacheDbCmd(_key)
        obj = {
          key: _key,
          value: value,
          expire: expire
        }
        result = cacheSet(obj)
      }
    } else {
      result = {
        status: 500,
        result: {
          detail: 'dbId获取失败'
        }
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheGet: function(_sys, node, id, key, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key
    }
    var result = cacheGet(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheSetNX: function(_sys, node, id, key, value, expire, cb) {
    var result
    var dbId = _sys.get(node, id, 'dbId')
    if (dbId) {
      //key中不能含有汉字
      if (escape(key).indexOf('%u') != -1) {
        result = {
          status: 500,
          result: {
            detail: 'key不能包含中文字符'
          }
        }
      } else {
        var obj = {}
        var _key = dbId + ':' + key
        _key = _cacheDbCmd(_key)
        obj = {
          key: _key,
          value: value,
          expire: expire
        }
        result = cacheSetNX(obj)
        if (
          result.status === 0 &&
          result.result &&
          result.result.value === false
        ) {
          result = {
            status: 500,
            result: {
              detail: '当前key已经存在'
            }
          }
        }
      }
    } else {
      result = {
        status: 500,
        result: {
          detail: 'dbId获取失败'
        }
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheSetXX: function(_sys, node, id, key, value, expire, cb) {
    var result
    var dbId = _sys.get(node, id, 'dbId')
    if (dbId) {
      //key中不能含有汉字
      if (escape(key).indexOf('%u') != -1) {
        result = {
          status: 500,
          result: {
            detail: 'key不能包含中文字符'
          }
        }
      } else {
        var obj = {}
        var _key = dbId + ':' + key
        _key = _cacheDbCmd(_key)
        obj = {
          key: _key,
          value: value,
          expire: expire
        }
        result = cacheSetXX(obj)
        if (
          result.status === 0 &&
          result.result &&
          result.result.value === false
        ) {
          result = {
            status: 500,
            result: {
              detail: '当前key不存在'
            }
          }
        }
      }
    } else {
      result = {
        status: 500,
        result: {
          detail: 'dbId获取失败'
        }
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheIncrBy: function(_sys, node, id, key, value, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key,
      value: value
    }
    var result = cacheIncrBy(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheSAdd: function(_sys, node, id, key, values, cb) {
    var result
    var dbId = _sys.get(node, id, 'dbId')
    if (dbId) {
      //key中不能含有汉字
      if (escape(key).indexOf('%u') != -1) {
        result = {
          status: 500,
          result: {
            detail: 'key不能包含中文字符'
          }
        }
      } else {
        var obj = {}
        var _key = dbId + ':' + key
        _key = _cacheDbCmd(_key)
        obj = {
          key: _key,
          values: values
        }
        result = cacheSAdd(obj)
      }
    } else {
      result = {
        status: 500,
        result: {
          detail: 'dbId获取失败'
        }
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheSRem: function(_sys, node, id, key, values, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key,
      values: values
    }
    var result = cacheSRem(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheSMembers: function(_sys, node, id, key, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key
    }
    var result = cacheSMembers(obj)
    var values = null
    if (result.result && result.result.values) {
      values = result.result.values
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', values)
      } else {
        cb('fail', values)
      }
    }
    return result
  },

  cacheSIsMember: function(_sys, node, id, key, value, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key,
      value: value
    }
    var result = cacheSIsMember(obj)
    var isMember = false
    if (result && result.status === 0 && result.result.value) {
      isMember = result.result.value
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', isMember)
      } else {
        cb('fail', isMember)
      }
    }
    return result
  },

  cacheExpire: function(_sys, node, id, key, expire, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key,
      expire: expire
    }
    var result = cacheExpire(obj)
    if (result.status === 0 && result.result && result.result.value === false) {
      result = {
        status: 500,
        result: {
          detail: '当前key不存在'
        }
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheTTL: function(_sys, node, id, key, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key
    }
    var result = cacheTTL(obj)
    var ttl = null
    if (result.result && result.result.value) {
      ttl = result.result.value
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', ttl)
      } else {
        cb('fail', ttl)
      }
    }
    return result
  },

  cacheDel: function(_sys, node, id, key, cb) {
    var obj = {}
    var _key = _sys.get(node, id, 'dbId') + ':' + key
    _key = _cacheDbCmd(_key)
    obj = {
      key: _key
    }
    var result = cacheDel(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  cacheScan: function(_sys, node, id, cursor, limit, cb) {
    var prefix = _sys.get(node, id, 'dbId')
    prefix = _cacheDbCmd(prefix)
    var obj = {
      prefix: prefix,
      cursor: cursor,
      limit: limit
    }
    if (cursor != '' && cursor != null && cursor != undefined) {
      obj.cursor = prefix + ':' + cursor
    }

    var result = cacheScan(obj)

    var _keys = []
    var _cursor = ''
    if (result && result.status === 0) {
      if (result.result.keys != null) {
        for (var i = 0, len = result.result.keys.length; i < len; i++) {
          _keys[i] = result.result.keys[i].split(':')[1]
        }
        _cursor = result.result.cursor.split(':')[1]
        result = {
          status: 0,
          result: {
            keys: _keys,
            cursor: _cursor
          }
        }
      } else {
        result = {
          status: 0,
          result: {
            keys: [],
            cursor: _cursor
          }
        }
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        if (result.result.keys.length > 0) {
          cb('success', result)
        } else {
          cb('successEmpty', result)
        }
      } else {
        cb('fail', result)
      }
    }

    return result
  },

  cacheMGet: function(_sys, node, id, keys, cb) {
    var result
    if (keys && Array.isArray(keys) && keys.length > 0) {
      var dbId = _sys.get(node, id, 'dbId')
      var _keys = keys.map(function(item) {
        return _cacheDbCmd(dbId + ':' + item)
      })
      var obj = {
        keys: _keys
      }
      result = cacheMGet(obj)

      if (result && result.status === 0) {
        var isEmpty = false
        if (
          (result.result.values && result.result.values.length === 0) ||
          !result.result.values
        ) {
          isEmpty = true
          result.result.values = []
        } else if (
          result.result.values.join('') === '' ||
          result.result.values.join('') === null ||
          result.result.values.join('') === undefined
        ) {
          isEmpty = true
          result.result.values = []
        }
      }
    } else {
      result = {
        status: 500,
        result: {
          detail: '键名列表必须为数组类型且不可为空'
        }
      }
    }

    if (cb) {
      if (result && result.status === 0) {
        if (isEmpty === true) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }

    return result
  }
}
$funcs['data-redPack'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  sendImageCaptcha: function(_sys, node, id, cb) {
    var result = _dbCmd(id, sendImageCaptcha)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  takeRedPacket: function(_sys, node, id, token, code, amount, openId, cb) {
    var _amount = amount
    var _openId = openId
    var _cb = cb
    if (arguments.length === 7 && typeof openId === 'function') {
      _amount = undefined
      _openId = amount
      _cb = openId
    }
    var params = {
      code: code,
      token: token,
      openId: _openId
    }
    if (_amount) {
      params.amount = _amount
    }
    var result = _dbCmd(id, takeRedPacket, params)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  takeMiniRedPacket: function(_sys, node, id, token, code, amount, openId, cb) {
    var _amount = amount
    var _openId = openId
    var _cb = cb

    var params = {
      code: code,
      token: token,
      openId: _openId,
      mini: true
    }

    if (_amount) {
      params.amount = _amount
    }

    var result = _dbCmd(id, takeRedPacket, params)

    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }

    return result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          昵称: 'nick',
          头像: 'headimgurl',
          订单号: 'trade_no',
          金额: 'amount'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Nickname: 'nick',
          Avatar: 'headimgurl',
          Order_ID: 'trade_no',
          Price: 'amount'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          headimgurl: '头像',
          trade_no: '订单号',
          amount: '金额'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          headimgurl: 'Avatar',
          trade_no: 'Order_ID',
          amount: 'Price'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          headimgurl: '头像',
          trade_no: '订单号',
          amount: '金额'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          headimgurl: 'Avatar',
          trade_no: 'Order_ID',
          amount: 'Price'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGetConfig: function(_sys, node, id, cb) {
    var params = {
      type: 'redpacket'
    }
    var result = _dbCmd(id, dbGetConfig, params)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSetConfig: function(
    _sys,
    node,
    id,
    shouldVerify,
    name,
    blessing,
    remark,
    amount,
    min,
    max,
    startTime,
    endTime,
    interval,
    totalTimes,
    timesPerDay,
    totalCount,
    countPerDay,
    cb
  ) {
    var obj = {
      type: 'redpacket',
      config: {
        shouldVerify: shouldVerify,
        name: name,
        blessing: blessing,
        remark: remark,
        amount: amount,
        min: min,
        max: max,
        startTime: startTime,
        endTime: endTime,
        interval: interval,
        totalTimes: totalTimes,
        timesPerDay: timesPerDay,
        totalCount: totalCount,
        countPerDay: countPerDay
      }
    }
    var result = _dbCmd(id, dbSetConfig, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-payment'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  wxpay: function(_sys, node, id, amount, body, mini, callback) {
    var params = {
      amount: amount,
      body: body,
      mini: mini
    }
    var result = _dbCmd(id, wxpay, params)
    if (callback) {
      if (result && result.status === 0) {
        callback('beforePay', result)
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  h5payment: function(_sys, node, id, propsObj, callback) {
    var amount = undefined
    var body = undefined
    var tradeType = undefined
    var dbData = undefined
    var params = {
      amount: amount,
      body: body,
      tradeType: tradeType,
      mini: false
    }
    if (propsObj) {
      Object.keys(propsObj).forEach(function(key) {
        if (['amount', 'body', 'tradeType'].indexOf(key) >= 0) {
          params[key] = propsObj[key]
        } else {
          if (!dbData) {
            dbData = {}
          }
          dbData[key] = propsObj[key]
        }
      })
    }
    if (dbData) {
      params.dbData = dbData
    }

    var result = _dbCmd(id, wxpay, params)

    if (callback) {
      if (result && result.status === 0) {
        var info = result.result
        result.result.payInfo = {
          timeStamp: info.timeStamp, // 支付签名时间戳
          nonceStr: info.nonceStr, // 支付签名随机串，不长于 32 位
          package: info.package, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）
          signType: info.signType, // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
          paySign: info.paySign
        }
        // result = JSON.parse(JSON.stringify(result))
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  h5pay: function(_sys, node, id, amount, body, tradeType, dbData, callback) {
    var params = {
      amount: amount,
      body: body,
      tradeType: tradeType,
      dbData: dbData,
      mini: false
    }
    var result = _dbCmd(id, wxpay, params)
    if (callback) {
      if (result && result.status === 0) {
        var info = result.result
        result.result.payInfo = {
          timeStamp: info.timeStamp, // 支付签名时间戳
          nonceStr: info.nonceStr, // 支付签名随机串，不长于 32 位
          package: info.package, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）
          signType: info.signType, // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
          paySign: info.paySign
        }
        // result = JSON.parse(JSON.stringify(result))
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  mppay: function(_sys, node, id, amount, body, dbData, callback) {
    var params = {
      amount: amount,
      body: body,
      dbData: dbData,
      mini: true
    }
    var result = _dbCmd(id, wxpay, params)
    if (callback) {
      if (result && result.status === 0) {
        var info = result.result
        result.result.payInfo = {
          timeStamp: info.timeStamp, // 支付签名时间戳
          nonceStr: info.nonceStr, // 支付签名随机串，不长于 32 位
          package: info.package, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）
          signType: info.signType, // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
          paySign: info.paySign
        }
        // result = JSON.parse(JSON.stringify(result))
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  webAppPay: function(_sys, node, id, amount, body, dbData, callback) {
    var params = {
      amount: amount,
      body: body,
      dbData: dbData,
      mini: true
    }
    var result = _dbCmd(id, wxpay, params)
    if (callback) {
      if (result && result.status === 0) {
        var info = result.result
        result.result.payInfo = {
          timeStamp: info.timeStamp, // 支付签名时间戳
          nonceStr: info.nonceStr, // 支付签名随机串，不长于 32 位
          package: info.package, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）
          signType: info.signType, // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
          paySign: info.paySign
        }
        // result = JSON.parse(JSON.stringify(result))
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  wxpayCheck: function(_sys, node, id, tradeNo, callback) {
    var params = {
      tradeNo: tradeNo
    }
    var result = _dbCmd(id, wxpayCheck, params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          订单号: 'trade_no',
          交易单号: 'transaction_id',
          金额: 'amount',
          状态: 'status_desc',
          交易类型: 'trade_type'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Order_ID: 'trade_no',
          Transaction_ID: 'transaction_id',
          Price: 'amount',
          Status: 'status_desc',
          Transaction_Type: 'trade_type'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          transaction_id: '交易单号',
          amount: '金额',
          status_desc: '状态',
          trade_type: '交易类型'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          transaction_id: 'Transaction_ID',
          amount: 'Price',
          status_desc: 'Status_Desc',
          trade_type: 'Transaction_Type'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']

      // 补充遗漏翻译
      result.result.replenish = {
        zh: {
          status: '状态码'
        },
        en: {
          status: 'Status'
        }
      }

      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          transaction_id: '交易单号',
          amount: '金额',
          status_desc: '状态',
          trade_type: '交易类型'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          transaction_id: 'Transaction_ID',
          amount: 'Price',
          status_desc: 'Status_Desc',
          trade_type: 'Transaction_Type'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-sms'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  sendSMS: function(_sys, node, id, mobile, template, args, callback) {
    var params = {
      mobile: mobile + '',
      name: template,
      args: JSON.stringify(args)
    }
    var result = _dbCmd(id, sendSMS, params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  sendCustomSMS: function(_sys, node, id, mobile, signName, smsCode, args, cb) {
    var _args = {}
    if (args && args.length > 0) {
      args.forEach(function(arg) {
        if (arg.key) {
          _args[arg.key] = arg.value
        }
      })
    }
    var params = {
      mobile: mobile + '',
      signName: signName,
      smsCode: smsCode,
      args: JSON.stringify(_args)
    }
    var result = _dbCmd(id, sendSMS, params)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          手机号: 'mobile',
          名称: 'name',
          变量: 'args',
          订单号: 'trade_no'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Mobile: 'mobile',
          Name: 'name',
          Args: 'args',
          Order_ID: 'trade_no'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          mobile: '手机号',
          name: '名称',
          args: '变量',
          trade_no: '订单号'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          mobile: 'Mobile',
          name: 'Name',
          args: 'Args',
          trade_no: 'Order_ID'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          mobile: '手机号',
          name: '名称',
          args: '变量',
          trade_no: '订单号'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          mobile: 'Mobile',
          name: 'Name',
          args: 'Args',
          trade_no: 'Order_ID'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-email'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  sendEmail: function(
    _sys,
    node,
    id,
    receiver,
    title,
    body,
    sendFormat,
    attachments,
    callback
  ) {
    var obj = {
      receivers: [receiver],
      title: title,
      body: body,
      html: sendFormat === 'html'
    }
    console.log('debug', sendFormat)
    var cb = callback
    var _attachments = attachments
    if (arguments && arguments.length === 7) {
      cb = attachments
      _attachments = undefined
    }

    var files = []
    var fileNames = []
    if (_attachments && _attachments.length > 0) {
      _attachments.forEach(function(item) {
        if (item.key && item.value) {
          fileNames.push(item.key)
          files.push(item.value)
        }
      })
    }
    if (files.length > 0 && files.length === fileNames.length) {
      obj.files = files
      obj.filenames = fileNames
    }

    var result = _dbCmd(id, sendEmail, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  sendEmails: function(
    _sys,
    node,
    id,
    receivers,
    title,
    body,
    sendFormat,
    attachments,
    callback
  ) {
    var obj = {
      receivers: receivers,
      title: title,
      body: body,
      html: sendFormat === 'html'
    }

    var cb = callback
    var _attachments = attachments
    if (arguments && arguments.length === 7) {
      cb = attachments
      _attachments = undefined
    }

    var files = []
    var fileNames = []
    if (_attachments && _attachments.length > 0) {
      _attachments.forEach(function(item) {
        if (item.key && item.value) {
          fileNames.push(item.key)
          files.push(item.value)
        }
      })
    }
    if (files.length > 0 && files.length === fileNames.length) {
      obj.files = files
      obj.filenames = fileNames
    }

    var result = _dbCmd(id, sendEmail, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          收件人: 'receivers',
          标题: 'title',
          内容: 'body'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Receivers: 'receivers',
          Title: 'title',
          Content: 'body'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          receivers: '收件人',
          title: '标题',
          content: '内容',
          body: '内容'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          receivers: 'Receivers',
          title: 'Title',
          content: 'Content',
          body: 'Content'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          receivers: '收件人',
          title: '标题',
          content: '内容',
          body: '内容'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          receivers: 'Receivers',
          title: 'Title',
          content: 'Content',
          body: 'Content'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-router'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }

    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          路径: 'path',
          标题: 'title',
          描述: 'description',
          关键字: 'keywords'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Path: 'path',
          Title: 'title',
          Description: 'description',
          Keywords: 'keywords'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbSearch: function(_sys, node, id, cons, range, cb) {
    var obj = {}
    if (cons) {
      obj['query'] = cons
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      //result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSmartSearch: function(
    _sys,
    node,
    id,
    query,
    searchRange,
    minMatch,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = { query: query }
    var _searchRange = searchRange
    var _minMatch = minMatch
    var dbCons = cons
    var _orders = orders
    var _range = range
    var _cols = cols
    var _cb = cb
    if (arguments && arguments.length === 10) {
      _cb = _cols
      _cols = _range
      _range = _orders
      _orders = dbCons
      dbCons = _minMatch
      _minMatch = _searchRange
      _searchRange = undefined
    }
    if (_minMatch !== undefined) {
      if (!isNaN(_minMatch)) {
        _minMatch += ''
      }
      obj['minimumShouldMatch'] = _minMatch
    }
    if (_searchRange) {
      var multiQuery = { text: query, boostFields: _searchRange }
      if (obj['minimumShouldMatch']) {
        multiQuery.minimumShouldMatch = obj['minimumShouldMatch']
        delete obj['minimumShouldMatch']
      }
      delete obj.query
      obj.multiQueries = [multiQuery]
    }
    if (dbCons) {
      var _cons = []
      dbCons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_orders) {
      obj['orders'] = _orders
    }
    if (_range) {
      if (_range.offset) {
        obj['offset'] = _range.offset
      }
      if (_range.limit) {
        obj['limit'] = _range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          路径: 'path',
          标题: 'title',
          描述: 'description',
          关键字: 'keywords'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Path: 'path',
          Title: 'title',
          Description: 'description',
          Keywords: 'keywords'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbCustomizeSearch: function(
    _sys,
    node,
    id,
    queries,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb
    obj.multiQueries = queries
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          路径: 'path',
          标题: 'title',
          描述: 'description',
          关键字: 'keywords'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Path: 'path',
          Title: 'title',
          Description: 'description',
          Keywords: 'keywords'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      obj['data'] = [data]
    }
    if (data && Object.prototype.toString.call(data) === '[object Object]') {
      var objHeaderMap = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          路径: 'path',
          标题: 'title',
          描述: 'description',
          关键字: 'keywords'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          Creation: '_create',
          Modification: '_update',
          Path: 'path',
          Title: 'title',
          Description: 'description',
          Keywords: 'keywords'
        }
      }
      var map = objHeaderMap[param._lang || 'zh']
      var _data = {}
      Object.keys(data).forEach(function(key) {
        if (map[key]) {
          _data[map[key]] = data[key]
        } else {
          _data[key] = data[key]
        }
      })
      obj['data'] = [_data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update',
            路径: 'path',
            标题: 'title',
            描述: 'description',
            关键字: 'keywords'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            Creation: '_create',
            Modification: '_update',
            Path: 'path',
            Title: 'title',
            Description: 'description',
            Keywords: 'keywords'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateById(_sys, node, id, data, cb) {
    var rst = []
    if (data && Array.isArray(data)) {
      var exceptKeys = ['数据ID', '提交用户', '创建时间', '更新时间']
      data.forEach(obj => {
        if (obj) {
          var rowId = obj['数据ID']
          var item = { data: [], header: [], rowId: rowId }
          for (var key in obj) {
            if (exceptKeys.indexOf(key) < 0) {
              item.header.push(key)
              item.data.push(obj[key])
            }
          }
          rst.push(item)
        }
      })
    }

    var result = _dbCmd(id, dbUpdate, { items: rst })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          路径: 'path',
          标题: 'title',
          描述: 'description',
          关键字: 'keywords'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Path: 'path',
          Title: 'title',
          Description: 'description',
          Keywords: 'keywords'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          path: '路径',
          title: '标题',
          description: '描述',
          keywords: '关键字'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          path: 'Path',
          title: 'Title',
          description: 'Description',
          keywords: 'Keywords'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbBatchInsert: function(_sys, node, id, header, data, cb) {
    if (data) {
      var param = {
        header: header,
        data: data
      }

      // 对象数组header处理
      if (header && header[0] && typeof header[0] === 'object') {
        param.header = header.map(function(head) {
          return head.title
        })
      }
      // 对象数组data处理(如果是二维数组就不处理)
      if (
        data &&
        data[0] &&
        !Array.isArray(data[0]) &&
        typeof data[0] === 'object'
      ) {
        param.data = data.map(function(dat) {
          var result = []
          param.header.forEach(function(head, index) {
            result[index] = dat[head]
          })
          return result
        })
      }

      // 处理翻译问题
      if (param.header && param.header.length > 0) {
        var colMapping = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update',
            路径: 'path',
            标题: 'title',
            描述: 'description',
            关键字: 'keywords'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update',
            Path: 'path',
            Title: 'title',
            Description: 'description',
            Keywords: 'keywords'
          }
        }
        var mapping = colMapping[param._lang || 'zh']
        param.header = param.header.map(function(head) {
          return mapping[head] ? mapping[head] : head
        })
      }

      var result = _dbCmd(
        id,
        !_sys.inTransaction ? dbBatchInsert : txBatchInsert,
        param
      )
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
      return result
    }
  },
  dbExportConsExcel: function(_sys, node, id, cons, orders, range, cb) {
    var lang = param._lang || 'zh'
    var dbHeaderMapping = {
      zh: {
        _id: '数据ID',
        _user: '提交用户',
        _create: '创建时间',
        _update: '更新时间',
        path: '路径',
        title: '标题',
        description: '描述',
        keywords: '关键字'
      },
      en: {
        _id: 'DataID',
        _user: 'Submitter',
        _create: 'CreationTime',
        _update: 'ModificationTime',
        path: 'Path',
        title: 'Title',
        description: 'Description',
        keywords: 'Keywords'
      }
    }
    var header = dbHeaderMapping[lang] || {}
    var obj = { header: header }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, dbExportExcel, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-user'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  wxMiniLogin: function(
    _sys,
    node,
    id,
    code,
    iv,
    encryptedData,
    userType,
    loginType,
    shouldGetInfo,
    cb
  ) {
    // 兼容 当cb是type的时候
    var _userType = userType
    var _loginType = loginType
    var _shouldGetInfo = shouldGetInfo
    var _cb = cb
    if (arguments.length === 7 && typeof _userType === 'function') {
      _cb = _userType
      _shouldGetInfo = true
      _loginType = undefined
      _userType = undefined
    } else if (arguments.length === 8 && typeof loginType === 'function') {
      _cb = _loginType
      _shouldGetInfo = true
      _loginType = undefined
    } else if (arguments.length === 9 && typeof _shouldGetInfo === 'function') {
      _cb = _shouldGetInfo
      _shouldGetInfo = _loginType
      _loginType = undefined
    }
    if (_shouldGetInfo === undefined) {
      _shouldGetInfo = true
    }
    var union = _loginType === 'unionid'
    var obj = {
      code: code,
      iv: iv,
      encryptedData: encryptedData,
      userType: _userType,
      union: union
    }
    if (!_shouldGetInfo) {
      obj = {
        code: code,
        userType: _userType,
        union: union
      }
    }
    obj['mini'] = true
    var result = _dbCmd(id, wxLogin, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  bindMiniAccount: function(_sys, node, id, name, code, cb) {
    var obj = {}
    obj['nid'] = param._nid
    if (name) {
      obj['name'] = name
    }
    if (code) {
      obj['code'] = code
    }
    obj['mini'] = true
    obj['accountType'] = 0 // 手机
    var result = _dbCmd(id, bindAccount, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  wxLogin: function(_sys, node, id, code, userType, loginType, maxAge, cb) {
    // 兼容 当cb是type的时候
    var _userType = userType
    var _loginType = loginType
    var _maxAge = maxAge
    var _cb = cb
    if (arguments.length === 5 && typeof _userType === 'function') {
      _cb = _userType
      _userType = undefined
    } else if (arguments.length === 6 && typeof _loginType === 'function') {
      _cb = _loginType
      _loginType = undefined
    } else if (arguments.length === 7 && typeof _maxAge === 'function') {
      _cb = _maxAge
      _maxAge = undefined
    }
    var union = _loginType === 'unionid'
    var obj = {
      code: code,
      userType: _userType,
      union: union,
      maxAge: _maxAge
    }
    var result = _dbCmd(id, wxLogin, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  wxScanLogin: function(_sys, node, id, code, userType, loginType, maxAge, cb) {
    var _loginType = loginType
    var _maxAge = maxAge
    var _cb = cb
    if (arguments.length === 6 && typeof _loginType === 'function') {
      _cb = _loginType
      _loginType = undefined
    } else if (arguments.length === 7 && typeof _maxAge === 'function') {
      _cb = _maxAge
      _maxAge = undefined
    }
    var union = _loginType === 'unionid'

    var obj = {
      code: code,
      userType: userType,
      type: 'open',
      union: union,
      maxAge: _maxAge
    }
    var result = _dbCmd(id, wxLogin, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  bindAccount: function(_sys, node, id, name, code, cb) {
    var obj = {}
    obj['nid'] = param._nid
    if (name) {
      obj['name'] = name
    }
    if (code) {
      obj['code'] = code
    }
    obj['accountType'] = 0 // 手机
    var result = _dbCmd(id, bindAccount, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  login: function(_sys, node, id, name, password, maxAge, cb) {
    var obj = {}
    var _maxAge = maxAge
    var _cb = cb
    if (arguments && arguments.length === 6) {
      var _maxAge = undefined
      var _cb = maxAge
    }
    obj['nid'] = param._nid
    if (name) {
      obj['name'] = name + '' //手机号和密码默认转成字符串
    }
    if (password) {
      obj['password'] = password + '' //手机号和密码默认转成字符串
    }
    if (_maxAge) {
      obj['maxAge'] = _maxAge
    }
    obj['accountType'] = 0 // 手机
    var result = _dbCmd(id, login, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  codeLogin: function(_sys, node, id, name, code, maxAge, cb) {
    var obj = {}
    var _maxAge = maxAge
    var _cb = cb
    if (arguments && arguments.length === 6) {
      var _maxAge = undefined
      var _cb = maxAge
    }
    obj['nid'] = param._nid
    if (name) {
      obj['name'] = name
    }
    obj['code'] = code || ''
    if (_maxAge) {
      obj['maxAge'] = _maxAge
    }
    obj['accountType'] = 0 // 手机
    var result = _dbCmd(id, login, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  mailLogin: function(_sys, node, id, name, password, maxAge, cb) {
    var obj = {}
    var _maxAge = maxAge
    var _cb = cb
    if (arguments && arguments.length === 6) {
      var _maxAge = undefined
      var _cb = maxAge
    }
    obj['nid'] = param._nid
    if (name) {
      obj['name'] = name
    }
    if (password) {
      obj['password'] = password
    }
    if (_maxAge) {
      obj['maxAge'] = _maxAge
    }
    obj['accountType'] = 1 // 邮箱
    var result = _dbCmd(id, login, obj)
    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  idLogin: function(_sys, node, id, dataId, maxAge, cb) {
    var obj = {}
    var _maxAge = maxAge
    var _cb = cb
    if (arguments && arguments.length === 5) {
      var _maxAge = undefined
      var _cb = maxAge
    }
    obj['nid'] = param._nid
    if (dataId) {
      obj['id'] = dataId
    }
    if (_maxAge) {
      obj['maxAge'] = _maxAge
    }
    var result = _dbCmd(id, idLogin, obj)

    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  qqLogin: function(_sys, node, id, code, userType, cb) {
    var _userType = userType
    var _cb = cb

    var obj = {
      code: code,
      userType: _userType
    }

    var result = _dbCmd(id, qqLogin, obj)

    if (_cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  welinkLogin: function(_sys, _, id, code, userType, cb) {
    if (!code) {
      cb &&
        cb('fail', {
          result: {
            detail: 'Missing auth code.'
          }
        })
      return
    }
    var obj = {}
    obj['nid'] = param._nid
    obj['code'] = code
    obj['userType'] = userType
    obj['accountType'] = 6
    var result = _dbCmd(id, welinkLogin, obj)
    if (cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getPlayer: function(_sys, node, id, cb) {
    var obj = { full: true } // 获取详细信息
    var result
    // 测试模式: 内部使用
    if (param._ivxTest === 1) {
      result = _ivxTestGetPlayer({ id, obj })
    } else {
      result = _dbCmd(id, getPlayer, obj)
    }

    if (cb) {
      if (result && result.status === 0) {
        if (result.result && result.result.banned === null) {
          // banned字段原始值为null时,输出转为false
          result.result.banned = false
        }
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  sendImageCaptcha: function(_sys, node, id, cb) {
    var result = _dbCmd(id, sendImageCaptcha)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  sendPhoneCaptcha: function(
    _sys,
    node,
    id,
    imgToken,
    code,
    phone,
    type,
    skipCode,
    cb
  ) {
    if (arguments.length === 8) {
      cb = skipCode
      skipCode = false
    }
    var _type = '注册验证'
    if (type === 'resetPwd') {
      _type = '变更验证'
    } else if (type === 'login' || type === 'binding') {
      _type = '身份验证'
    }
    var obj = { type: _type, isVoice: false }
    if (imgToken) {
      obj['token'] = imgToken.toString()
    }
    if (code || code === 0) {
      obj['code'] = code.toString()
    }
    if (phone) {
      obj['username'] = phone.toString()
    }
    if (skipCode) {
      obj['skipCode'] = skipCode
    }
    // 兼容
    if (type && typeof type === 'function' && cb === undefined) {
      cb = type
    }
    obj['accountType'] = 0
    var result = _dbCmd(id, sendAccountCaptcha, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  sendMailCaptcha: function(_sys, node, id, imgToken, code, mail, type, cb) {
    var _type = type === 'resetPwd' ? '变更验证' : '注册验证'
    var obj = { type: _type, isVoice: false }
    if (imgToken) {
      obj['token'] = imgToken
    }
    if (code) {
      obj['code'] = code
    }
    if (mail) {
      obj['username'] = mail
    }
    // 兼容
    if (type && typeof type === 'function' && cb === undefined) {
      cb = type
    }
    obj['accountType'] = 1 // 邮箱
    var result = _dbCmd(id, sendAccountCaptcha, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  signUp: function(
    _sys,
    node,
    id,
    username,
    phoneCaptcha,
    nickName,
    password,
    userType,
    cb
  ) {
    var obj = {}
    // 兼容 当cb是type的时候
    var _userType = userType
    var _cb = cb
    if (arguments.length === 8 && typeof _userType === 'function') {
      _cb = _userType
      _userType = undefined
    }
    obj['nid'] = param._nid
    if (username) {
      obj['username'] = username
    }
    if (phoneCaptcha) {
      obj['phoneCaptcha'] = phoneCaptcha
    }
    if (nickName) {
      obj['nickName'] = nickName
    }
    if (password) {
      obj['password'] = password
    }
    if (_userType !== undefined) {
      obj['userType'] = _userType
    }
    obj['accountType'] = 0 // 手机
    var result = _dbCmd(id, signUp, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  mailSignUp: function(
    _sys,
    node,
    id,
    username,
    phoneCaptcha,
    nickName,
    password,
    userType,
    cb
  ) {
    var obj = {}
    // 兼容 当cb是type的时候
    var _userType = userType
    var _cb = cb
    if (arguments.length === 8 && typeof _userType === 'function') {
      _cb = _userType
      _userType = undefined
    }
    obj['nid'] = param._nid
    if (username) {
      obj['username'] = username
    }
    if (phoneCaptcha) {
      obj['phoneCaptcha'] = phoneCaptcha
    }
    if (nickName) {
      obj['nickName'] = nickName
    }
    if (password) {
      obj['password'] = password
    }
    if (_userType !== undefined) {
      obj['userType'] = _userType
    }
    obj['accountType'] = 1 // 邮箱
    var result = _dbCmd(id, signUp, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  resetPwd: function(_sys, node, id, phoneNum, phoneCaptcha, newPassword, cb) {
    var obj = {}
    obj['nid'] = param._nid
    if (phoneNum) {
      obj['username'] = phoneNum
    }
    if (phoneCaptcha) {
      obj['phoneCaptcha'] = phoneCaptcha
    }
    if (newPassword) {
      obj['password'] = newPassword
    }
    obj['accountType'] = 0 // 手机
    var result = _dbCmd(id, resetPwd, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  mailResetPwd: function(_sys, node, id, mail, mailCaptcha, newPassword, cb) {
    var obj = {}
    obj['nid'] = param._nid
    if (mail) {
      obj['username'] = mail
    }
    if (mailCaptcha) {
      obj['phoneCaptcha'] = mailCaptcha
    }
    if (newPassword) {
      obj['password'] = newPassword
    }
    obj['accountType'] = 1 // 邮箱
    var result = _dbCmd(id, resetPwd, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  logout: function(_sys, node, id, cb) {
    var result = _dbCmd(id, logout)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      // obj['conditions'] = _dealCons(_cons)
      var consTemp = _dealCons(_cons)
      // cons中banned条件为等于false时,需要进行处理,兼容null的情况
      if (consTemp && consTemp.length > 0) {
        var bIndex = []
        var additionalCons = []
        consTemp.forEach(function(con, index) {
          if (
            con.column === 'banned' &&
            con.comp === 'eq' &&
            con.value === false
          ) {
            bIndex.push(index)
          }
        })
        if (bIndex.length > 0) {
          bIndex.forEach(function(index) {
            var temp = []
            if (consTemp[index]['pred'] === 'and') {
              if (index === 0) {
                for (var i = index + 1; i < consTemp.length; i++) {
                  if (consTemp[i]['pred'] === 'and') {
                    temp.push(JSON.parse(JSON.stringify(consTemp[i])))
                  } else {
                    break
                  }
                }
              } else {
                for (var i = index - 1; i >= 0; i--) {
                  temp.push(JSON.parse(JSON.stringify(consTemp[i])))
                  temp[temp.length - 1]['pred'] = 'and'
                  if (consTemp[i]['pred'] === 'or') {
                    break
                  }
                }
                for (var i = index + 1; i < consTemp.length; i++) {
                  if (consTemp[i]['pred'] === 'and') {
                    temp.push(JSON.parse(JSON.stringify(consTemp[i])))
                  } else {
                    break
                  }
                }
              }
            } else if (consTemp[index]['pred'] === 'or') {
              for (var i = index + 1; i < consTemp.length; i++) {
                if (consTemp[i]['pred'] === 'and') {
                  temp.push(JSON.parse(JSON.stringify(consTemp[i])))
                } else {
                  break
                }
              }
            }
            temp.unshift({
              pred: 'or',
              column: 'banned',
              comp: 'eq',
              value: null
            })
            additionalCons = additionalCons.concat(temp)
          })
        }
        if (additionalCons.length > 0) {
          consTemp = consTemp.concat(additionalCons)
        }
      }
      obj['conditions'] = consTemp
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          用户ID: '_id',
          手机号: '_user',
          创建时间: '_create',
          更新时间: '_update',
          昵称: 'nick',
          被屏蔽: 'banned',
          用户类型: 'user_type',
          登录类型: 'account_type',
          密码: 'password',
          openid: 'openid',
          unionid: 'unionid',
          邮箱地址: 'email',
          头像: 'headimgurl'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Nickname: 'nick',
          Blocked: 'banned',
          User_Type: 'user_type',
          Account_Type: 'account_type',
          Password: 'password',
          Openid: 'openid',
          Unionid: 'unionid',
          Email: 'email',
          Avatar: 'headimgurl'
        }
      }
      var mapping = colMapping[$sys.lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[$sys.lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          if (result.result && result.result.columns) {
            // banned字段原始值为null时,输出转为false
            var columns = result.result.columns
            var bannedIndex
            for (var i = 0; i < columns.length; i++) {
              if (columns[i]['name'] === 'banned') {
                bannedIndex = i
                break
              }
            }
            var data = result.result.data
            data.forEach((item, index) => {
              if (item[bannedIndex] === null) {
                data[index][bannedIndex] = false
              }
            })
          }
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbSmartSearch: function(
    _sys,
    node,
    id,
    query,
    searchRange,
    minMatch,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = { query: query }
    var _searchRange = searchRange
    var _minMatch = minMatch
    var dbCons = cons
    var _orders = orders
    var _range = range
    var _cols = cols
    var _cb = cb
    if (arguments && arguments.length === 10) {
      _cb = _cols
      _cols = _range
      _range = _orders
      _orders = dbCons
      dbCons = _minMatch
      _minMatch = _searchRange
      _searchRange = undefined
    }
    if (_minMatch !== undefined) {
      if (!isNaN(_minMatch)) {
        _minMatch += ''
      }
      obj['minimumShouldMatch'] = _minMatch
    }
    if (_searchRange) {
      var multiQuery = { text: query, boostFields: _searchRange }
      if (obj['minimumShouldMatch']) {
        multiQuery.minimumShouldMatch = obj['minimumShouldMatch']
        delete obj['minimumShouldMatch']
      }
      delete obj.query
      obj.multiQueries = [multiQuery]
    }
    if (dbCons) {
      var _cons = []
      dbCons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_orders) {
      obj['orders'] = _orders
    }
    if (_range) {
      if (_range.offset) {
        obj['offset'] = _range.offset
      }
      if (_range.limit) {
        obj['limit'] = _range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          用户ID: '_id',
          手机号: '_user',
          创建时间: '_create',
          更新时间: '_update',
          昵称: 'nick',
          被屏蔽: 'banned',
          用户类型: 'user_type',
          登录类型: 'account_type',
          密码: 'password',
          openid: 'openid',
          unionid: 'unionid',
          邮箱地址: 'email',
          头像: 'headimgurl'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Nickname: 'nick',
          Blocked: 'banned',
          User_Type: 'user_type',
          Account_Type: 'account_type',
          Password: 'password',
          Openid: 'openid',
          Unionid: 'unionid',
          Email: 'email',
          Avatar: 'headimgurl'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbCustomizeSearch: function(
    _sys,
    node,
    id,
    queries,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb
    obj.multiQueries = queries
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          用户ID: '_id',
          手机号: '_user',
          创建时间: '_create',
          更新时间: '_update',
          昵称: 'nick',
          被屏蔽: 'banned',
          用户类型: 'user_type',
          登录类型: 'account_type',
          密码: 'password',
          openid: 'openid',
          unionid: 'unionid',
          邮箱地址: 'email',
          头像: 'headimgurl'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Nickname: 'nick',
          Blocked: 'banned',
          User_Type: 'user_type',
          Account_Type: 'account_type',
          Password: 'password',
          Openid: 'openid',
          Unionid: 'unionid',
          Email: 'email',
          Avatar: 'headimgurl'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }

          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }

    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }

    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)

    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }

    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateById: function(_sys, node, id, data, cb) {
    var rst = []
    if (data && Array.isArray(data)) {
      var exceptKeys = [
        'id',
        '_id',
        '数据ID',
        '用户ID',
        '提交用户',
        '创建时间',
        '更新时间',
        'DataID',
        'Submitter',
        'CreationTime',
        'ModificationTime'
      ]
      var colMapping = {
        zh: {
          用户ID: '_id',
          手机号: '_user',
          创建时间: '_create',
          更新时间: '_update',
          昵称: 'nick',
          被屏蔽: 'banned',
          用户类型: 'user_type',
          登录类型: 'account_type',
          密码: 'password',
          openid: 'openid',
          unionid: 'unionid',
          邮箱地址: 'email',
          头像: 'headimgurl'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Nickname: 'nick',
          Blocked: 'banned',
          User_Type: 'user_type',
          Account_Type: 'account_type',
          Password: 'password',
          Openid: 'openid',
          Unionid: 'unionid',
          Email: 'email',
          Avatar: 'headimgurl'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      data.forEach(function(obj) {
        if (obj) {
          var rowId =
            obj['用户ID'] ||
            obj['数据ID'] ||
            obj['DataID'] ||
            obj['_id'] ||
            obj['id']
          var item = { data: [], header: [], rowId: rowId }
          for (var key in obj) {
            if (exceptKeys.indexOf(key) < 0) {
              var _key = mapping[key] || key
              item.header.push(_key)
              item.data.push(obj[key])
            }
          }
          rst.push(item)
        }
      })
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: rst
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }

    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          用户ID: '_id',
          手机号: '_user',
          创建时间: '_create',
          更新时间: '_update',
          昵称: 'nick',
          被屏蔽: 'banned',
          用户类型: 'user_type',
          登录类型: 'account_type',
          密码: 'password',
          openid: 'openid',
          unionid: 'unionid',
          邮箱地址: 'email',
          头像: 'headimgurl'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Nickname: 'nick',
          Blocked: 'banned',
          User_Type: 'user_type',
          Account_Type: 'account_type',
          Password: 'password',
          Openid: 'openid',
          Unionid: 'unionid',
          Email: 'email',
          Avatar: 'headimgurl'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })

      obj['conditions'] = _processBannedItem(_dealCons(_cons))
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '用户ID',
          // '手机号',
          // '密码',
          // 'openid',
          // 'unionid',
          // '邮箱地址',
          // '昵称',
          // '头像',
          // '被屏蔽',
          // '用户类型',
          // '登录类型',
          '创建时间',
          '更新时间',
          'DataID',
          // 'Submitter',
          'CreationTime',
          'ModificationTime'
          // 'Nickname',
          // 'Blocked',
          // 'User_Type',
          // 'Account_Type',
          // 'Password',
          // 'Openid',
          // 'Unionid',
          // 'Email',
          // 'Avatar'
        ]
        var objHeaderMap = {
          zh: {
            用户ID: '_id',
            手机号: '_user',
            创建时间: '_create',
            更新时间: '_update',
            昵称: 'nick',
            被屏蔽: 'banned',
            用户类型: 'user_type',
            登录类型: 'account_type',
            密码: 'password',
            openid: 'openid',
            unionid: 'unionid',
            邮箱地址: 'email',
            头像: 'headimgurl'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update',
            Nickname: 'nick',
            Blocked: 'banned',
            User_Type: 'user_type',
            Account_Type: 'account_type',
            Password: 'password',
            Openid: 'openid',
            Unionid: 'unionid',
            Email: 'email',
            Avatar: 'headimgurl'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }

    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '用户ID',
          _user: '手机号',
          _create: '创建时间',
          _update: '更新时间',
          nick: '昵称',
          banned: '被屏蔽',
          _nick: '昵称',
          _banned: '被屏蔽',
          user_type: '用户类型',
          account_type: '登录类型',
          password: '密码',
          openid: 'openid',
          unionid: 'unionid',
          email: '邮箱地址',
          headimgurl: '头像'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          nick: 'Nickname',
          banned: 'Blocked',
          user_type: 'User_Type',
          account_type: 'Account_Type',
          _nick: 'Nickname',
          _banned: 'Blocked',
          password: 'Password',
          openid: 'Openid',
          unionid: 'Unionid',
          email: 'Email',
          headimgurl: 'Avatar'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var dbHeaderMapping = {
      zh: {
        _id: '用户ID',
        _user: '手机号',
        _create: '创建时间',
        _update: '更新时间',
        nick: '昵称',
        banned: '被屏蔽',
        _nick: '昵称',
        _banned: '被屏蔽',
        user_type: '用户类型',
        account_type: '登录类型',
        password: '密码',
        openid: 'openid',
        unionid: 'unionid',
        email: '邮箱地址',
        headimgurl: '头像'
      },
      en: {
        _id: 'DataID',
        _user: 'Submitter',
        _create: 'CreationTime',
        _update: 'ModificationTime',
        nick: 'Nickname',
        banned: 'Blocked',
        user_type: 'User_Type',
        account_type: 'Account_Type',
        _nick: 'Nickname',
        _banned: 'Blocked',
        password: 'Password',
        openid: 'Openid',
        unionid: 'Unionid',
        email: 'Email',
        headimgurl: 'Avatar'
      }
    }
    var mapping = dbHeaderMapping[param._lang || 'zh']
    var obj = {}
    if (data) {
      var keys = Object.keys(mapping)
      var vals = Object.values(mapping)
      var _data = {}
      if (data instanceof Object) {
        Object.keys(data).forEach(k => {
          var i = vals.indexOf(k)
          _data[i >= 0 ? keys[i] : k] = data[k]
        })
      }
      obj['data'] = [_data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      result.result.mapping = mapping
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbBatchInsert: function(_sys, node, id, header, data, cb) {
    if (data) {
      var param = {
        header: header,
        data: data
      }

      // 对象数组header处理
      if (header && header[0] && typeof header[0] === 'object') {
        param.header = header.map(function(head) {
          return head.title
        })
      }
      // 对象数组data处理(如果是二维数组就不处理)
      if (
        data &&
        data[0] &&
        !Array.isArray(data[0]) &&
        typeof data[0] === 'object'
      ) {
        param.data = data.map(function(dat) {
          var result = []
          param.header.forEach(function(head, index) {
            result[index] = dat[head]
          })
          return result
        })
      }

      // 处理翻译问题
      if (param.header && param.header.length > 0) {
        var colMapping = {
          zh: {
            用户ID: '_id',
            手机号: '_user',
            创建时间: '_create',
            更新时间: '_update',
            昵称: 'nick',
            被屏蔽: 'banned',
            用户类型: 'user_type',
            登录类型: 'account_type',
            密码: 'password',
            openid: 'openid',
            unionid: 'unionid',
            邮箱地址: 'email',
            头像: 'headimgurl'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update',
            Nickname: 'nick',
            Blocked: 'banned',
            User_Type: 'user_type',
            Account_Type: 'account_type',
            Password: 'password',
            Openid: 'openid',
            Unionid: 'unionid',
            Email: 'email',
            Avatar: 'headimgurl'
          }
        }
        var mapping = colMapping[param._lang || 'zh']
        param.header = param.header.map(function(head) {
          return mapping[head] ? mapping[head] : head
        })
      }

      var result = _dbCmd(
        id,
        !_sys.inTransaction ? dbBatchInsert : txBatchInsert,
        param
      )
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
      return result
    }
  },
  refreshToken: function(_sys, node, id, delayExpired, cb) {
    var obj = {}

    if (delayExpired) {
      obj['delayExpired'] = delayExpired * 3600
    }

    var result = _dbCmd(id, refreshToken, obj)

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }

    return result
  }
}
$funcs['data-login'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  wxMiniLogin: function(_sys, node, id, code, iv, encryptedData, userType, cb) {
    // 兼容 当cb是type的时候
    if (userType && typeof userType === 'function' && cb === undefined) {
      cb = userType
      userType = undefined
    }
    var obj = {
      code: code,
      iv: iv,
      encryptedData: encryptedData,
      userType: userType
    }
    obj['mini'] = true
    var result = _curLoginCmd(wxLogin, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  wxLogin: function(_sys, node, id, code, userType, cb) {
    // 兼容 当cb是type的时候
    if (userType && typeof userType === 'function' && cb === undefined) {
      cb = userType
      userType = undefined
    }
    var obj = { code: code, userType: userType }
    var result = _curLoginCmd(wxLogin, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  login: function(_sys, node, id, name, password, cb) {
    var obj = {}
    obj['nid'] = param._nid
    if (name) {
      obj['name'] = name
    }
    if (password) {
      obj['password'] = password
    }
    obj['accountType'] = 0 // 手机
    var result = _curLoginCmd(login, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getPlayer: function(_sys, node, id, cb) {
    var obj = { full: true } // 获取详细信息
    var result = _curLoginCmd(getPlayer, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  sendImageCaptcha: function(_sys, node, id, cb) {
    var result = _curLoginCmd(sendImageCaptcha)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  sendPhoneCaptcha: function(_sys, node, id, imgToken, code, phone, type, cb) {
    var _type = type === 'resetPwd' ? '变更验证' : '注册验证'
    var obj = { type: _type, isVoice: false }
    if (imgToken) {
      obj['token'] = imgToken.toString()
    }
    if (code || code === 0) {
      obj['code'] = code.toString()
    }
    if (phone) {
      obj['username'] = phone.toString()
    }
    // 兼容
    if (type && typeof type === 'function' && cb === undefined) {
      cb = type
    }
    obj['accountType'] = 0 // 手机
    var result = _curLoginCmd(sendAccountCaptcha, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  signUp: function(
    _sys,
    node,
    id,
    username,
    phoneCaptcha,
    nickName,
    password,
    userType,
    cb
  ) {
    var obj = {}
    // 兼容 当cb是type的时候
    if (userType && typeof userType === 'function' && cb === undefined) {
      cb = userType
      userType = undefined
    }
    obj['nid'] = param._nid
    if (username) {
      obj['username'] = username
    }
    if (phoneCaptcha) {
      obj['phoneCaptcha'] = phoneCaptcha
    }
    if (nickName) {
      obj['nickName'] = nickName
    }
    if (password) {
      obj['password'] = password
    }
    if (userType !== undefined) {
      obj['userType'] = userType
    }
    obj['accountType'] = 0 // 手机
    var result = _curLoginCmd(signUp, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  resetPwd: function(_sys, node, id, phoneNum, phoneCaptcha, newPassword, cb) {
    var obj = {}
    obj['nid'] = param._nid
    if (phoneNum) {
      obj['username'] = phoneNum
    }
    if (phoneCaptcha) {
      obj['phoneCaptcha'] = phoneCaptcha
    }
    if (newPassword) {
      obj['password'] = newPassword
    }
    var result = _curLoginCmd(resetPwd, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  logout: function(_sys, node, id, cb) {
    var result = _curLoginCmd(logout)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSelect: function(_sys, node, id, cons, orders, range, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _curLoginCmd(!_sys.inTransaction ? dbSelect : txSelect, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _curLoginCmd(!_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    var result = _curLoginCmd(
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-mall'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  dbSelectProduct: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          商品名称: 'name',
          缩略图: 'thumbnail',
          创建时间: '_create',
          更新时间: '_update',
          规格: 'sku_name',
          价格: 'sku_price',
          库存: 'sku_stock',
          规格图: 'sku_picture',
          商品详情: 'detail',
          提交用户: '_user'
        },
        en: {
          DataID: '_id',
          Product_Name: 'name',
          Product_Pic: 'thumbnail',
          CreationTime: '_create',
          ModificationTime: '_update',
          Specification: 'sku_name',
          Price: 'sku_price',
          Storage: 'sku_stock',
          Thumbnail: 'sku_picture',
          Detail: 'detail',
          Submitter: '_user'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupByProduct: function(
    _sys,
    node,
    id,
    cons,
    cols,
    groups,
    orders,
    range,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbInsertProduct: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbUpdateProduct: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }

          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }

    if (updates) {
      obj['updates'] = updates
    }

    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }

    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )

    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }

    return result
  },
  dbDeleteProduct: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }

          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }

    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }

    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)

    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }

    return result
  },
  addToCart: function(_sys, node, id, productId, skuIndex, num, customs, cb) {
    var obj = {}
    var _cb = cb
    var _customs = customs

    if (arguments && arguments.length === 7) {
      _cb = _customs
      _customs = undefined
    }
    if (productId !== undefined && skuIndex !== undefined && num) {
      obj = {
        productId: productId,
        skuIndex: skuIndex,
        num: num,
        customs: _customs
      }
      var result = _dbCmd(id, mallAddToCart, obj)
      if (_cb) {
        if (result && result.status === 0) {
          _cb('success', result)
        } else {
          _cb('fail', result)
        }
      }
      return result
    }
  },
  editCart: function(_sys, node, id, cartId, num, cb) {
    var obj = {}
    if (cartId !== undefined && num) {
      obj['rows'] = [
        {
          id: cartId,
          num: num
        }
      ]
      var result = _dbCmd(id, mallEditCart, obj)
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
      return result
    }
  },
  listCart: function(_sys, node, id, cons, orders, range, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, mallListCart, obj)
    if (result && result.status === 0) {
      var dbHeaderMapping = {
        zh: {
          Create: '创建时间',
          Id: '数据ID',
          Num: '数量',
          ProductId: '商品编号',
          ProductName: '商品名称',
          ProductThumbnail: '缩略图',
          SkuIndex: '规格序号',
          SkuName: '规格',
          SkuPicture: '规格图',
          SkuPrice: '价格',
          SkuStock: '库存'
        },
        en: {
          Create: 'Creation',
          Id: 'DataID',
          Num: 'Quantity',
          ProductId: 'Product_ID',
          ProductName: 'Product_Name',
          ProductThumbnail: 'Product_Pic',
          SkuIndex: 'SpecID',
          SkuName: 'Specification',
          SkuPicture: 'Thumbnail',
          SkuPrice: 'Price',
          SkuStock: 'Storage'
        }
      }
      if (result.result) {
        if (Array.isArray(result.result)) {
          result.result = { data: result.result }
        }
      } else {
        result.result = { data: [] }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  deleteFromCart: function(_sys, node, id, cartId, cb) {
    if (cartId === undefined) {
      return
    }
    var obj = {}
    obj['rowIds'] = [cartId]
    var result = _dbCmd(id, mallDeleteFromCart, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  delIdsFromCart: function(_sys, node, id, cartIds, cb) {
    if (!Array.isArray(cartIds)) {
      return
    }
    var obj = {}
    obj['rowIds'] = cartIds

    var result = _dbCmd(id, mallDeleteFromCart, obj)

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  clearCart: function(_sys, node, id, cb) {
    var obj = {}
    var result = _dbCmd(id, mallClearCart, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  submitOrder: function(
    _sys,
    node,
    id,
    cartIds,
    tradeType,
    receiver,
    contact,
    address,
    comment,
    customs,
    cb
  ) {
    var obj = {
      cartIds: cartIds,
      address: address,
      payProvider: 'wxpay',
      tradeType: tradeType || 'JSAPI',
      receiver: receiver,
      contact: contact,
      comment: comment
    }
    var _customs = customs
    var _cb = cb

    if (arguments && arguments.length === 10) {
      _cb = _customs
      _customs = undefined
    }

    if (_customs) {
      obj.customs = _customs
    }
    var result = _dbCmd(id, mallSubmitOrder, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  shipProduct: function(_sys, node, id, tradeNo, express, expressNo, cb) {
    var obj = {
      tradeNo: tradeNo,
      express: express,
      expressNo: expressNo
    }
    var result = _dbCmd(id, mallShipProduct, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  completeOrder: function(_sys, node, id, tradeNo, cb) {
    var obj = {
      tradeNo: tradeNo,
      status: 10
    }
    var result = _dbCmd(id, mallUpdateOrderStatus, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  cancelOrder: function(_sys, node, id, tradeNo, cb) {
    var obj = {
      tradeNo: tradeNo
    }
    var result = _dbCmd(id, mallCancelOrder, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  delOrder: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }

    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }

    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDelete : txDelete,
      obj,
      'order'
    )

    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }

    return result
  },
  dbSelectOrder: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          订单号: 'trade_no',
          第三方订单号: 'out_trade_no',
          总价: 'amount',
          联系方式: 'contact',
          收件人: 'receiver',
          地址: 'address',
          状态码: 'status',
          状态: 'status_desc',
          快递: 'express',
          快递单号: 'express_no',
          交易方式: 'pay_provider',
          交易类型: 'trade_type',
          交易时间: 'trade_time',
          备注: 'comment'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Order_ID: 'trade_no',
          Third_Party_Order_ID: 'out_trade_no',
          Total_Price: 'amount',
          Contact: 'contact',
          Recipient: 'receiver',
          Address: 'address',
          Status: 'status',
          Status_Desc: 'status_desc',
          Express: 'express',
          Express_No: 'express_no',
          Transaction_Method: 'pay_provider',
          Transaction_Type: 'trade_type',
          Transaction_Time: 'trade_time',
          Remark: 'comment'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbSelect : txSelect,
      obj,
      'order'
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupByOrder: function(
    _sys,
    node,
    id,
    cons,
    cols,
    groups,
    orders,
    range,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  listOrder: function(_sys, node, id, cons, orders, range, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, mallListOrder, obj)
    if (result && result.status === 0) {
      var dbHeaderMapping = {
        zh: {
          address: '地址',
          amount: '总价',
          comment: '备注',
          contact: '联系方式',
          detail: '商品详情',
          product_id: '商品ID',
          product_name: '商品名称',
          product_thumbnail: '缩略图',
          sku_index: '规格序号',
          sku_name: '规格',
          sku_number: '数量',
          sku_picture: '规格图',
          sku_price: '价格',
          trade_no: '订单号',
          _create: '创建时间',
          _id: '数据ID',
          _update: '更新时间',
          _user: '提交用户',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          receiver: '收件人',
          status: '状态码',
          status_desc: '状态',
          trade_type: '交易类型'
        },
        en: {
          address: 'Address',
          amount: 'Total_Price',
          comment: 'Remark',
          contact: 'Contact',
          detail: 'Detail',
          product_id: 'Product_ID',
          product_name: 'Product_Name',
          product_thumbnail: 'Product_Pic',
          sku_index: 'specID',
          sku_name: 'Specification',
          sku_number: 'Quantity',
          sku_picture: 'Thumbnail',
          sku_price: 'Price',
          trade_no: 'Order_ID',
          _create: 'CreationTime',
          _id: 'DataID',
          _update: 'ModificationTime',
          _user: 'Submitter',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          receiver: 'Recipient',
          status: 'Status',
          status_desc: 'Status_Desc',
          trade_type: 'Transaction_Type'
        }
      }
      if (result.result) {
        if (Array.isArray(result.result)) {
          result.result = { data: result.result }
        }
      } else {
        result.result = { data: [] }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  listPureOrder: function(_sys, node, id, cons, orders, range, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, mallListOrder, obj)
    if (result && result.status === 0) {
      var dbHeaderMapping = {
        zh: {
          address: '地址',
          amount: '总价',
          comment: '备注',
          contact: '联系方式',
          product_id: '商品ID',
          product_name: '商品名称',
          product_thumbnail: '缩略图',
          sku_index: '规格序号',
          sku_name: '规格',
          sku_number: '数量',
          sku_picture: '规格图',
          sku_price: '价格',
          trade_no: '订单号',
          _create: '创建时间',
          _id: '数据ID',
          _update: '更新时间',
          _user: '提交用户',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          receiver: '收件人',
          status: '状态码',
          status_desc: '状态',
          trade_type: '交易类型'
        },
        en: {
          address: 'Address',
          amount: 'Total_Price',
          comment: 'Remark',
          contact: 'Contact',
          product_id: 'Product_ID',
          product_name: 'Product_Name',
          product_thumbnail: 'Product_Pic',
          sku_index: 'specID',
          sku_name: 'Specification',
          sku_number: 'Quantity',
          sku_picture: 'Thumbnail',
          sku_price: 'Price',
          trade_no: 'Order_ID',
          _create: 'CreationTime',
          _id: 'DataID',
          _update: 'ModificationTime',
          _user: 'Submitter',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          receiver: 'Recipient',
          status: 'Status',
          status_desc: 'Status_Desc',
          trade_type: 'Transaction_Type'
        }
      }
      if (result.result) {
        if (Array.isArray(result.result)) {
          result.result = { data: result.result }
        }
      } else {
        result.result = { data: [] }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
      if (result.result.data) {
        result.result.data.forEach(function(item) {
          delete item.detail
        })
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getOrderDetail: function(_sys, node, id, tradeNo, isAdmin, cb) {
    var obj = {
      tradeNo: tradeNo,
      isAdmin: isAdmin
    }
    var result = _dbCmd(id, mallGetOrderDetail, obj)
    if (result && result.status === 0) {
      var dbHeaderMapping = {
        zh: {
          productId: '商品编号',
          productName: '商品名称',
          skuIndex: '规格序号',
          skuName: '规格',
          skuNumber: '数量',
          skuPicture: '规格图',
          skuPrice: '价格'
        },
        en: {
          productId: 'Product_ID',
          productName: 'Product_Name',
          skuIndex: 'specID',
          skuName: 'Specification',
          skuNumber: 'Quantity',
          skuPicture: 'Thumbnail',
          skuPrice: 'Price'
        }
      }
      if (result.result) {
        if (Array.isArray(result.result)) {
          result.result = { data: result.result }
        }
      } else {
        result.result = { data: [] }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getOrderStatus: function(_sys, node, id, tradeNo, cb) {
    var obj = {
      tradeNo: tradeNo
    }
    var result = _dbCmd(id, mallGetOrderStatus, obj)
    if (cb) {
      if (!(result && result.status === 0)) {
        cb('fail', result)
        return result
      }
    }
    var result2 = _dbCmd(id, mallGetOrderDetail, obj)
    if (result2 && result2.status === 0) {
      var dbHeaderMapping = {
        zh: {
          productId: '商品编号',
          productName: '商品名称',
          skuIndex: '规格序号',
          skuName: '规格',
          skuNumber: '数量',
          skuPicture: '规格图',
          skuPrice: '价格'
        },
        en: {
          productId: 'Product_ID',
          productName: 'Product_Name',
          skuIndex: 'specID',
          skuName: 'Specification',
          skuNumber: 'Quantity',
          skuPicture: 'Thumbnail',
          skuPrice: 'Price'
        }
      }
      try {
        result2.result = { data: JSON.parse(result2.result) }
        if (!Array.isArray(result2.result.data)) {
          result2.result = { data: [] }
        }
      } catch (e) {
        result2.result = { data: [] }
      }
      result2.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result2 = JSON.parse(JSON.stringify(result2))
    }
    var final = undefined
    if (result2 && result2.status === 0) {
      final = {
        result: Object.assign({}, result.result, result2.result),
        status: 0
      }
    } else {
      final = result
    }
    if (cb) {
      if (final && final.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return final
  },
  payOrder: function(
    _sys,
    node,
    id,
    tradeNo,
    tradeType,
    receiver,
    contact,
    address,
    comment,
    cb
  ) {
    if (tradeNo === undefined) {
      return
    }
    s
    var obj = {
      tradeNo: tradeNo,
      address: address,
      payProvider: 'wxpay',
      tradeType: tradeType,
      receiver: receiver,
      contact: contact,
      comment: comment
    }
    var result = _dbCmd(id, mallSubmitOrder, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  payPureOrder: function(_sys, node, id, tradeNo, cb) {
    if (tradeNo === undefined) {
      return
    }
    var obj = { tradeNo: tradeNo, disableUpdate: true }
    var result = _dbCmd(id, mallSubmitOrder, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-mallProduct'] = {
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          商品名称: 'name',
          缩略图: 'thumbnail',
          创建时间: '_create',
          更新时间: '_update',
          规格: 'sku_name',
          价格: 'sku_price',
          库存: 'sku_stock',
          规格图: 'sku_picture',
          商品详情: 'detail',
          提交用户: '_user'
        },
        en: {
          DataID: '_id',
          Product_Name: 'name',
          Product_Pic: 'thumbnail',
          CreationTime: '_create',
          ModificationTime: '_update',
          Specification: 'sku_name',
          Price: 'sku_price',
          Storage: 'sku_stock',
          Thumbnail: 'sku_picture',
          Detail: 'detail',
          Submitter: '_user'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbDelete: function(_sys, node, id, rowId) {
    return _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, {
      rowId: rowId
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          商品名称: 'name',
          缩略图: 'thumbnail',
          创建时间: '_create',
          更新时间: '_update',
          规格: 'sku_name',
          价格: 'sku_price',
          库存: 'sku_stock',
          规格图: 'sku_picture',
          商品详情: 'detail',
          提交用户: '_user'
        },
        en: {
          DataID: '_id',
          Product_Name: 'name',
          Product_Pic: 'thumbnail',
          CreationTime: '_create',
          ModificationTime: '_update',
          Specification: 'sku_name',
          Price: 'sku_price',
          Storage: 'sku_stock',
          Thumbnail: 'sku_picture',
          Detail: 'detail',
          Submitter: '_user'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      var exceptKeys = [
        '数据ID',
        '提交用户',
        '创建时间',
        '更新时间',
        'DataID',
        'Submitter',
        'CreationTime',
        'ModificationTime'
      ]
      var objHeaderMap = {
        zh: {
          数据ID: '_id',
          商品名称: 'name',
          缩略图: 'thumbnail',
          创建时间: '_create',
          更新时间: '_update',
          规格: 'sku_name',
          价格: 'sku_price',
          库存: 'sku_stock',
          规格图: 'sku_picture',
          商品详情: 'detail',
          提交用户: '_user'
        },
        en: {
          DataID: '_id',
          Product_Name: 'name',
          Product_Pic: 'thumbnail',
          CreationTime: '_create',
          ModificationTime: '_update',
          Specification: 'sku_name',
          Price: 'sku_price',
          Storage: 'sku_stock',
          Thumbnail: 'sku_picture',
          Detail: 'detail',
          Submitter: '_user'
        }
      }
      var map = objHeaderMap[param._lang || 'zh']
      var item = {}
      if (Object.prototype.toString.call(data) === '[object Object]') {
        Object.keys(data).forEach(function(key) {
          if (exceptKeys.indexOf(key) < 0) {
            if (map[key]) {
              item[map[key]] = data[key]
            } else {
              item[key] = data[key]
            }
          }
        })
        obj['data'] = [item]
      } else {
        obj['data'] = [data]
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            商品名称: 'name',
            缩略图: 'thumbnail',
            创建时间: '_create',
            更新时间: '_update',
            规格: 'sku_name',
            价格: 'sku_price',
            库存: 'sku_stock',
            规格图: 'sku_picture',
            商品详情: 'detail',
            提交用户: '_user'
          },
          en: {
            DataID: '_id',
            Product_Name: 'name',
            Product_Pic: 'thumbnail',
            CreationTime: '_create',
            ModificationTime: '_update',
            Specification: 'sku_name',
            Price: 'sku_price',
            Storage: 'sku_stock',
            Thumbnail: 'sku_picture',
            Detail: 'detail',
            Submitter: '_user'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          name: '商品名称',
          thumbnail: '缩略图',
          _create: '创建时间',
          _update: '更新时间',
          sku_name: '规格',
          sku_price: '价格',
          sku_stock: '库存',
          sku_picture: '规格图',
          detail: '商品详情',
          _user: '提交用户'
        },
        en: {
          _id: 'DataID',
          name: 'Product_Name',
          thumbnail: 'Product_Pic',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          sku_name: 'Specification',
          sku_price: 'Price',
          sku_stock: 'Storage',
          sku_picture: 'Thumbnail',
          detail: 'Detail',
          _user: 'Submitter'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-mallCart'] = {
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          商品编号: 'product_id',
          规格序号: 'sku_index',
          数量: 'num',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          Product_ID: 'product_id',
          SpecID: 'sku_index',
          Quantity: 'num',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  // dbInsert: function(_sys, node, id, header, data, cb) {
  //   var obj = {}
  //   if (header && data) {
  //     obj = { header: header, data: data }
  //   }
  //   var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
  //   if (cb) {
  //     try {
  //       cb('success', result)
  //     } catch (e) {}
  //   }
  //   return result
  // },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  // dbUpdate: function(_sys, node, id, rowId, header, data) {
  //   return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
  //     items: [{ rowId: rowId, header: header, data: data }]
  //   })
  // },
  dbDelete: function(_sys, node, id, rowId) {
    return _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, {
      rowId: rowId
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          商品编号: 'product_id',
          规格序号: 'sku_index',
          数量: 'num',
          创建时间: '_create',
          更新时间: '_update'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          Product_ID: 'product_id',
          SpecID: 'sku_index',
          Quantity: 'num',
          CreationTime: '_create',
          ModificationTime: '_update'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      obj['data'] = [data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            商品编号: 'product_id',
            规格序号: 'sku_index',
            数量: 'num',
            创建时间: '_create',
            更新时间: '_update'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            Product_ID: 'product_id',
            SpecID: 'sku_index',
            Quantity: 'num',
            CreationTime: '_create',
            ModificationTime: '_update'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          product_id: '商品编号',
          sku_index: '规格序号',
          num: '数量',
          _create: '创建时间',
          _update: '更新时间'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          product_id: 'Product_ID',
          sku_index: 'SpecID',
          num: 'Quantity',
          _create: 'CreationTime',
          _update: 'ModificationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-mallOrder'] = {
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          订单号: 'trade_no',
          第三方订单号: 'out_trade_no',
          总价: 'amount',
          联系方式: 'contact',
          收件人: 'receiver',
          地址: 'address',
          状态码: 'status',
          状态: 'status_desc',
          快递: 'express',
          快递单号: 'express_no',
          交易方式: 'pay_provider',
          交易类型: 'trade_type',
          交易时间: 'trade_time',
          备注: 'comment'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Order_ID: 'trade_no',
          Third_Party_Order_ID: 'out_trade_no',
          Total_Price: 'amount',
          Contact: 'contact',
          Recipient: 'receiver',
          Address: 'address',
          Status: 'status',
          Status_Desc: 'status_desc',
          Express: 'express',
          Express_No: 'express_no',
          Transaction_Method: 'pay_provider',
          Transaction_Type: 'trade_type',
          Transaction_Time: 'trade_time',
          Remark: 'comment'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbDelete: function(_sys, node, id, rowId) {
    return _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, {
      rowId: rowId
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }

    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          订单号: 'trade_no',
          第三方订单号: 'out_trade_no',
          总价: 'amount',
          联系方式: 'contact',
          收件人: 'receiver',
          地址: 'address',
          状态码: 'status',
          状态: 'status_desc',
          快递: 'express',
          快递单号: 'express_no',
          交易方式: 'pay_provider',
          交易类型: 'trade_type',
          交易时间: 'trade_time',
          备注: 'comment'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Order_ID: 'trade_no',
          Third_Party_Order_ID: 'out_trade_no',
          Total_Price: 'amount',
          Contact: 'contact',
          Recipient: 'receiver',
          Address: 'address',
          Status: 'status',
          Status_Desc: 'status_desc',
          Express: 'express',
          Express_No: 'express_no',
          Transaction_Method: 'pay_provider',
          Transaction_Type: 'trade_type',
          Transaction_Time: 'trade_time',
          Remark: 'comment'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      obj['data'] = [data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update',
            订单号: 'trade_no',
            第三方订单号: 'out_trade_no',
            总价: 'amount',
            联系方式: 'contact',
            收件人: 'receiver',
            地址: 'address',
            状态码: 'status',
            状态: 'status_desc',
            快递: 'express',
            快递单号: 'express_no',
            交易方式: 'pay_provider',
            交易类型: 'trade_type',
            交易时间: 'trade_time',
            备注: 'comment'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update',
            Order_ID: 'trade_no',
            Third_Party_Order_ID: 'out_trade_no',
            Total_Price: 'amount',
            Contact: 'contact',
            Recipient: 'receiver',
            Address: 'address',
            Status: 'status',
            Status_Desc: 'status_desc',
            Express: 'express',
            Express_No: 'express_no',
            Transaction_Method: 'pay_provider',
            Transaction_Type: 'trade_type',
            Transaction_Time: 'trade_time',
            Remark: 'comment'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          trade_no: '订单号',
          out_trade_no: '第三方订单号',
          amount: '总价',
          contact: '联系方式',
          receiver: '收件人',
          address: '地址',
          status: '状态码',
          status_desc: '状态',
          express: '快递',
          express_no: '快递单号',
          pay_provider: '交易方式',
          trade_type: '交易类型',
          trade_time: '交易时间',
          comment: '备注'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          trade_no: 'Order_ID',
          out_trade_no: 'Third_Party_Order_ID',
          amount: 'Total_Price',
          contact: 'Contact',
          receiver: 'Recipient',
          address: 'Address',
          status: 'Status',
          status_desc: 'Status_Desc',
          express: 'Express',
          express_no: 'Express_No',
          pay_provider: 'Transaction_Method',
          trade_type: 'Transaction_Type',
          trade_time: 'Transaction_Time',
          comment: 'Remark'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-vote'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  dbSelectCandidate: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate',
          投票数: 'total',
          详情: 'detail'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate',
          Votes: 'total',
          Detail: 'detail'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupByCandidate: function(
    _sys,
    node,
    id,
    cons,
    cols,
    groups,
    orders,
    range,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  vote: function(_sys, node, id, candidate, cb) {
    var obj = {}
    if (candidate !== undefined) {
      obj = {
        candidate: candidate
      }
      var result = _dbCmd(id, vote, obj)
      if (cb) {
        if (result && result.status === 0) {
          cb('success', result)
        } else {
          cb('fail', result)
        }
      }
      return result
    }
  },
  dbGetConfig: function(_sys, node, id, cb) {
    var result = _dbCmd(id, dbGetConfig)
    if (cb) {
      if (result && result.status === 0) {
        //result = JSON.parse(JSON.stringify(result))
        if (
          !result.result ||
          (result.result && !result.result.hasOwnProperty('openConfig'))
        ) {
          result.result = {
            openConfig: false
          }
        }
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSetConfig: function(
    _sys,
    node,
    id,
    openConfig,
    startTime,
    endTime,
    timeLimit,
    countLimit,
    dayLimit,
    totalCountLimit,
    totalDayLimit,
    cb
  ) {
    var obj = {
      config: {
        openConfig: openConfig,
        startTime: startTime,
        endTime: endTime,
        timeLimit: timeLimit,
        countLimit: countLimit,
        dayLimit: dayLimit,
        totalCountLimit: totalCountLimit,
        totalDayLimit: totalDayLimit
      }
    }
    var result = _dbCmd(id, dbSetConfig, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-voteCandidate'] = {
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate',
          投票数: 'total',
          详情: 'detail'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate',
          Votes: 'total',
          Detail: 'detail'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbSearch: function(_sys, node, id, cons, range, cb) {
    var obj = {}
    if (cons) {
      obj['query'] = cons
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSmartSearch: function(
    _sys,
    node,
    id,
    query,
    searchRange,
    minMatch,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = { query: query }
    var _searchRange = searchRange
    var _minMatch = minMatch
    var dbCons = cons
    var _orders = orders
    var _range = range
    var _cols = cols
    var _cb = cb
    if (arguments && arguments.length === 10) {
      _cb = _cols
      _cols = _range
      _range = _orders
      _orders = dbCons
      dbCons = _minMatch
      _minMatch = _searchRange
      _searchRange = undefined
    }
    if (_minMatch !== undefined) {
      if (!isNaN(_minMatch)) {
        _minMatch += ''
      }
      obj['minimumShouldMatch'] = _minMatch
    }
    if (_searchRange) {
      var multiQuery = { text: query, boostFields: _searchRange }
      if (obj['minimumShouldMatch']) {
        multiQuery.minimumShouldMatch = obj['minimumShouldMatch']
        delete obj['minimumShouldMatch']
      }
      delete obj.query
      obj.multiQueries = [multiQuery]
    }
    if (dbCons) {
      var _cons = []
      dbCons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_orders) {
      obj['orders'] = _orders
    }
    if (_range) {
      if (_range.offset) {
        obj['offset'] = _range.offset
      }
      if (_range.limit) {
        obj['limit'] = _range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate',
          投票数: 'total',
          详情: 'detail'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate',
          Votes: 'total',
          Detail: 'detail'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbCustomizeSearch: function(
    _sys,
    node,
    id,
    queries,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = {}
    var _cols = cols
    var _cb = cb
    obj.multiQueries = queries
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate',
          投票数: 'total',
          详情: 'detail'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate',
          Votes: 'total',
          Detail: 'detail'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, dbSearch, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情',
          _score: '相关度评分',
          _highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'Creation',
          _update: 'Modification',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail',
          _score: 'Score',
          _highlight: 'Hits'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      if (
        result.result.hits &&
        result.result.hits.length > 0 &&
        result.result.data.length > 0
      ) {
        result = JSON.parse(JSON.stringify(result))
        result.result.columns.push({
          internal: true,
          kind: 'double',
          name: '_score',
          order: 110,
          readOnly: true
        })
        result.result.columns.push({
          internal: true,
          kind: 'object',
          name: '_highlight',
          order: 111,
          readOnly: true
        })
        result.result.data.forEach(function(item) {
          if (item && item.length > 0) {
            var hasMatched = false
            result.result.hits.forEach(function(hit) {
              if (hit._id === item[0]) {
                hasMatched = true
                item.push(hit._score)
                item.push(hit.highlight)
              }
            })
            if (!hasMatched) {
              item.push(undefined)
              item.push(undefined)
            }
          }
        })
      }
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbDelete: function(_sys, node, id, rowId) {
    return _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, {
      rowId: rowId
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate',
          投票数: 'total',
          详情: 'detail'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate',
          Votes: 'total',
          Detail: 'detail'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      obj['data'] = [data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update',
            候选人: 'candidate',
            投票数: 'total',
            详情: 'detail'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update',
            Candidate: 'candidate',
            Votes: 'total',
            Detail: 'detail'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人',
          total: '投票数',
          detail: '详情'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate',
          total: 'Votes',
          detail: 'Detail'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbGetConfig: function(_sys, node, id, cb) {
    var result = _dbCmd(id, dbGetConfig)
    if (cb) {
      if (result && result.status === 0) {
        //result = JSON.parse(JSON.stringify(result))
        if (
          !result.result ||
          (result.result && !result.result.hasOwnProperty('openConfig'))
        ) {
          result.result = {
            openConfig: false
          }
        }
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSetConfig: function(
    _sys,
    node,
    id,
    openConfig,
    startTime,
    endTime,
    timeLimit,
    countLimit,
    dayLimit,
    totalCountLimit,
    totalDayLimit,
    cb
  ) {
    var obj = {
      config: {
        openConfig: openConfig,
        startTime: startTime,
        endTime: endTime,
        timeLimit: timeLimit,
        countLimit: countLimit,
        dayLimit: dayLimit,
        totalCountLimit: totalCountLimit,
        totalDayLimit: totalDayLimit
      }
    }
    var result = _dbCmd(id, dbSetConfig, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['data-voteRecord'] = {
  dbSelect: function(_sys, node, id, cons, orders, range, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 7) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbGroupBy: function(_sys, node, id, cons, cols, groups, orders, range, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (range) {
      if (range.offset) {
        obj['offset'] = range.offset
      }
      if (range.limit) {
        obj['limit'] = range.limit
      }
    }
    if (_cols && Array.isArray(_cols)) {
      var targetCols = []
      _cols.forEach(function(col) {
        targetCols.push(col)
      })
      obj['columns'] = targetCols
    }
    if (groups && Array.isArray(groups)) {
      obj['groups'] = groups
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSelect : txSelect, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      result.result.groupBy = true
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    if (header && data) {
      obj = { header: header, data: data }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbInsert : txInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbCount: function(_sys, node, id, cons, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbCount : txCount, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbDistinctCount: function(_sys, node, id, cons, cols, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)

                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (cols) {
      var distinctColumns = []
      cols.forEach(function(col) {
        if (distinctColumns.indexOf(col) < 0) {
          distinctColumns.push(col)
        }
      })
      obj['distinctColumns'] = distinctColumns
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbDistinctCount : txDistinctCount,
      obj
    )
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbUpdate: function(_sys, node, id, rowId, header, data) {
    return _dbCmd(id, !_sys.inTransaction ? dbUpdate : txUpdate, {
      items: [{ rowId: rowId, header: header, data: data }]
    })
  },
  dbDelete: function(_sys, node, id, rowId) {
    return _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, {
      rowId: rowId
    })
  },
  dbDataRm: function(_sys, node, id, cons, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 5) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbDelete : txDelete, obj)
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbBatchUpdate: function(_sys, node, id, cons, updates, limit, cb) {
    var _cb = cb
    var _limit = limit

    if (arguments && arguments.length === 6) {
      _cb = _limit
      _limit = undefined
    }
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_limit) {
      _limit = parseFloat(_limit)
      if (_limit && !isNaN(_limit)) {
        obj['limit'] = _limit
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbBatchUpdate : txBatchUpdate,
      obj
    )
    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbUpdateOneAndFind: function(_sys, node, id, cons, updates, cols, cb) {
    var obj = {}
    var _cols = cols
    var _cb = cb

    if (arguments && arguments.length === 6) {
      _cb = _cols
      _cols = undefined
    }
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    if (_cols && Array.isArray(_cols)) {
      var colMapping = {
        zh: {
          数据ID: '_id',
          提交用户: '_user',
          创建时间: '_create',
          更新时间: '_update',
          候选人: 'candidate'
        },
        en: {
          DataID: '_id',
          Submitter: '_user',
          CreationTime: '_create',
          ModificationTime: '_update',
          Candidate: 'candidate'
        }
      }
      var mapping = colMapping[param._lang || 'zh']
      var targetCols = []
      _cols.forEach(function(col) {
        if (Object.prototype.toString.call(col) === '[object String]') {
          if (mapping[col]) {
            targetCols.push({ name: mapping[col] })
          } else {
            targetCols.push({ name: col })
          }
        } else {
          targetCols.push(col)
        }
      })
      obj['columns'] = targetCols
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (_cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          _cb('successEmpty', result)
        } else {
          _cb('success', result)
        }
      } else {
        _cb('fail', result)
      }
    }
    return result
  },
  dbRandomUpdateOneAndFind: function(_sys, node, id, cons, updates, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (updates) {
      obj['updates'] = updates
    }
    obj['random'] = true
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbUpdateOneAndReturn : txUpdateOneAndReturn,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbRandomSelect: function(_sys, node, id, cons, orders, limit, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (orders) {
      obj['orders'] = orders
    }
    if (limit !== undefined) {
      obj['limit'] = limit
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbRandomSelect : txRandomSelect,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.data && result.result.data.length === 0) ||
            !result.result.data)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSum: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbSum : txSum, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbAvg: function(_sys, node, id, cons, column, cb) {
    var obj = {}
    if (cons) {
      var _cons = []
      cons.forEach(function(con) {
        if (con && con.value !== '$any') {
          if (con.value !== null) {
            if (
              Object.prototype.toString.call(con.value) === '[object String]' &&
              con.value.indexOf('$currentUser') >= 0
            ) {
              try {
                con.value = con.value.replace(
                  /\$currentUser/g,
                  getPlayer().result.uid
                )
              } catch (e) {}
            } else if (
              Object.prototype.toString.call(con.value) === '[object Object]' ||
              Array.isArray(con.value)
            ) {
              try {
                var temp = JSON.stringify(con.value)
                if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                  temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                  con.value = JSON.parse(temp)
                }
              } catch (e) {}
            }
          }
          _cons.push(con)
        }
      })
      obj['conditions'] = _dealCons(_cons)
    }
    if (column !== undefined) {
      obj['column'] = column
    }
    var result = _dbCmd(id, !_sys.inTransaction ? dbAvg : txAvg, obj)
    var final = -1
    if (result && result.result) {
      if (result.result.value !== undefined) {
        final = result.result.value
      }
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  },
  dbInsertJson: function(_sys, node, id, data, cb) {
    var obj = {}
    if (data) {
      obj['data'] = [data]
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var exceptKeys = [
          '数据ID',
          '提交用户',
          '创建时间',
          '更新时间',
          'DataID',
          'Submitter',
          'CreationTime',
          'ModificationTime'
        ]
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            提交用户: '_user',
            创建时间: '_create',
            更新时间: '_update',
            候选人: 'candidate'
          },
          en: {
            DataID: '_id',
            Submitter: '_user',
            CreationTime: '_create',
            ModificationTime: '_update',
            Candidate: 'candidate'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (exceptKeys.indexOf(key) < 0) {
                if (map[key]) {
                  obj[map[key]] = item[key]
                } else {
                  obj[key] = item[key]
                }
              }
            })
          }
          newData.push(obj)
        })
        obj['data'] = newData
      } else {
        obj['data'] = data
      }
    }
    var result = _dbCmd(
      id,
      !_sys.inTransaction ? dbInsertMulti : txInsertMulti,
      obj
    )
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _user: '提交用户',
          _create: '创建时间',
          _update: '更新时间',
          candidate: '候选人'
        },
        en: {
          _id: 'DataID',
          _user: 'Submitter',
          _create: 'CreationTime',
          _update: 'ModificationTime',
          candidate: 'Candidate'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbGetConfig: function(_sys, node, id, cb) {
    var result = _dbCmd(id, dbGetConfig)
    if (cb) {
      if (result && result.status === 0) {
        //result = JSON.parse(JSON.stringify(result))
        if (
          !result.result ||
          (result.result && !result.result.hasOwnProperty('openConfig'))
        ) {
          result.result = {
            openConfig: false
          }
        }
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dbSetConfig: function(
    _sys,
    node,
    id,
    openConfig,
    startTime,
    endTime,
    timeLimit,
    countLimit,
    dayLimit,
    totalCountLimit,
    totalDayLimit,
    cb
  ) {
    var obj = {
      config: {
        openConfig: openConfig,
        startTime: startTime,
        endTime: endTime,
        timeLimit: timeLimit,
        countLimit: countLimit,
        dayLimit: dayLimit,
        totalCountLimit: totalCountLimit,
        totalDayLimit: totalDayLimit
      }
    }
    var result = _dbCmd(id, dbSetConfig, obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}

function _dealEsDbParams(obj, disableHighlight) {
  var searchObj = {}
  if (!disableHighlight) {
    searchObj.highlight = { preTags: ['<tag>'], postTags: ['</tag>'] }
  }
  var shouldQuery = undefined // 用于must
  var filter = []
  var must_not = []
  if (obj.query) {
    if (!shouldQuery) {
      shouldQuery = { type: 'multi_match' }
    }
    shouldQuery.value = obj.query
  }
  if (obj.minMatch) {
    if (!shouldQuery) {
      shouldQuery = { type: 'multi_match' }
    }
    shouldQuery.minimum_should_match = obj.minMatch
  }
  if (obj.searchRange) {
    if (!shouldQuery) {
      shouldQuery = { type: 'multi_match' }
    }
    shouldQuery.fields = obj.searchRange
    var highlightFields = []
    obj.searchRange.forEach(function(sRange) {
      highlightFields.push(sRange.field)
    })
    searchObj.highlight.fields = highlightFields
  }
  if (shouldQuery) {
    searchObj.must = [shouldQuery]
  }
  if (obj.cons) {
    var _cons = []
    obj.cons.forEach(function(con) {
      if (con && con.value !== '$any') {
        if (con.value !== null) {
          if (
            Object.prototype.toString.call(con.value) === '[object String]' &&
            con.value.indexOf('$currentUser') >= 0
          ) {
            try {
              con.value = con.value.replace(
                /\$currentUser/g,
                getPlayer().result.uid
              )
            } catch (e) {}
          } else if (
            Object.prototype.toString.call(con.value) === '[object Object]' ||
            Array.isArray(con.value)
          ) {
            try {
              var temp = JSON.stringify(con.value)

              if (temp && temp.indexOf && temp.indexOf('$currentUser') >= 0) {
                temp = temp.replace(/\$currentUser/g, getPlayer().result.uid)
                con.value = JSON.parse(temp)
              }
            } catch (e) {}
          }
        }
        _cons.push(con)
      }
    })
    // 处理escons
    _cons.forEach(function(con) {
      if (con.comp === 'equal') {
        var eqValue = con.value
        // 数字转字符串
        if (typeof eqValue === 'number') {
          eqValue = con.value + ''
        }
        filter.push({
          type: 'term',
          field: con.column,
          value: eqValue
        })
      } else if (con.comp === 'belongs') {
        filter.push({
          type: 'terms',
          field: con.column,
          value: con.value
        })
      } else if (['gt', 'lt', 'gte', 'lte'].indexOf(con.comp) >= 0) {
        var conRange = {}
        conRange[con.comp] = con.value
        filter.push({
          type: 'range',
          field: con.column,
          range: conRange
        })
      } else if (con.comp === 'includes') {
        filter.push({
          type: 'match_phrase',
          field: con.column,
          value: con.value
        })
      } else if (
        [
          'dateGt',
          'dateLt',
          'dateGte',
          'dateLte',
          'timeGt',
          'timeLt',
          'timeGte',
          'timeLte'
        ].indexOf(con.comp) >= 0
      ) {
        var dataTimeMap = {
          dateGt: 'gt',
          dateLt: 'lt',
          dateGte: 'gte',
          dateLte: 'lte',
          timeGt: 'gt',
          timeLt: 'lt',
          timeGte: 'gte',
          timeLte: 'lte'
        }
        var dateTimeRange = {}
        dateTimeRange[dataTimeMap[con.comp]] = con.value
        filter.push({
          type: 'range',
          field: con.column,
          range: dateTimeRange
        })
      } else if (con.comp === 'notEqual') {
        must_not.push({
          type: 'term',
          field: con.column,
          value: con.value
        })
      } else if (con.comp === 'notBelongs') {
        must_not.push({
          type: 'terms',
          field: con.column,
          value: con.value
        })
      } else if (con.comp === 'notIncludes') {
        must_not.push({
          type: 'match_phrase',
          field: con.column,
          value: con.value
        })
      }
    })

    if (filter.length > 0) {
      searchObj.filter = filter
    }
    if (must_not.length > 0) {
      searchObj.mustNot = must_not
    }
  }
  if (obj.orders && obj.orders.length > 0) {
    obj.orders.forEach(function(order) {
      if (!searchObj.orders) {
        searchObj.orders = []
      }
      searchObj.orders.push({
        field: order.column,
        desc: !order.asc
      })
    })
  }
  if (obj.range) {
    if (obj.range.offset !== undefined) {
      searchObj.offset = obj.range.offset
    }
    if (obj.range.limit !== undefined) {
      searchObj.limit = obj.range.limit
    }
  }
  if (obj.cols && Array.isArray(obj.cols)) {
    var colMapping = { zh: { 数据ID: '_id' }, en: { DataID: '_id' } }
    var mapping = colMapping[param._lang || 'zh']
    var targetCols = []
    obj.cols.forEach(function(col) {
      if (Object.prototype.toString.call(col) === '[object String]') {
        if (mapping[col]) {
          targetCols.push({ name: mapping[col] })
        } else {
          targetCols.push({ name: col })
        }
      } else {
        targetCols.push(col)
      }
    })
    if (targetCols && targetCols.length > 0) {
      targetCols.forEach(function(col) {
        if (!searchObj.headers) {
          searchObj.headers = []
        }
        searchObj.headers.push(col.name)
      })
    }
  }
  if (obj.updates && Array.isArray(obj.updates)) {
    // 更新相关
    obj.updates.forEach(function(updateItem) {
      updateItem.field = updateItem.column
      delete updateItem.column
    })
    searchObj.updates = obj.updates
  }
  return searchObj
}

$funcs['data-esDb'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  esSearch: function(
    _sys,
    node,
    id,
    query,
    searchRange,
    minMatch,
    cons,
    orders,
    range,
    cols,
    cb
  ) {
    var obj = {
      query: query,
      searchRange: searchRange,
      minMatch: minMatch,
      cons: cons,
      orders: orders,
      range: range,
      cols: cols
    }
    var searchObj = _dealEsDbParams(obj)
    var result = _dbCmd(id, esSelect, searchObj)
    if (result && result.status === 0 && result.result.hits) {
      var esMapping = {
        zh: {
          _id: '数据ID',
          _created: '创建时间',
          _score: '匹配分',
          highlight: '命中词'
        },
        en: {
          _id: '数据ID',
          _created: 'CreationTime',
          _score: 'matchScore',
          highlight: 'hitWords'
        }
      }
      result.result.mapping = esMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          result.result.hits &&
          ((result.result.hits.hits && result.result.hits.hits.length === 0) ||
            !result.result.hits.hits)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esCustomSearch: function(_sys, node, id, query, cb) {
    var result = _dbCmd(id, esRawSelect, {
      query: query || {}
    })

    if (result && result.status === 0 && result.result.hits) {
      var esMapping = {
        zh: {
          _id: '数据ID',
          _created: '创建时间',
          _score: '匹配分',
          highlight: '命中词'
        },
        en: {
          _id: 'DataID',
          _created: 'CreationTime',
          _score: 'matchScore',
          highlight: 'hitWords'
        }
      }
      result.result.mapping = esMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          result.result.hits &&
          ((result.result.hits.hits && result.result.hits.hits.length === 0) ||
            !result.result.hits.hits)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esSegmentSentence: function(_sys, node, id, text, analyzer, cb) {
    var result = _dbCmd(id, esAnalyze, {
      text: text || '',
      analyzer: analyzer || 'smartcn'
    })

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    var item = {}

    if (header && data && header.length === data.length) {
      header.forEach(function(v, index) {
        item[v] = data[index]
      })
    }
    if (Object.keys(item).length > 0) {
      obj.items = [item]
    }

    var result = _dbCmd(id, esInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _created: '创建时间'
        },
        en: {
          _id: 'DataID',
          _created: 'CreationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esInsertMulti: function(_sys, node, id, data, cb) {
    var obj = {}
    var newData = []
    if (data) {
      if (Array.isArray(data)) {
        var objHeaderMap = {
          zh: {
            数据ID: '_id',
            创建时间: '_created'
          },
          en: {
            DataID: '_id',
            CreationTime: '_created'
          }
        }
        var map = objHeaderMap[param._lang || 'zh']
        data.forEach(function(item) {
          var obj = {}
          if (
            item &&
            Object.prototype.toString.call(item) === '[object Object]'
          ) {
            Object.keys(item).forEach(function(key) {
              if (map[key]) {
                obj[map[key]] = item[key]
              } else {
                obj[key] = item[key]
              }
            })
          }
          newData.push(obj)
        })
        obj['items'] = newData
      } else {
        obj['items'] = data
      }
    }

    var result = _dbCmd(id, esInsert, obj)
    if (result && result.result && result.result.data) {
      var dbHeaderMapping = {
        zh: {
          _id: '数据ID',
          _created: '创建时间'
        },
        en: {
          _id: 'DataID',
          _created: 'CreationTime'
        }
      }
      result.result.mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }

    return result
  },
  esUpdateById: function(_sys, node, id, data, cb) {
    var items = []
    if (data && Array.isArray(data)) {
      data.forEach(function(item) {
        var rowId = undefined
        var updates = {}
        var _item = {}
        var ids = ['数据ID', 'DataID', '_id', 'id']
        if (
          item &&
          Object.prototype.toString.call(item) === '[object Object]'
        ) {
          Object.keys(item).forEach(function(key) {
            if (ids.indexOf(key) >= 0) {
              rowId = item[key]
            } else {
              updates[key] = item[key]
            }
          })
        }
        // 有id才给更新
        if (rowId) {
          _item.id = rowId
          _item.item = updates
          items.push(_item)
        }
      })
    }

    var result = _dbCmd(id, esUpdate, { items: items })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esQueryUpdate: function(_sys, node, id, cons, updates, cb) {
    var obj = { cons: cons, updates: updates }
    var searchObj = _dealEsDbParams(obj, true)
    var result = _dbCmd(id, esQueryUpdate, searchObj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esDeleteById: function(_sys, node, id, ids, cb) {
    var result = _dbCmd(id, esDelete, { ids: ids || [] })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esQueryDelete: function(_sys, node, id, cons, cb) {
    var obj = { cons: cons }
    var searchObj = _dealEsDbParams(obj, true)
    var result = _dbCmd(id, esQueryDelete, searchObj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  esCount: function(_sys, node, id, cons, cb) {
    var obj = { cons: cons }
    var searchObj = _dealEsDbParams(obj, true)
    var result = _dbCmd(id, esSelect, searchObj)
    var final = -1

    if (result && result.result && result.result.hits) {
      if (result.result.hits.total !== undefined) {
        final = result.result.hits.total
      }
    }

    if (cb) {
      if (result && result.status === 0) {
        cb('success', final)
      } else {
        cb('fail', final)
      }
    }
    return result
  }
}

$funcs['data-newEsDb'] = {
  newEsDbCI: function(_sys, node, id, instruction, cb) {
    var paramLegal = 0
    var result = {}

    if (
      instruction &&
      typeof instruction == 'string' &&
      instruction.length > 0
    ) {
      var _method
      var _instruction
      var bodyLocation = instruction.indexOf('{')
      var _body
      if (instruction.indexOf('POST') == 0) {
        paramLegal = 1
        _method = 'POST'
        if (bodyLocation > 0) {
          _instruction = instruction.slice(4, bodyLocation).replace(/\s*/g, '')
          _body = instruction.slice(bodyLocation)
        } else {
          _instruction = instruction.slice(4).replace(/\s*/g, '')
          _body = {}
        }
      } else if (instruction.indexOf('GET') == 0) {
        paramLegal = 1
        _method = 'GET'
        if (bodyLocation > 0) {
          _instruction = instruction.slice(3, bodyLocation).replace(/\s*/g, '')
          _body = instruction.slice(bodyLocation)
        } else {
          _instruction = instruction.slice(3).replace(/\s*/g, '')
          _body = {}
        }
      } else if (instruction.indexOf('PUT') == 0) {
        paramLegal = 1
        _method = 'PUT'
        if (bodyLocation > 0) {
          _instruction = instruction.slice(3, bodyLocation).replace(/\s*/g, '')
          _body = instruction.slice(bodyLocation)
        } else {
          _instruction = instruction.slice(3).replace(/\s*/g, '')
          _body = {}
        }
      } else if (instruction.indexOf('DELETE') == 0) {
        paramLegal = 1
        _method = 'DELETE'
        if (bodyLocation > 0) {
          _instruction = instruction.slice(6, bodyLocation).replace(/\s*/g, '')
          _body = instruction.slice(bodyLocation)
        } else {
          _instruction = instruction.slice(6).replace(/\s*/g, '')
          _body = {}
        }
      } else {
        result = {
          status: 500,
          result: {
            value: {
              detail: '未识别到调用方法'
            }
          }
        }
      }
    } else {
      result = {
        status: 500,
        result: {
          value: {
            detail: '指令不可为空且必须为字符串类型'
          }
        }
      }
    }

    if (paramLegal === 1) {
      if (_instruction[0] != '/') {
        _instruction = '/' + _instruction
      }
      var req = {
        url: _sys.get(node, id, 'address') + _instruction,
        method: _method,
        type: _instruction.indexOf('bulk') > 0 ? 'RAW' : 'JSON',
        header: {},
        body: _instruction.indexOf('bulk') > 0 ? _body : JSON.parse(_body)
      }
      if (_instruction.indexOf('bulk') > 0) {
        req.header = {
          'Content-Type': 'application/x-ndjson'
        }
      } else {
        req.header = {
          accept: 'application/json'
        }
      }
      var ApiResult = serverApi(req)
    }

    if (paramLegal === 1 && ApiResult) {
      result = {
        status: ApiResult.status,
        result: {
          value: ApiResult.result
        }
      }
    }

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  newEsDbInsert: function(_sys, node, id, propObj, cb) {
    var dataObj = propObj.dataObj
    if (
      !dataObj ||
      Object.prototype.toString.call(dataObj) !== '[object Object]'
    ) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: '提交数据不可为空且必须为对象类型'
        })
      return
    } else if (dataObj.hasOwnProperty('_id')) {
      cb &&
        cb('fail', { isSuccess: false, detail: '提交数据不可包含系统字段_id' })
      return
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: esDbInfo.detail
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_doc',
      method: 'POST',
      type: 'JSON',
      header: {
        'Content-Type': 'application/json'
      },
      body: dataObj
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result) {
      var result = apiRes.result
      if (!result.error) {
        cb &&
          cb('success', {
            isSuccess: true,
            value: result,
            dataId: result._id
          })
      } else {
        var error = result.error
        cb &&
          cb('fail', {
            isSuccess: false,
            value: result,
            detail:
              error.reason + '.' + error.caused_by && error.caused_by.reason
          })
      }
    } else {
      cb && cb('fail', { isSuccess: false, detail: apiRes })
    }
  },

  newEsDbInsertMulti: function(_sys, node, id, propObj, cb) {
    var dataArr = propObj.dataArr
    if (dataArr && Array.isArray(dataArr) && dataArr.length > 0) {
      var arr = []
      var paramLegal = true
      dataArr.map(function(data) {
        if (data instanceof Object && !data.hasOwnProperty('_id')) {
          arr.push(JSON.stringify({ index: {} }))
          arr.push(JSON.stringify(data))
        } else {
          paramLegal = false
        }
      })
      if (!paramLegal) {
        cb &&
          cb('fail', {
            value: { detail: '提交数据不能包含_id字段' },
            successNum: 0,
            detailList: []
          })
        return
      }
      arr.push('')
      var _body = arr.join('\n')
    } else {
      cb &&
        cb('fail', {
          value: { detail: '提交数据不可为空且必须为对象数组' },
          successNum: 0,
          detailList: []
        })
      return
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          value: {
            detail: esDbInfo.detail
          },
          successNum: 0,
          detailList: []
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_bulk',
      method: 'POST',
      type: 'RAW',
      header: {
        'Content-Type': 'application/x-ndjson'
      },
      body: _body
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result && apiRes.result.items) {
      var successNum = 0
      var detailList = []
      apiRes.result.items.map(function(item) {
        if (item.index && !item.index.error) {
          successNum++
          detailList.push({
            是否成功: true,
            数据ID: item.index._id
          })
        } else {
          var error = (item.index && item.index.error) || {}
          detailList.push({
            是否成功: false,
            失败原因:
              error.reason + '.' + error.caused_by && error.caused_by.reason
          })
        }
      })

      cb &&
        cb('success', {
          value: apiRes.result,
          successNum: successNum,
          detailList: detailList
        })
    } else {
      cb && cb('fail', { value: apiRes, successNum: 0, detailList: [] })
    }

    //=============
  },

  newEsDbCover: function(_sys, node, id, propObj, cb) {
    var dataObj = propObj.dataObj
    var dataId = propObj.dataId
    if (
      !dataObj ||
      Object.prototype.toString.call(dataObj) !== '[object Object]'
    ) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: '提交数据不可为空且必须为对象类型'
        })
      return
    } else if (dataObj.hasOwnProperty('_id')) {
      cb &&
        cb('fail', { isSuccess: false, detail: '提交数据不可包含系统字段_id' })
      return
    } else if (!dataId) {
      cb && cb('fail', { isSuccess: false, detail: '数据ID不可为空' })
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: esDbInfo.detail
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_doc/' + dataId,
      method: 'POST',
      type: 'JSON',
      header: {
        'Content-Type': 'application/json'
      },
      body: dataObj
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result) {
      var result = apiRes.result
      if (!result.error) {
        cb &&
          cb('success', {
            isSuccess: true,
            value: result,
            isCover: result.result === 'updated' ? '是' : '否'
          })
      } else {
        var error = result.error
        cb &&
          cb('fail', {
            isSuccess: false,
            value: result,
            detail:
              error.reason + '.' + error.caused_by && error.caused_by.reason
          })
      }
    } else {
      cb && cb('fail', { isSuccess: false, detail: apiRes })
    }
  },

  newEsDbCoverMulti: function(_sys, node, id, propObj, cb) {
    var dataArr = propObj.dataArr
    if (dataArr && Array.isArray(dataArr) && dataArr.length > 0) {
      var arr = []
      var paramLegal = true
      dataArr.map(function(data) {
        if (data instanceof Object && data.hasOwnProperty('_id')) {
          arr.push(JSON.stringify({ index: { _id: data._id } }))
          delete data._id
          arr.push(JSON.stringify(data))
        } else {
          paramLegal = false
        }
      })
      if (!paramLegal) {
        cb &&
          cb('fail', {
            value: { detail: '提交数据必须包含_id字段' },
            successNum: 0,
            detailList: []
          })
        return
      }
      arr.push('')
      var _body = arr.join('\n')
    } else {
      cb &&
        cb('fail', {
          value: { detail: '提交数据不可为空且必须为对象数组' },
          successNum: 0,
          detailList: []
        })
      return
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          value: {
            detail: esDbInfo.detail
          },
          successNum: 0,
          detailList: []
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_bulk',
      method: 'POST',
      type: 'RAW',
      header: {
        'Content-Type': 'application/x-ndjson'
      },
      body: _body
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result && apiRes.result.items) {
      var successNum = 0
      var detailList = []
      apiRes.result.items.map(function(item) {
        if (item.index && !item.index.error) {
          successNum++
          detailList.push({
            是否成功: true,
            数据ID: item.index._id
          })
        } else {
          var error = (item.index && item.index.error) || {}
          detailList.push({
            是否成功: false,
            失败原因:
              error.reason + '.' + error.caused_by && error.caused_by.reason
          })
        }
      })

      cb &&
        cb('success', {
          value: apiRes.result,
          successNum: successNum,
          detailList: detailList
        })
    } else {
      cb && cb('fail', { value: apiRes, successNum: 0, detailList: [] })
    }
  },

  newEsDbUpdate: function(_sys, node, id, propObj, cb) {
    var dataObj = propObj.dataObj
    var dataId = propObj.dataId
    if (
      !dataObj ||
      Object.prototype.toString.call(dataObj) !== '[object Object]'
    ) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: '提交数据不可为空且必须为对象类型'
        })
      return
    } else if (dataObj.hasOwnProperty('_id')) {
      cb &&
        cb('fail', { isSuccess: false, detail: '提交数据不可包含系统字段_id' })
      return
    } else if (!dataId) {
      cb && cb('fail', { isSuccess: false, detail: '数据ID不可为空' })
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: esDbInfo.detail
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_update/' + dataId,
      method: 'POST',
      type: 'JSON',
      header: {
        'Content-Type': 'application/json'
      },
      body: {
        doc: dataObj
      }
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result) {
      var result = apiRes.result
      if (!result.error) {
        cb &&
          cb('success', {
            isSuccess: true,
            value: apiRes.result
          })
      } else {
        var error = result.error
        cb &&
          cb('fail', {
            isSuccess: false,
            detail:
              error.reason + '.' + error.caused_by && error.caused_by.reason
          })
      }
    } else {
      cb && cb('fail', { isSuccess: false, detail: apiRes })
    }
  },

  newEsDbUpdateMulti: function(_sys, node, id, propObj, cb) {
    var dataArr = propObj.dataArr
    if (dataArr && Array.isArray(dataArr) && dataArr.length > 0) {
      var arr = []
      var paramLegal = true
      dataArr.map(function(data) {
        if (data instanceof Object && data.hasOwnProperty('_id')) {
          arr.push(JSON.stringify({ update: { _id: data._id } }))
          delete data._id
          arr.push(JSON.stringify({ doc: data }))
        } else {
          paramLegal = false
        }
      })
      if (!paramLegal) {
        cb &&
          cb('fail', {
            value: { detail: '提交数据必须包含_id字段' },
            successNum: 0,
            detailList: []
          })
        return
      }
      arr.push('')
      var _body = arr.join('\n')
    } else {
      cb &&
        cb('fail', {
          value: { detail: '提交数据不可为空且必须为对象数组' },
          successNum: 0,
          detailList: []
        })
      return
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          value: {
            detail: esDbInfo.detail
          },
          successNum: 0,
          detailList: []
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_bulk',
      method: 'POST',
      type: 'RAW',
      header: {
        'Content-Type': 'application/x-ndjson'
      },
      body: _body
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result && apiRes.result.items) {
      var successNum = 0
      var detailList = []
      apiRes.result.items.map(function(item) {
        if (item.update && !item.update.error) {
          successNum++
          detailList.push({
            是否成功: true
          })
        } else {
          var error = (item.update && item.update.error) || {}
          detailList.push({
            是否成功: false,
            失败原因:
              error.reason + '.' + error.caused_by && error.caused_by.reason
          })
        }
      })

      cb &&
        cb('success', {
          value: apiRes.result,
          successNum: successNum,
          detailList: detailList
        })
    } else {
      cb && cb('fail', { value: apiRes })
    }
  },

  newEsDbGet: function(_sys, node, id, propObj, cb) {
    var dataId = propObj.dataId
    if (!dataId) {
      cb && cb('fail', { isSuccess: false, detail: '数据ID不能为空' })
      return
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          isSuccess: false,
          detail: esDbInfo.detail
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_doc/' + dataId,
      method: 'GET',
      type: 'JSON',
      header: {
        'Content-Type': 'application/json'
      }
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result && apiRes.result.found) {
      var result = apiRes.result
      if (result.found) {
        cb &&
          cb('success', {
            isSuccess: true,
            value: result,
            obj: result._source
          })
      } else {
        cb &&
          cb('fail', { isSuccess: false, value: result, detail: '数据不存在' })
      }
    } else {
      cb && cb('fail', { isSuccess: false, detail: apiRes })
    }
  },

  newEsDbGetMulti: function(_sys, node, id, propObj, cb) {
    var dataIdArr = propObj.dataIdArr
    if (dataIdArr && Array.isArray(dataIdArr) && dataIdArr.length > 0) {
      var arr = []
      dataIdArr.map(function(data) {
        arr.push({ _id: data })
      })
      var _body = { docs: arr }
    } else {
      cb &&
        cb('fail', {
          value: { detail: '提交数据不可为空且必须为数组' },
          successNum: 0,
          detailList: []
        })
      return
    }

    var esDbInfo = _getEsDbInfo(_sys, node, id)
    if (!esDbInfo.isSuccess) {
      cb &&
        cb('fail', {
          value: {
            detail: esDbInfo.detail
          },
          successNum: 0,
          detailList: []
        })
      return
    }
    var link = esDbInfo.link
    var tableName = esDbInfo.tableName

    var req = {
      url: 'http://' + link + '/' + tableName + '/_mget',
      method: 'POST',
      type: 'JSON',
      header: {
        'Content-Type': 'application/json'
      },
      body: _body
    }
    var apiRes = serverApi(req)

    if (apiRes && apiRes.status === 0 && apiRes.result && apiRes.result.docs) {
      var successNum = 0
      var detailList = []
      apiRes.result.docs.map(function(doc) {
        if (doc.found) {
          successNum++
          detailList.push(doc._source)
        } else {
          detailList.push(null)
        }
      })

      cb &&
        cb('success', {
          value: apiRes.result,
          successNum: successNum,
          detailList: detailList
        })
    } else {
      cb &&
        cb('fail', { value: { detail: apiRes }, successNum: 0, detailList: [] })
    }
  }
}

function _getEsDbInfo(_sys, node, id) {
  var instanceId = _sys.get(node, id, 'instanceId')
  var tableName = _sys.get(node, id, 'tableName')
  if (!instanceId || !tableName) {
    return {
      isSuccess: false,
      detail: 'ES数据库实例ID/表名不能为空'
    }
  }
  var linkRes = lookupResource({ id: instanceId })
  var config = linkRes.result && linkRes.result.config
  var link = ''
  try {
    var configObj = JSON.parse(config)
    link = configObj.link
  } catch (e) {
    return {
      isSuccess: false,
      detail: '实例连接信息获取失败:' + JSON.stringify(linkRes)
    }
  }
  return { isSuccess: true, link: link, tableName: tableName }
}

$funcs['server-file'] = {
  fileTxt: function(_sys, node, id, data, cb) {
    var result = {}
    var obj = {
      ext: 'txt',
      data: data
    }

    var uploadResult = uploadFile(obj)

    if (uploadResult.status === 0) {
      result = {
        status: 0,
        result: {
          isSuccess: true,
          fileInfo: {
            文件名称: uploadResult.result.name,
            文件大小: uploadResult.result.size,
            媒体类型: uploadResult.result.mimeType
          }
        }
      }
    } else {
      result = uploadResult
      result.result.isSuccess = false
    }

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },

  fileBase64: function(_sys, node, id, paramsObj, cb) {
    let ext
    let data
    if (typeof paramsObj === 'object') {
      ext = paramsObj.ext
      data = paramsObj.data
    } else {
      ext = 'txt'
      data = paramsObj
    }
    var result = {}
    var obj = {
      ext: ext,
      data: data,
      format: 'base64'
    }

    var uploadResult = uploadFile(obj)

    if (uploadResult.status === 0) {
      result = {
        status: 0,
        result: {
          isSuccess: true,
          fileInfo: {
            文件名称: uploadResult.result.name,
            文件大小: uploadResult.result.size,
            媒体类型: uploadResult.result.mimeType
          }
        }
      }
    } else {
      result = uploadResult
      result.result.isSuccess = false
    }

    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  uploadUrlFile: function(_sys, node, id, props, cb) {
    var urls = props.urls
    if (!urls) {
      cb && cb('fail', { isSuccess: false, detail: 'urls不能为空' })
      return
    } else if (!(urls instanceof Array)) {
      cb && cb('fail', { isSuccess: false, detail: 'urls必须为数组' })
      return
    }
    var params = { urls: urls }

    var result = uploadFiles(params)

    var translation = []

    if (result && result.status === 0) {
      result.result.files.map(function(item) {
        var translationObj = {
          文件类型: item.mimeType,
          文件大小: item.size,
          路径前缀: item.pathPrefix,
          文件名称: item.name
        }
        if (item.resolution) {
          translationObj['分辨率'] = item.resolution
        }
        if (item.audioDuration) {
          translationObj['时长'] = item.audioDuration
        }
        translation.push(translationObj)
      })

      cb &&
        cb('success', {
          isSuccess: true,
          fileInfos: translation
        })
    } else {
      cb && cb('fail', { isSuccess: false, detail: result })
    }
  }
}

function _dyQueryConTransOpt() {
  return {
    eq: '=',
    gt: '>',
    lt: '<',
    gte: '>=',
    lte: '<=',
    beginsWith: 'begins_with'
  }
}

function _dyConTransOpt() {
  return {
    eq: '=',
    gt: '>',
    lt: '<',
    gte: '>=',
    lte: '<=',
    exist: 'attribute_exists',
    notExist: 'attribute_not_exists',
    contains: 'contains',
    beginsWith: 'begins_with',
    attributeExists: 'attribute_exists',
    attributeNotExists: 'attribute_not_exists',
    attributeType: 'attribute_type',
    sizeEq: '=',
    sizeGt: '>',
    sizeLt: '<',
    sizeGte: '>=',
    sizeLte: '<=',
    elmEq: '=',
    elmGt: '>',
    elmLt: '<',
    elmGte: '>=',
    elmLte: '<='
  }
}

function _dealDyQueryCons(cons, obj) {
  var col = cons.column
  if (col) {
    var isNum = false
    var isStr = false
    if (col.substr(0, 1) === 'N') {
      isNum = true
    } else if (col === 'SK') {
      isStr = true
    }
    var pk =
      [null, undefined].indexOf(cons.primary) < 0
        ? cons.primary + ''
        : cons.primary
    obj.key = { PK: pk || '' }
    if (col !== 'SK') {
      if (col.substr(0, 1) === 'N' || col.substr(0, 1) === 'S') {
        obj.index = 'L' + col
      }
    }
    if (cons.serial) {
      var condition = undefined
      var skey = col
      if (cons.serial.opt === 'range') {
        if (
          cons.serial.value &&
          cons.serial.value.start !== undefined &&
          cons.serial.value.start !== null &&
          cons.serial.value.end !== undefined &&
          cons.serial.value.end !== null
        ) {
          var start = cons.serial.value.start
          var end = cons.serial.value.end
          condition = {
            op: 'BETWEEN',
            args: [
              {
                op: 'key',
                data: skey
              },
              {
                op: 'value',
                data: isNum ? parseFloat(start) : isStr ? start + '' : start
              },
              {
                op: 'value',
                data: isNum ? parseFloat(end) : isStr ? end + '' : end
              }
            ]
          }
        }
      } else if (cons.serial.opt === 'noLimit') {
        condition = undefined
      } else {
        var transOpt = _dyQueryConTransOpt()
        if (cons.serial.value !== undefined && cons.serial.value !== null) {
          var serialValue = cons.serial.value
          condition = {
            op: transOpt[cons.serial.opt],
            args: [
              {
                op: 'key',
                data: skey
              },
              {
                op: 'value',
                data: isNum
                  ? parseFloat(serialValue)
                  : isStr
                  ? serialValue + ''
                  : serialValue
              }
            ]
          }
        }
      }
      if (condition) {
        obj.condition = condition
      }
    }
  }
  obj.desc = cons.desc
}

function _dealDyUpdates(updates) {
  var ops = []
  if (updates && updates.length > 0) {
    updates.forEach(function(item) {
      if (item.column !== undefined && item.column !== null) {
        var operator = undefined
        var value = item.value
        if (['inc', 'minus'].indexOf(item.op) >= 0) {
          value = parseFloat(value)
          operator = {
            op: 'SET',
            args: [
              {
                op: 'key',
                data: item.column
              },
              {
                op: '+',
                args: [
                  {
                    op: 'key',
                    data: item.column
                  },
                  {
                    op: 'value',
                    data: item.op === 'inc' ? value : -value
                  }
                ]
              }
            ]
          }
        } else {
          var op = item.op.toUpperCase()
          if (op === 'REMOVE') {
            operator = {
              op: op,
              args: [
                {
                  op: 'key',
                  data: item.column
                }
              ]
            }
          } else {
            var opValue = item.value
            if (['APPEND', 'INSERT', 'ADD', 'DELETE'].indexOf(op) >= 0) {
              if (!Array.isArray(opValue)) {
                opValue = [opValue]
              }
            }
            if (op === 'SET' && item.column === 'nTTL') {
              opValue = _dealDyTime(opValue)
            }
            if (
              item.column === 'SK' &&
              [null, undefined].indexOf(opValue) < 0
            ) {
              opValue = opValue + ''
            }
            operator = {
              op: op,
              args: [
                {
                  op: 'key',
                  data: item.column
                },
                {
                  op: 'value',
                  data: opValue
                }
              ]
            }
          }
        }
        if (operator) {
          ops.push(operator)
        }
      }
    })
  }
  return ops
}

// function _dyUpdateNew(PK, SK, id) {
//   // 根据pk，sk，select一次
//   var newCmd = {
//     key: { PK: PK || '' },
//     condition: {
//       op: '=',
//       args: [
//         {
//           op: 'key',
//           data: 'SK'
//         },
//         {
//           op: 'value',
//           data: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
//         }
//       ]
//     }
//   }
//   var result = _dyCmd(id, dyQuery, newCmd)
//   var data = {}
//   if (result && result.status === 0 && result.result.items) {
//     data = result.result.items[0] || {}
//   }
//   return data
// }

function _dyGenCons(cons) {
  // pred, column, comp, value
  var result = undefined
  var group = []
  if (cons && cons.length > 0) {
    cons.forEach(function(con) {
      var allowValue = con.value !== undefined && con.value !== null
      if (
        ['exist', 'notExist', 'attributeExists', 'attributeNotExists'].indexOf(
          con.comp
        ) >= 0
      ) {
        allowValue = true
      }
      if (con.column && con.comp && allowValue) {
        var isNum = false
        var isStr = false
        if (
          con.column.substr(0, 2) === 'SN' ||
          con.column.substr(0, 1) === 'n'
        ) {
          isNum = true
        } else if (con.column === 'SK') {
          isStr = true
        }
        var transOpt = _dyConTransOpt()
        var args = []
        if (['exist', 'notExist'].indexOf(con.comp) >= 0) {
          args = [
            {
              op: 'key',
              data: 'PK'
            }
          ]
        } else if (
          ['attributeExists', 'attributeNotExists'].indexOf(con.comp) >= 0
        ) {
          args = [
            {
              op: 'key',
              data: con.column
            }
          ]
        } else if (
          [
            'sizeEq',
            'sizeGt',
            'sizeLt',
            'sizeGte',
            'sizeLte',
            'elmEq',
            'elmGt',
            'elmLt',
            'elmGte',
            'elmLte'
          ].indexOf(con.comp) >= 0
        ) {
          args = [
            {
              op: 'size',
              args: [
                {
                  op: 'key',
                  data: con.column
                }
              ]
            },
            {
              op: 'value',
              data: parseFloat(con.value)
            }
          ]
        } else {
          args = [
            {
              op: 'key',
              data: con.column
            },
            {
              op: 'value',
              data: isNum
                ? parseFloat(con.value)
                : isStr
                ? con.value + ''
                : con.value
            }
          ]
        }
        var op = {
          op: transOpt[con.comp],
          args: args
        }
        if (group.length === 0) {
          group.push({ op: 'AND', args: [op] })
        } else {
          if (con.pred === 'or') {
            group.push({ op: 'AND', args: [op] })
          } else {
            var latestItem = group[group.length - 1]
            latestItem.args.push(op)
          }
        }
      }
    })
  }
  if (group.length > 0) {
    if (group.length === 1) {
      // 全and
      result = group[0]
    } else {
      // 带or
      result = { op: 'OR', args: [] }
      group.forEach(function(item) {
        result.args.push(item)
      })
    }
  }
  return result
}

function _transDyCol(obj, lang, columns) {
  var result = {}
  var objHeaderMap = {
    zh: {
      散列键: 'PK',
      排序键: 'SK',
      过期时间: 'nTTL',
      创建时间: 'STN'
    },
    en: {
      PK: 'PK',
      SK: 'SK',
      nTTL: 'nTTL',
      STN: 'STN'
    }
  }
  var map = objHeaderMap[lang]
  var _columns = columns || []
  if (obj && Object.keys(obj).length > 0) {
    Object.keys(obj).forEach(function(key) {
      var name = key
      var hasDefaultName = false
      _columns.forEach(function(item) {
        if (item.alias === name) {
          name = item.name
          hasDefaultName = true
        }
      })
      if (!hasDefaultName && map[key]) {
        name = map[key]
      }
      result[name] = obj[key]
    })
  }
  return result
}

function _dealDyCols(cols, lang, columns) {
  var targetCols = undefined
  if (cols && Array.isArray(cols)) {
    var colMapping = {
      zh: {
        散列键: 'PK',
        排序键: 'SK',
        过期时间: 'nTTL',
        创建时间: 'STN'
      },
      en: {
        PK: 'PK',
        SK: 'SK',
        nTTL: 'nTTL',
        STN: 'STN'
      }
    }
    var mapping = colMapping[lang || 'zh']
    var _columns = columns || []
    targetCols = []
    cols.forEach(function(col) {
      var name = col
      if (col && col.name) {
        name = col.name
      }
      var hasDefaultName = false
      _columns.forEach(function(item) {
        if (item.alias === name) {
          name = item.name
          hasDefaultName = true
        }
      })
      if (!hasDefaultName && mapping[name]) {
        name = mapping[name]
      }
      if (['PK', 'SK'].indexOf(name) < 0) {
        targetCols.push(name)
      }
    })
  }
  return targetCols
}

function _dyTransactItem($sys, id, opt, obj) {
  obj.table = _dyGetId(id)
  // var found = false
  if ($sys.$dyTransactionRecord && Array.isArray($sys.$dyTransactionRecord)) {
    // $dyTransactionRecord.forEach(function(trans) {
    //   if (!trans[opt] && !found) {
    //     found = true
    //     trans[opt] = obj
    //   }
    // })
    // if (!found) {
    var result = {}
    result[opt] = obj
    $sys.$dyTransactionRecord.push(result)
    // }
  }
}

function _dealDyTime(value) {
  var result = value
  var reg = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\s+(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/
  if (reg.test(result)) {
    var sTime = undefined
    if (result.split) {
      var timeList = result.split(' ')
      if (timeList.length === 2) {
        var ymd = timeList[0].split('-')
        var hms = timeList[1].split(':')
        if (ymd.length === 3 && hms.length === 3) {
          sTime = new Date(
            parseInt(ymd[0]),
            parseInt(ymd[1]) - 1,
            parseInt(ymd[2]),
            parseInt(hms[0]),
            parseInt(hms[1]),
            parseInt(hms[2])
          )
          sTime = sTime.getTime() + ''
          result = parseInt(sTime.substr(0, sTime.length - 3))
        }
      }
    }
  } else if (!isNaN(parseInt(value))) {
    // result = parseInt(value)
    result = parseInt((value + '').slice(0, 10))
  }
  return result
}

function _dealDyErrorDetail(result, isInsert) {
  var _result = result
  if (_result.result && _result.result.detail) {
    var lang = param._lang || 'zh'
    // 插入数据类型错误
    var changed = false
    var detail = _result.result.detail
    try {
      if (detail === 'ConditionalCheckFailedException') {
        changed = true
        if (lang === 'zh') {
          if (isInsert) {
            detail = '数据ID已存在'
          } else {
            detail = '判断条件验证不通过'
          }
        } else {
          if (isInsert) {
            detail = '数据ID已存在'
          } else {
            detail = '判断条件验证不通过'
          }
        }
      }
    } catch (e) {}
    if (changed) {
      _result.result.detail = detail
      // _result = JSON.parse(JSON.stringify(_result))
    }
  }
  return _result
}

$funcs['data-dynamoDb'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  dyInsert: function(_sys, node, id, header, data, cb) {
    var obj = {}
    var hasEmpty = false
    if (header && data) {
      var key = {}
      var item = {}
      header.forEach(function(head, index) {
        if (['PK', 'SK'].indexOf(head) >= 0) {
          // 作为key
          key[head] =
            [null, undefined].indexOf(data[index]) < 0
              ? data[index] + ''
              : data[index]
        } else {
          // 作为item
          if (head === 'nTTL') {
            item[head] = _dealDyTime(data[index])
          } else {
            item[head] = data[index]
          }
        }
      })
      if (key['PK'] === undefined) {
        key['PK'] = ''
      }
      if (!key['PK'] || !key['SK']) {
        hasEmpty = true
      }
      obj.key = key
      obj.item = item
      obj.condition = {
        op: 'attribute_not_exists',
        args: [
          {
            op: 'key',
            data: 'PK'
          }
        ]
      }
      // var condition = _dyGenCons(cons)
      // if (condition) {
      //   obj.condition = {
      //     op: 'AND',
      //     args: [notExists, condition]
      //   }
      // } else {
      //   obj.condition = notExists
      // }
    }

    var result = undefined

    if (hasEmpty) {
      var emptyMapping = {
        zh: '散列键和排序键必填',
        en: 'Partition key and sort key are requried'
      }
      result = {
        status: 400,
        result: { detail: emptyMapping[param._lang || 'zh'] }
      }
      cb && cb('fail', result)
      return result
    }

    result = _dyCmd(id, dyPutItem, obj)
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result, true)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyPutItem: function(_sys, node, id, header, data, cons, cb) {
    var obj = {}
    var hasEmpty = false
    if (header && data) {
      var key = {}
      var item = {}
      header.forEach(function(head, index) {
        if (['PK', 'SK'].indexOf(head) >= 0) {
          // 作为key
          key[head] =
            [null, undefined].indexOf(data[index]) < 0
              ? data[index] + ''
              : data[index]
        } else {
          // 作为item
          if (head === 'nTTL') {
            item[head] = _dealDyTime(data[index])
          } else {
            item[head] = data[index]
          }
        }
      })
      if (key['PK'] === undefined) {
        key['PK'] = ''
      }
      if (!key['PK'] || !key['SK']) {
        hasEmpty = true
      }
      obj.key = key
      obj.item = item
      var condition = _dyGenCons(cons)
      if (condition) {
        obj.condition = condition
      }
    }
    var result = undefined

    if (hasEmpty) {
      var emptyMapping = {
        zh: '散列键和排序键必填',
        en: 'Partition key and sort key are requried'
      }
      result = {
        status: 400,
        result: { detail: emptyMapping[param._lang || 'zh'] }
      }
      cb && cb('fail', result)
      return result
    }

    result = _dyCmd(id, dyPutItem, obj)
    if (result && result.status === 0) {
      var covered = true
      var dbHeaderMapping = {
        zh: {
          PK: '散列键',
          SK: '排序键',
          nTTL: '过期时间',
          STN: '创建时间'
        },
        en: {
          PK: 'PK',
          SK: 'SK',
          nTTL: 'nTTL',
          STN: 'STN'
        }
      }
      if (!result.result) {
        result.result = {}
      }
      if (!result.result.old) {
        result.result.old = {}
        covered = false
      }
      result.result.covered = covered
      // get Columns
      result.result.old._columns = _sys.get(node, id, 'columns')
      result.result.old._mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyBatchPutItem: function(_sys, node, id, data, cb) {
    var _data = []
    var hasEmpty = false
    if (data && Array.isArray(data) && data.length > 0) {
      data.forEach(function(item) {
        if (Object.prototype.toString.call(item) === '[object Object]') {
          var newItem = _transDyCol(
            item,
            param._lang || 'zh',
            _sys.get(node, id, 'columns')
          )
          if (newItem.nTTL) {
            newItem.nTTL = _dealDyTime(newItem.nTTL)
          }
          var pk =
            [null, undefined].indexOf(newItem.PK) < 0
              ? newItem.PK + ''
              : newItem.PK
          var sk =
            [null, undefined].indexOf(newItem.SK) < 0
              ? newItem.SK + ''
              : newItem.SK
          delete newItem.PK
          delete newItem.SK
          delete newItem.STN
          if (!pk || !sk) {
            hasEmpty = true
          }
          _data.push({
            put: {
              table: _dyGetId(id),
              key: {
                PK: pk,
                SK: sk
              },
              item: newItem
            }
          })
        }
      })
    }
    var result = undefined

    if (hasEmpty) {
      var emptyMapping = {
        zh: '散列键和排序键必填',
        en: 'Partition key and sort key are requried'
      }
      result = {
        status: 400,
        result: { detail: emptyMapping[param._lang || 'zh'] }
      }
      cb && cb('fail', result)
      return result
    }

    result = _dyCmd(id, dyBatchWriteItem, { items: _data }, true)
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  dyGetOneItem: function(_sys, node, id, PK, SK, strong, cols, cb) {
    var obj = {
      key: {
        PK: [null, undefined].indexOf(PK) < 0 ? PK + '' : PK,
        SK: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
      },
      strong: !!strong
    }
    var _cols = _dealDyCols(
      cols,
      param._lang || 'zh',
      _sys.get(node, id, 'columns')
    )
    if (_cols) {
      obj.columns = _cols
    }
    var result = _dyCmd(id, dyGetItem, obj)
    if (result && result.status === 0) {
      result.result = { data: result.result }
      var dbHeaderMapping = {
        zh: {
          PK: '散列键',
          SK: '排序键',
          nTTL: '过期时间',
          STN: '创建时间'
        },
        en: {
          PK: 'PK',
          SK: 'SK',
          nTTL: 'nTTL',
          STN: 'STN'
        }
      }
      if (!result.result.data) {
        result.result.data = {}
      }
      // get Columns
      result.result.data._columns = _sys.get(node, id, 'columns')
      result.result.data._mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyBatchGetItem: function(_sys, node, id, data, strong, cols, cb) {
    var result
    var _data = []
    if (data && Array.isArray(data) && data.length > 0) {
      data.forEach(function(item) {
        if (item && Array.isArray(item) && item.length === 2) {
          _data.push({
            table: _dyGetId(id),
            key: {
              PK:
                [null, undefined].indexOf(item[0]) < 0 ? item[0] + '' : item[0],
              SK:
                [null, undefined].indexOf(item[1]) < 0 ? item[1] + '' : item[1]
            }
          })
        }
      })
      var obj = { items: _data, strong: !!strong }
      var _cols = _dealDyCols(
        cols,
        param._lang || 'zh',
        _sys.get(node, id, 'columns')
      )
      if (_cols) {
        obj.columns = _cols
      }
      result = _dyCmd(id, dyBatchGetItem, obj, true)

      if (result && result.status === 0) {
        result.result = { items: result.result }
        if (result.result) {
          var isEmpty = false
          if (
            (result.result.items && result.result.items.length === 0) ||
            !result.result.items
          ) {
            isEmpty = true
            result.result.items = []
          } else if (
            result.result.items.join('') === '' ||
            result.result.items.join('') === null ||
            result.result.items.join('') === undefined
          ) {
            isEmpty = true
            result.result.items = []
          }

          var dbHeaderMapping = {
            zh: {
              PK: '散列键',
              SK: '排序键',
              nTTL: '过期时间',
              STN: '创建时间'
            },
            en: {
              PK: 'PK',
              SK: 'SK',
              nTTL: 'nTTL',
              STN: 'STN'
            }
          }
          // get Columns
          result.result.columns = _sys.get(node, id, 'columns')
          result.result.mapping = dbHeaderMapping[param._lang || 'zh']
          result = JSON.parse(JSON.stringify(result))
        }
      }
      if (result && result.status !== 0) {
        result = _dealDyErrorDetail(result)
      }
    } else {
      result = {
        status: 500,
        result: {
          detail: '数据ID列表必须为数组类型且不可为空'
        }
      }
    }

    if (cb) {
      if (result && result.status === 0) {
        if (isEmpty === true) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dySelect: function(_sys, node, id, cons, limit, start, strong, cols, cb) {
    var obj = {}

    _dealDyQueryCons(cons, obj)
    if (limit !== undefined && limit !== null) {
      obj.limit = parseFloat(limit)
    }
    if (start !== undefined && start !== null) {
      obj.start = start
      if (typeof obj.start === 'object') {
        obj.start = _transDyCol(
          obj.start,
          param._lang || 'zh',
          _sys.get(node, id, 'columns')
        )
      }
    }
    obj.strong = !!strong
    var _cols = _dealDyCols(
      cols,
      param._lang || 'zh',
      _sys.get(node, id, 'columns')
    )
    if (_cols) {
      obj.columns = _cols
    }
    var result = _dyCmd(id, dyQuery, obj)
    if (result && result.status === 0) {
      if (result.result) {
        if (
          (result.result.items && result.result.items.length === 0) ||
          !result.result.items
        ) {
          result.result.items = []
        }
        var dbHeaderMapping = {
          zh: {
            PK: '散列键',
            SK: '排序键',
            nTTL: '过期时间',
            STN: '创建时间'
          },
          en: {
            PK: 'PK',
            SK: 'SK',
            nTTL: 'nTTL',
            STN: 'STN'
          }
        }
        // get Columns
        result.result.columns = _sys.get(node, id, 'columns')
        result.result.mapping = dbHeaderMapping[param._lang || 'zh']
        // result = JSON.parse(JSON.stringify(result))
      }
    }
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.items && result.result.items.length === 0) ||
            !result.result.items)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyOriginalSelect: function(
    _sys,
    node,
    id,
    cons,
    limit,
    start,
    strong,
    cols,
    cb
  ) {
    var obj = {}

    _dealDyQueryCons(cons, obj)
    if (limit !== undefined && limit !== null) {
      obj.limit = parseFloat(limit)
    }
    if (start !== undefined && start !== null) {
      obj.start = start
      if (typeof obj.start === 'object') {
        obj.start = _transDyCol(
          obj.start,
          param._lang || 'zh',
          _sys.get(node, id, 'columns')
        )
      }
    }
    obj.strong = !!strong
    var _cols = _dealDyCols(
      cols,
      param._lang || 'zh',
      _sys.get(node, id, 'columns')
    )
    if (_cols) {
      obj.columns = _cols
    }
    var result = _dyCmd(id, dyQuery, obj)
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        if (
          result.result &&
          ((result.result.items && result.result.items.length === 0) ||
            !result.result.items)
        ) {
          cb('successEmpty', result)
        } else {
          cb('success', result)
        }
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyUpdateItem: function(_sys, node, id, PK, SK, updates, cons, cb) {
    var obj = {
      key: {
        PK: [null, undefined].indexOf(PK) < 0 ? PK + '' : PK,
        SK: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
      }
    }
    var ops = _dealDyUpdates(updates)
    if (ops.length > 0) {
      obj.ops = ops
    }
    var condition = _dyGenCons(cons)
    if (condition) {
      obj.condition = condition
    }
    var result = _dyCmd(id, dyUpdateItem, obj)
    if (result && result.status === 0) {
      var dbHeaderMapping = {
        zh: {
          PK: '散列键',
          SK: '排序键',
          nTTL: '过期时间',
          STN: '创建时间'
        },
        en: {
          PK: 'PK',
          SK: 'SK',
          nTTL: 'nTTL',
          STN: 'STN'
        }
      }
      if (!result.result) {
        result.result = {}
      }
      // if (!result.result.old) {
      //   result.result.old = {}
      // }
      // // get Columns
      // result.result.old._columns = _sys.get(node, id, 'columns')
      // result.result.old._mapping = dbHeaderMapping[param._lang || 'zh']

      if (!result.result.new) {
        result.result.new = {}
      }
      // result.result.new = _dyUpdateNew(PK, SK, id)
      // get Columns
      result.result.new._columns = _sys.get(node, id, 'columns')
      result.result.new._mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyDeleteItem: function(_sys, node, id, PK, SK, cons, cb) {
    var obj = {
      key: {
        PK: [null, undefined].indexOf(PK) < 0 ? PK + '' : PK,
        SK: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
      }
    }
    var condition = _dyGenCons(cons)
    if (condition) {
      obj.condition = condition
    }
    var result = _dyCmd(id, dyDeleteItem, obj)
    if (result && result.status === 0) {
      var dbHeaderMapping = {
        zh: {
          PK: '散列键',
          SK: '排序键',
          nTTL: '过期时间',
          STN: '创建时间'
        },
        en: {
          PK: 'PK',
          SK: 'SK',
          nTTL: 'nTTL',
          STN: 'STN'
        }
      }
      if (!result.result) {
        result.result = {}
      }
      if (!result.result.old) {
        result.result.old = {}
      }
      // get Columns
      result.result.old._columns = _sys.get(node, id, 'columns')
      result.result.old._mapping = dbHeaderMapping[param._lang || 'zh']
      // result = JSON.parse(JSON.stringify(result))
    }
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  dyBatchDelItem: function(_sys, node, id, data, cb) {
    var _data = []
    if (data && Array.isArray(data) && data.length > 0) {
      data.forEach(function(item) {
        if (item && Array.isArray(item) && item.length === 2) {
          _data.push({
            delete: {
              table: _dyGetId(id),
              key: {
                PK:
                  [null, undefined].indexOf(item[0]) < 0
                    ? item[0] + ''
                    : item[0],
                SK:
                  [null, undefined].indexOf(item[1]) < 0
                    ? item[1] + ''
                    : item[1]
              }
            }
          })
        }
      })
    }
    var result = _dyCmd(id, dyBatchWriteItem, { items: _data }, true)
    if (result && result.status !== 0) {
      result = _dealDyErrorDetail(result)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  dyTransactInsertItem: function(_sys, node, id, header, data) {
    var obj = {}
    if (header && data) {
      var key = {}
      var item = {}
      header.forEach(function(head, index) {
        if (['PK', 'SK'].indexOf(head) >= 0) {
          // 作为key
          key[head] =
            [null, undefined].indexOf(data[index]) < 0
              ? data[index] + ''
              : data[index]
        } else {
          // 作为item
          if (head === 'nTTL') {
            item[head] = _dealDyTime(data[index])
          } else {
            item[head] = data[index]
          }
        }
      })
      if (key['PK'] === undefined) {
        key['PK'] = ''
      }
      obj.key = key
      obj.item = item
      obj.condition = {
        op: 'attribute_not_exists',
        args: [
          {
            op: 'key',
            data: 'PK'
          }
        ]
      }
      // var condition = _dyGenCons(cons)
      // if (condition) {
      //   obj.condition = {
      //     op: 'AND',
      //     args: [notExists, condition]
      //   }
      // } else {
      //   obj.condition = notExists
      // }
    }
    _dyTransactItem(_sys, id, 'put', obj)
  },
  dyTransactPutItem: function(_sys, node, id, header, data, cons) {
    var obj = {}
    if (header && data) {
      var key = {}
      var item = {}
      header.forEach(function(head, index) {
        if (['PK', 'SK'].indexOf(head) >= 0) {
          // 作为key
          key[head] =
            [null, undefined].indexOf(data[index]) < 0
              ? data[index] + ''
              : data[index]
        } else {
          // 作为item
          if (head === 'nTTL') {
            item[head] = _dealDyTime(data[index])
          } else {
            item[head] = data[index]
          }
        }
      })
      if (key['PK'] === undefined) {
        key['PK'] = ''
      }
      obj.key = key
      obj.item = item
      var condition = _dyGenCons(cons)
      if (condition) {
        obj.condition = condition
      }
    }
    _dyTransactItem(_sys, id, 'put', obj)
  },
  dyTransactUpdateItem: function(_sys, node, id, PK, SK, updates, cons) {
    var obj = {
      key: {
        PK: [null, undefined].indexOf(PK) < 0 ? PK + '' : PK,
        SK: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
      }
    }
    var ops = _dealDyUpdates(updates)
    if (ops.length > 0) {
      obj.ops = ops
    }
    var condition = _dyGenCons(cons)
    if (condition) {
      obj.condition = condition
    }
    _dyTransactItem(_sys, id, 'update', obj)
  },
  dyTransactDeleteItem: function(_sys, node, id, PK, SK, cons) {
    var obj = {
      key: {
        PK: [null, undefined].indexOf(PK) < 0 ? PK + '' : PK,
        SK: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
      }
    }
    var condition = _dyGenCons(cons)
    if (condition) {
      obj.condition = condition
    }
    _dyTransactItem(_sys, id, 'delete', obj)
  },
  dyTransactCheckItem: function(_sys, node, id, PK, SK, cons) {
    var obj = {
      key: {
        PK: [null, undefined].indexOf(PK) < 0 ? PK + '' : PK,
        SK: [null, undefined].indexOf(SK) < 0 ? SK + '' : SK
      }
    }
    var condition = _dyGenCons(cons)
    if (condition) {
      obj.condition = condition
    }
    _dyTransactItem(_sys, id, 'check', obj)
  }
}

$funcs['data-dyTransaction'] = {
  runDyTransaction: function(_sys, node, id, params, cb) {
    var action = $staticFns[id]
    if (!action) {
      cb('fail', { status: 500, detail: 'no transaction' })
      return
    }
    _sys.$dyTransactionRecord = []
    action.call(this, params || {}, _sys, node)
    var cmd = _sys.$dyTransactionRecord
    delete _sys.$dyTransactionRecord
    var result = dyTransactWriteItems({ items: cmd })
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  }
}

$funcs['data-wechat'] = {
  wxUserInfo: function(_sys, node, id, code, cb) {
    var appId = _sys.get(node, id, 'appId')
    var appSecret = _sys.get(node, id, 'appSecret')

    var obj = {
      code: code,
      appId: appId,
      appSecret: appSecret
    }

    var result = wxUserInfo(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}
$funcs['server-socket'] = {
  msgToAll: function(_sys, node, id, sid, message, cb) {
    var uniqueId = param._eid ? param._eid : param._uid
    var result = _msgTo(uniqueId + '_' + sid, '', message || {})
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('failed', result)
      }
    }
    return result
  },
  msgToRoom: function(_sys, node, id, sid, rmId, message, cb) {
    if (!rmId) {
      cb('failed', {})
      return
    }
    var uniqueId = param._eid ? param._eid : param._uid
    var result = _msgTo(rmId + '.' + uniqueId + '_' + sid, '', message || {})
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('failed', {})
      }
    }
    return result
  },
  msgToPerson: function(_sys, node, id, sid, userCid, message, cb) {
    if (!userCid) {
      cb('failed', {})
      return
    }
    var uniqueId = param._eid ? param._eid : param._uid
    var result = _msgTo(uniqueId + '_' + sid, userCid, message || {})
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('failed', result)
      }
    }
    return result
  },
  getRoomUser: function(_sys, node, id, sid, name, cb) {
    var uniqueId = param._eid ? param._eid : param._uid
    var result = imMembers({
      id: '' + name + '.' + uniqueId + '_' + sid,
      from: 'server'
    })
    var data = result.result
    if (cb) {
      if (result && result.status === 0) {
        // cb('success', {list: data.users,number: data.total})
        cb('success', { list: data.users, number: data.total })
      } else {
        cb('failed', {})
      }
    }
    return result
  },
  getOnlineUser: function(_sys, node, id, sid, cb) {
    var uniqueId = param._eid ? param._eid : param._uid
    var result = imMembers({
      id: uniqueId + '_' + sid,
      from: 'server'
    })
    var data = result.result
    if (cb) {
      if (result && result.status === 0) {
        cb('success', { list: data.users, number: data.total })
      } else {
        cb('failed', {})
      }
    }
    return result
  },
  getRoomList: function(_sys, node, id, sid, cb) {
    var uniqueId = param._eid ? param._eid : param._uid
    var result = imRoomListBySid({
      id: uniqueId + '_' + sid,
      from: 'server'
    })
    var data = result.result
    if (cb) {
      if (result && result.status === 0) {
        cb('success', data.rooms)
      } else {
        cb('failed', {})
      }
    }
    return result
  },
  closeRoom: function(_sys, node, id, sid, name) {
    var uniqueId = param._eid ? param._eid : param._uid
    var result = imKick({
      to: '@' + name + '.' + uniqueId + '_' + sid,
      from: 'server'
    })
    return result
  }
}
$funcs['server-api'] = {
  changeUrl: function(_sys, node, id, url) {
    _sys.set(node, id, 'url', url)
  },
  sendServerApiReq: function(
    _sys,
    node,
    id,
    method,
    _url,
    reqType,
    noHeader,
    headers,
    body,
    timeout,
    cb
  ) {
    var _cb
    var _timeout
    var verify = _sys.get(node, id, 'verify')
    var noHeader = _sys.get(node, id, 'noHeader')
    if (arguments) {
      if (arguments.length === 9) {
        _cb = timeout
      } else {
        _cb = cb
        _timeout = isNaN(timeout) ? undefined : parseFloat(timeout)
      }
    }
    _sendServerApiReq(
      _sys,
      node,
      id,
      method,
      _url,
      reqType,
      noHeader,
      headers,
      body,
      _timeout,
      verify,
      _cb
    )
  },
  sendServerApiRequest: function(
    _sys,
    node,
    id,
    headers,
    body,
    reqUrl,
    timeout,
    method,
    reqType,
    cb
  ) {
    var _method = _sys.get(node, id, 'method') || 'POST'
    var _reqType = _sys.get(node, id, 'reqType') || 'JSON'
    var noHeader = _sys.get(node, id, 'noHeader')
    var raw = _sys.get(node, id, 'raw')
    var verify = _sys.get(node, id, 'verify')
    var cert = _sys.get(node, id, 'cert')
    var certKey = _sys.get(node, id, 'certKey')
    var resTransType = _sys.get(node, id, 'resTransType')
    var bodyParams = _sys.get(node, id, 'bodyParams') || []
    var _cb
    var _timeout
    var _reqUrl

    if (arguments) {
      if (arguments.length === 6) {
        // 旧数据兼容
        _cb = timeout
      } else if (arguments.length === 7) {
        // 旧数据兼容
        _cb = timeout
        _timeout = isNaN(reqUrl) ? undefined : parseFloat(reqUrl)
      } else if (arguments.length === 8) {
        _cb = method
        _timeout = isNaN(timeout) ? undefined : parseFloat(timeout)
        _reqUrl = reqUrl
      } else {
        _method = method || _method
        _reqType = reqType || _reqType
        _cb = cb
        _timeout = isNaN(timeout) ? undefined : parseFloat(timeout)
        _reqUrl = reqUrl
      }
    }
    var getFullURL = function(oUrl, allowSameScope) {
      var url = oUrl.trim()
      if (
        url &&
        url.substring &&
        url.substr(0, 4) !== 'http' &&
        url.substr(0, 2) !== '//'
      ) {
        if (allowSameScope && url.substr(0, 1) === '/') {
          // 允许同域名下url
          return url
        }
        url = 'http://' + url
      }
      return url
    }
    var addBodyParams = function(_url, _body) {
      var result = _url
      var _bodyParams = ''
      if (_body && Object.keys(_body).length >= 0) {
        Object.keys(_body).forEach(function(key, i) {
          if (i === 0) {
            _bodyParams +=
              encodeURIComponent(key) + '=' + encodeURIComponent(_body[key])
          } else {
            _bodyParams +=
              '&' +
              encodeURIComponent(key) +
              '=' +
              encodeURIComponent(_body[key])
          }
        })
      }
      if (_url.indexOf('?') >= 0) {
        var urlArr = _url.split('?')
        if (urlArr.length === 2) {
          result =
            urlArr[0] +
            '?' +
            urlArr[1] +
            (_bodyParams === '' ? _bodyParams : '&' + _bodyParams)
        }
      } else {
        result = _url + (_bodyParams === '' ? _bodyParams : '?' + _bodyParams)
      }
      return result
    }
    // _url useless
    var cUrl = _reqUrl || _sys.get(node, id, 'url')
    if (_method === 'GET' && cUrl) {
      if (cUrl.indexOf('#') >= 0) {
        // 带#
        var restArr = cUrl.split('#')
        if (restArr.length === 2) {
          cUrl = addBodyParams(restArr[0], body) + '#' + restArr[1]
        }
      } else {
        // 不带#
        cUrl = addBodyParams(cUrl, body)
      }
    }
    var url = cUrl ? getFullURL(cUrl, true) : undefined
    var _headers = {}
    // 对header处理
    if (headers) {
      Object.keys(headers).forEach(function(head) {
        _headers[head] = headers[head] + ''
      })
    }
    if (_reqType === 'FORM') {
      var newBody = ''
      for (var i in body) {
        newBody = newBody + '&' + i + '=' + encodeURIComponent(body[i])
      }
      body = newBody.slice(1)
    }

    var _files = []
    if (_reqType === 'FORM-DATA') {
      if (body && Object.keys(body).length >= 0) {
        bodyParams.forEach(bodyParam => {
          Object.keys(body).forEach(bodyKey => {
            if (
              typeof bodyParam === 'object' &&
              bodyParam.type === 'Base64' &&
              bodyKey === bodyParam.name
            ) {
              if (typeof body[bodyKey] === 'object') {
                _files.push({
                  fieldname: bodyKey,
                  filename: body[bodyKey].filename,
                  data: body[bodyKey].data
                })
                body[bodyKey] = body[bodyKey].data
              }
            }
          })
        })
      }
    }

    var req = {
      url: url,
      method: _method,
      type: _reqType,
      noHeader: noHeader,
      header: _headers,
      body: body,
      raw: raw
    }

    if (_files.length > 0) {
      req['files'] = _files
    }

    if (_timeout !== undefined) {
      req.timeout = _timeout
    }
    if (verify) {
      // req.verify = verify
      req.sslSkipVerify = verify
    } else if (cert && certKey) {
      req.sslConfig = {
        cert: cert,
        key: certKey
      }
    }
    if (noHeader) {
      req.noHeader = noHeader
    }
    if (resTransType && resTransType !== 'none') {
      if (resTransType === 'gbk') {
        req.outputEncoding = 'gbk'
      } else {
        req.output = resTransType
      }
    }
    req.url = req.url.trim()
    var result = serverApi(req)
    if (_cb && result) {
      if (result.status === 0) {
        if (!!raw) {
          try {
            result.result.data = JSON.parse(result.result.body)
          } catch (err) {
            result.result.data = result.result.body
          }
        }
        _cb('success', result.result)
      } else {
        if (result.result) {
          var detail = result.result.detail || ''
          if (result.result.code === 408 || detail.match(/"code(\\*)":408/)) {
            _cb('timeout', result.result)
          } else {
            _cb('fail', result.result)
          }
        } else {
          _cb('fail', { detail: 'error' })
        }
      }
    }
  }
}
$funcs['data-live'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  getLivePushUrl: function(_sys, node, id, streamName, duration, cb) {
    var appName = _sys.get(node, id, 'appName')
    var config = _getWorkConfig('live')
    var result = undefined
    var obj = undefined
    if (config.provider === 'tencentyun') {
      obj = {
        streamName: appName + '_' + streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePush', obj)
    } else {
      obj = {
        appName: appName,
        streamName: streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePush', obj)
    }
    if (result && result.status === 0) {
      var _result = result
      if (
        _result.result &&
        _result.result.url &&
        _result.result.url.indexOf(appName) >= 0
      ) {
        _result = JSON.parse(JSON.stringify(result))
        var loc = undefined
        if (config.provider === 'tencentyun') {
          loc = _result.result.url.indexOf(appName) - 1
          _result.result.server = _result.result.url.substr(0, loc)
          _result.result.key = _result.result.url.substr(
            loc + 1,
            _result.result.url.length
          )
        } else {
          loc = _result.result.url.indexOf(appName) + appName.length
          _result.result.server = _result.result.url.substr(0, loc)
          _result.result.key = _result.result.url.substr(
            loc + 1,
            _result.result.url.length
          )
        }
      }
      result = _result
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getLivePullUrls: function(_sys, node, id, streamName, duration, cb) {
    var appName = _sys.get(node, id, 'appName')
    var config = _getWorkConfig('live')
    var result = undefined
    var obj = undefined
    if (config.provider === 'tencentyun') {
      obj = {
        streamName: appName + '_' + streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePull', obj)
    } else {
      obj = {
        appName: appName,
        streamName: streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePull', obj)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getLivePushOnlineList: function(_sys, node, id, streamName, cb) {
    var appName = _sys.get(node, id, 'appName')
    var config = _getWorkConfig('live')
    var result = undefined
    var obj = undefined
    if (config.provider === 'tencentyun') {
      obj = {}
      if (streamName) {
        obj.streamName = appName + '_' + streamName
      }
      result = _liveCmd('liveList', obj)
    } else {
      obj = {
        appName: appName
      }
      if (streamName) {
        obj.streamName = streamName
      }
      result = _liveCmd('liveList', obj)
    }
    if (result && result.status === 0) {
      var _result = result
      if (_result.result) {
        _result = JSON.parse(JSON.stringify(_result))
        _result.result = {
          onlineInfo: _result.result.liveList || []
        }
      }
      result = _result
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  getLiveRecordList: function(
    _sys,
    node,
    id,
    streamName,
    startTime,
    endTime,
    cb
  ) {
    var appName = _sys.get(node, id, 'appName')
    var getUTCTime = function(time) {
      var temp = time
      var reg = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\dZ$/g
      if (!reg.test(time)) {
        var sTime = undefined
        if (time && isNaN(time) && time.split) {
          var timeList = time.split(' ')
          if (timeList.length === 2) {
            var ymd = timeList[0].split('-')
            var hms = timeList[1].split(':')
            if (ymd.length === 3 && hms.length === 3) {
              sTime = new Date(
                parseInt(ymd[0]),
                parseInt(ymd[1]) - 1,
                parseInt(ymd[2]),
                parseInt(hms[0]),
                parseInt(hms[1]),
                parseInt(hms[2])
              )
            } else {
              sTime = new Date(time)
            }
          } else {
            sTime = new Date(time)
          }
        } else {
          sTime = new Date(time)
        }
        if (sTime && !isNaN(sTime.getDate())) {
          var formatUTC = function(date) {
            // 2019-06-10T00:00:00Z
            var timeFormat = function(s) {
              return s < 10 ? '0' + s : s
            }
            return (
              date.getUTCFullYear() +
              '-' +
              timeFormat(date.getUTCMonth() + 1) +
              '-' +
              timeFormat(date.getUTCDate()) +
              'T' +
              timeFormat(date.getUTCHours()) +
              ':' +
              timeFormat(date.getUTCMinutes()) +
              ':' +
              timeFormat(date.getUTCSeconds()) +
              'Z'
            )
          }
          temp = formatUTC(sTime)
        }
      }
      return temp
    }
    var config = _getWorkConfig('live')
    var result = undefined
    var obj = undefined
    if (config.provider === 'tencentyun') {
      obj = {
        startTime: getUTCTime(startTime),
        endTime: getUTCTime(endTime)
      }
      if (streamName) {
        obj.streamName = appName + '_' + streamName
      }
      result = _liveCmd('vodList', obj)
    } else {
      obj = {
        appName: appName,
        startTime: getUTCTime(startTime),
        endTime: getUTCTime(endTime)
      }
      if (streamName) {
        obj.streamName = streamName
      }
      result = _liveCmd('vodList', obj)
    }
    if (result && result.status === 0) {
      var _result = result
      if (_result.result) {
        _result = JSON.parse(JSON.stringify(_result))
        _result.result = {
          recordInfo: _result.result.vodList || []
        }
      }
      result = _result
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  livePushUrl: function(_sys, node, id, appName, streamName, duration, cb) {
    var config = _getWorkConfig('live')
    var result = undefined
    var obj = undefined
    if (config.provider === 'tencentyun') {
      obj = {
        streamName: appName + '_' + streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePush', obj)
    } else {
      obj = {
        appName: appName,
        streamName: streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePush', obj)
    }
    if (result && result.status === 0) {
      var _result = result
      if (
        _result.result &&
        _result.result.url &&
        _result.result.url.indexOf(appName) >= 0
      ) {
        _result = JSON.parse(JSON.stringify(result))
        var loc = undefined
        if (config.provider === 'tencentyun') {
          loc = _result.result.url.indexOf(appName) - 1
          _result.result.server = _result.result.url.substr(0, loc)
          _result.result.key = _result.result.url.substr(
            loc + 1,
            _result.result.url.length
          )
        } else {
          loc = _result.result.url.indexOf(appName) + appName.length
          _result.result.server = _result.result.url.substr(0, loc)
          _result.result.key = _result.result.url.substr(
            loc + 1,
            _result.result.url.length
          )
        }
      }
      result = _result
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  },
  livePullUrls: function(_sys, node, id, appName, streamName, duration, cb) {
    var config = _getWorkConfig('live')
    var result = undefined
    var obj = undefined
    if (config.provider === 'tencentyun') {
      obj = {
        streamName: appName + '_' + streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePull', obj)
    } else {
      obj = {
        appName: appName,
        streamName: streamName
      }
      if (duration !== undefined) {
        obj.duration = duration
      }
      result = _liveCmd('livePull', obj)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}

$funcs['data-iotMessage'] = {
  startSubscribe: function(_sys, node, id, cb) {
    var params = {}
    var topics = _sys.get(node, id, 'topics') || []
    params.topics = topics.map(function(topic) {
      if (topic.def) {
        return topic.def
      }
    })
    var config = _getWorkConfig('iot')
    params.platform = config.provider
    delete config.provider
    params.config = config
    params.config.consumerGroupId = _sys.get(node, id, 'groupId')
    params.config.releaseConsumerGroupId = _sys.get(node, id, 'releaseGroupId')
    var result = _iotMessageCmd(id, iotStart, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result)
      } else {
        if (result.result) {
          cb('fail', result)
        } else {
          cb('fail', {
            status: result.status,
            result: {
              detail: 'error'
            }
          })
        }
      }
    }
    return result
  },
  stopSubscribe: function(_sys, node, id, cb) {
    var params = {
      consumerGroupId: _sys.get(node, id, 'groupId'),
      releaseConsumerGroupId: _sys.get(node, id, 'releaseGroupId')
    }
    var config = _getWorkConfig('iot')
    params.platform = config.provider
    var result = _iotMessageCmd(id, iotStop, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result)
      } else {
        if (result.result) {
          cb('fail', result)
        } else {
          cb('fail', {
            status: result.status,
            result: {
              detail: 'error'
            }
          })
        }
      }
    }
    return result
  },
  getSubscribeStatus: function(_sys, node, id, cb) {
    var result = _iotMessageCmd(id, iotGetStatus, {})
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          cb('fail', result.result)
        } else {
          cb('fail', {
            detail: 'error'
          })
        }
      }
    }
    return result
  }
}

$funcs['data-excel'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  excelBuildFormat: function(_sys, node, id, data, cb) {
    var result = excelBuildFormat(data)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
    return result
  }
}

function _wxGenOrder(data, apiKey, cert, certKey, url) {
  // 处理数据
  var _data = {}
  if (data && Object.keys(data).length > 0) {
    Object.keys(data).forEach(function(key) {
      var tempData = data[key]
      if (tempData !== undefined && tempData !== null && tempData !== '') {
        _data[key] = tempData
      }
    })
  }
  if (!_data.nonce_str) {
    // 随机32位字串
    function randomString(len) {
      var $chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'
      var maxPos = $chars.length
      var pwd = ''
      for (var i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    }
    _data.nonce_str = randomString(32)
  }

  // 生成签名
  var signResult = wxpaySign({
    dataJson: _data,
    apiKey: apiKey
  })

  var sign = undefined
  if (signResult && signResult.status === 0) {
    var _result = signResult.result
    if (_result && (_result.sign || _result.Sign)) {
      sign = _result.sign || _result.Sign
    }
  } else {
    return {
      status: 'fail',
      reason:
        (signResult && signResult.result && signResult.result.detail) ||
        'wrong params'
    }
  }

  // 转xml
  var jsonData = ''
  var noneCDataKey = ['total_fee']
  Object.keys(_data)
    .sort()
    .forEach(function(key) {
      var parmData = _data[key]
      if (parmData !== undefined && parmData !== null && parmData !== '') {
        if (Array.prototype.toString.call(parmData) !== '[object String]') {
          parmData = JSON.stringify(parmData)
        }
        if (noneCDataKey.indexOf(key) >= 0) {
          jsonData += '<' + key + '>' + parmData + '</' + key + '>'
        } else {
          jsonData +=
            '<' + key + '>' + '<![CDATA[' + parmData + ']]>' + '</' + key + '>'
        }
      }
    })
  var xmlData =
    '<xml>' + jsonData + '<sign>' + '<![CDATA[' + sign + ']]>' + '</sign></xml>'

  // 发送请求
  var req = {
    url: url,
    method: 'POST',
    type: 'XML',
    body: xmlData,
    sslConfig: {
      cert: cert,
      key: certKey
    }
  }
  var result = serverApi(req)
  var xmlDataRes =
    result && result.result ? xml2json(result.result).result : undefined
  var testSign = xmlDataRes && xmlDataRes.xml ? xmlDataRes.xml.sign : undefined
  var signData = xmlDataRes ? xmlDataRes.xml : undefined
  var reason = undefined // 记录错误信息
  //验证签名
  if (
    signData &&
    signData.return_code === 'SUCCESS' &&
    signData.result_code === 'SUCCESS'
  ) {
    delete signData.sign
    Object.keys(signData).forEach(function(key) {
      if (!isNaN(signData[key])) {
        signData[key] = signData[key] + ''
      } else if (
        Array.prototype.toString.call(signData[key]) !== '[object String]'
      ) {
        signData[key] = JSON.stringify(signData[key])
      }
    })
    var xmlSignResult = wxpaySign({
      dataJson: signData,
      apiKey: apiKey
    })
    if (xmlSignResult && xmlSignResult.status === 0) {
      var xmlSign = xmlSignResult.result.sign || xmlSignResult.result.Sign
      if (xmlSign === testSign) {
        return { status: 'success', data: signData }
      }
    } else {
      reason =
        (xmlSignResult &&
          xmlSignResult.result &&
          xmlSignResult.result.detail) ||
        'wrong params'
    }
  } else {
    reason = signData.return_msg || 'wrong params'
  }
  return { status: 'fail', reason: reason }
}

$funcs['data-encrypt'] = {
  paramResult: function(_sys, node, id, result) {
    $result = result
  },
  encryptHash: function(_sys, node, id, propObj, callback) {
    var algorithm = _sys.get(node, id, 'algorithm')
    var params = {
      algorithm: algorithm || 'md5',
      data: propObj.data,
      dataEncode: propObj.dataEncode,
      dataDecode: propObj.dataDecode
    }

    var result
    if (propObj.dataDecode === 'url') {
      result = encryptHashURL(params)
    } else {
      result = encryptHash(params)
    }
    // var result = encryptHash(params)

    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  encryptHMAC: function(_sys, node, id, propObj, callback) {
    var algorithm = _sys.get(node, id, 'algorithm')
    var key = _sys.get(node, id, 'key')
    var keyEncode = _sys.get(node, id, 'keyEncode')
    var params = {
      algorithm: algorithm || 'md5',
      data: propObj.data,
      dataEncode: propObj.dataEncode || 'base64',
      dataDecode: propObj.dataDecode || 'raw',
      key: propObj.key || key,
      keyEncode: propObj.keyEncode || keyEncode || 'raw'
    }
    var result = encryptHMAC(params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  encryptSymmetric: function(_sys, node, id, propObj, callback) {
    var algorithm = _sys.get(node, id, 'algorithm')
    var key = _sys.get(node, id, 'key')
    var keyEncode = _sys.get(node, id, 'keyEncode')
    var iv = _sys.get(node, id, 'iv')
    var ivEncode = _sys.get(node, id, 'ivEncode')
    var mode = _sys.get(node, id, 'workModel')
    var padding = _sys.get(node, id, 'paddingAlgorithm')

    var params = {
      algorithm: algorithm || 'aes',
      data: propObj.data,
      dataEncode: propObj.dataEncode || 'base64',
      dataDecode: propObj.dataDecode || 'raw',
      key: propObj.key || key,
      keyEncode: propObj.keyEncode || keyEncode || 'raw',
      iv: propObj.iv || iv,
      ivEncode: propObj.ivEncode || ivEncode || 'raw',
      mode: mode || 'CFB',
      padding: padding || 'pkcs7'
    }

    var result = encryptSymmetric(params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  decryptSymmetric: function(_sys, node, id, propObj, callback) {
    var algorithm = _sys.get(node, id, 'algorithm')
    var key = _sys.get(node, id, 'key')
    var keyEncode = _sys.get(node, id, 'keyEncode')
    var iv = _sys.get(node, id, 'iv')
    var ivEncode = _sys.get(node, id, 'ivEncode')
    var mode = _sys.get(node, id, 'workModel')
    var padding = _sys.get(node, id, 'paddingAlgorithm')

    var params = {
      algorithm: algorithm || 'aes',
      data: propObj.data,
      dataEncode: propObj.dataEncode || 'raw',
      dataDecode: propObj.dataDecode || 'base64',
      key: propObj.key || key,
      keyEncode: propObj.keyEncode || keyEncode || 'raw',
      iv: propObj.iv || iv,
      ivEncode: propObj.ivEncode || ivEncode || 'raw',
      mode: mode || 'CFB',
      padding: padding || 'pkcs7'
    }

    var result = decryptSymmetric(params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  encryptAsymmetric: function(_sys, node, id, propObj, callback) {
    var algorithm = _sys.get(node, id, 'algorithm')
    var publicKey = _sys.get(node, id, 'publicKey')

    var params = {
      algorithm: algorithm || 'rsa',
      data: propObj.data,
      dataEncode: propObj.dataEncode || 'base64',
      dataDecode: propObj.dataDecode || 'raw',
      key: propObj.publicKey || publicKey
    }

    var result = encryptAsymmetric(params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  decryptAsymmetric: function(_sys, node, id, propObj, callback) {
    var algorithm = _sys.get(node, id, 'algorithm')
    var privateKey = _sys.get(node, id, 'privateKey')

    var params = {
      algorithm: algorithm || 'rsa',
      data: propObj.data,
      dataEncode: propObj.dataEncode || 'raw',
      dataDecode: propObj.dataDecode || 'base64',
      key: propObj.privateKey || privateKey
    }

    var result = decryptAsymmetric(params)
    if (callback) {
      if (result && result.status === 0) {
        callback('success', result)
      } else {
        callback('fail', result)
      }
    }
    return result
  },
  signWithRSA: function(_sys, node, id, propObj, cb) {
    var privateKey = _sys.get(node, id, 'privateKey')
    var params = {
      type: propObj.type,
      data: propObj.data,
      privateKey: propObj.privateKey || privateKey
    }
    var result = signWithRSA(params)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result.result)
      } else {
        cb('fail', result.result)
      }
    }
  },

  sendImageCaptcha: function(_sys, node, id, cb) {
    var result = sendImageCaptcha()
    if (cb) {
      if (result && result.status === 0) {
        cb('success', {
          isSuccess: '是',
          code: result.result.code,
          token: result.result.token
        })
      } else {
        cb('fail', { isSuccess: '否' })
      }
    }
  },

  verifyImageCaptcha: function(_sys, node, id, code, token, cb) {
    var result = verifyImageCaptcha({ code: code, token: token })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', {
          isSuccess: '是'
        })
      } else {
        cb('fail', { isSuccess: '否', detail: result.result.detail })
      }
    }
  },

  verifySignWithRSA: function(_sys, node, id, propObj, cb) {
    var publicKey = _sys.get(node, id, 'publicKey')
    var params = {
      type: propObj.type,
      sign: propObj.sign,
      data: propObj.data,
      publicKey: propObj.publicKey || publicKey
    }
    var result = verifySignWithRSA(params)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result.result)
      } else {
        cb('fail', result.result)
      }
    }
  },
  wechatAppPaySign: function(_sys, node, id, orderId, notifyUrl, info, cb) {
    // info 里只需要body，detail，total_fee
    var appId = undefined // 应用id
    var partnerId = undefined // 商户号
    var apiKey = undefined // 商户号的apikey
    var cert = undefined // 商户号的cert
    var certKey = undefined // 商户号的certKey
    var prepayId = undefined // 预支付订单号

    var appConfigs = _getWorkConfig('wechatApp')
    if (appConfigs && appConfigs.appId) {
      appId = appConfigs.appId
    }
    var mcConfigs = _getWorkConfig('merchant')
    if (mcConfigs && mcConfigs.mchId) {
      partnerId = mcConfigs.mchId
      apiKey = mcConfigs.apiKey
      cert = mcConfigs.mchPemCert
      certKey = mcConfigs.mchPemKey
    }
    // 处理数据
    var _info = info
    _info.out_trade_no = orderId
    _info.appid = appId
    _info.mch_id = partnerId + ''
    _info.sign_type = 'MD5'
    _info.trade_type = 'APP'
    _info.total_fee = parseFloat(info.total_fee) * 100 + ''
    _info.notify_url = notifyUrl
    var payData = _wxGenOrder(
      _info,
      apiKey,
      cert,
      certKey,
      'https://api.mch.weixin.qq.com/pay/unifiedorder'
    )
    var nonceStr = undefined
    if (payData.status === 'success') {
      prepayId = payData.data.prepay_id
      nonceStr = payData.data.nonce_str
    } else {
      cb && cb('fail', { reason: payData.reason })
      return
    }
    var appPackage = 'Sign=WXPay' // 扩展字段
    var timeStamp = parseInt(new Date().getTime() / 1000) + '' // 时间戳

    if (prepayId && partnerId && appId && apiKey && nonceStr) {
      var dataJson = {
        appid: appId,
        partnerid: partnerId,
        prepayid: prepayId,
        package: appPackage,
        noncestr: nonceStr,
        timestamp: timeStamp
      }
      var result = wxpaySign({ dataJson: dataJson, apiKey: apiKey })
      if (result && result.status === 0) {
        var _result = result.result
        if (_result && (_result.sign || _result.Sign)) {
          cb &&
            cb('success', {
              data: {
                appId: dataJson.appid,
                partnerId: dataJson.partnerid,
                prepayId: dataJson.prepayid,
                package: dataJson.package,
                nonceStr: dataJson.noncestr,
                timeStamp: dataJson.timestamp,
                sign: _result.sign || _result.Sign
              }
            })
        } else {
          cb && cb('fail', { reason: _result.detail || 'no sign' })
        }
      } else {
        cb &&
          cb('fail', {
            reason: (result.result && result.result.detail) || 'no sign'
          })
      }
    } else {
      cb && cb('fail', { reason: 'wrong params' })
    }
  },
  wechatAppOrderCheck: function(_sys, node, id, orderId, cb) {
    var appId = undefined // 应用id
    var partnerId = undefined // 商户号
    var apiKey = undefined // 商户号的apikey
    var cert = undefined // 商户号的cert
    var certKey = undefined // 商户号的certKey
    var appConfigs = _getWorkConfig('wechatApp')
    if (appConfigs && appConfigs.appId) {
      appId = appConfigs.appId
    }
    var mcConfigs = _getWorkConfig('merchant')
    if (mcConfigs && mcConfigs.mchId) {
      partnerId = mcConfigs.mchId
      apiKey = mcConfigs.apiKey
      cert = mcConfigs.mchPemCert
      certKey = mcConfigs.mchPemKey
    }
    if (orderId && partnerId && appId && apiKey) {
      var info = {
        appid: appId,
        mch_id: partnerId,
        out_trade_no: orderId
      }
      var orderData = _wxGenOrder(
        info,
        apiKey,
        cert,
        certKey,
        'https://api.mch.weixin.qq.com/pay/orderquery'
      )
      if (orderData.status === 'success') {
        cb &&
          cb('success', {
            state: orderData.data.trade_state,
            desc: orderData.data.trade_state_desc,
            fee: parseFloat(orderData.data.total_fee) / 100,
            transactionId: orderData.data.transaction_id
          })
      } else {
        cb && cb('fail', { reason: orderData.reason })
      }
    }
  },
  alipayAppPaySign: function(
    _sys,
    node,
    id,
    orderId,
    type,
    notifyUrl,
    content,
    cb
  ) {
    function getTime() {
      function trans(digit) {
        if (digit < 10) {
          return '0' + digit
        }
        return '' + digit
      }
      var date = new Date()
      var Y = date.getFullYear() + ''
      var M = trans(date.getMonth() + 1)
      var D = trans(date.getDate())
      var h = trans(date.getHours())
      var m = trans(date.getMinutes())
      var s = trans(date.getSeconds())
      return Y + '-' + M + '-' + D + ' ' + h + ':' + m + ':' + s
    }
    var appId = undefined // 应用id
    var privateKey = undefined // privateKey
    var method = 'alipay.trade.app.pay' // 支付方式
    var format = 'JSON'
    var charset = 'utf-8'
    var signType = type || 'RSA2'
    var appConfigs = _getWorkConfig('alipayApp')
    if (appConfigs && appConfigs.appId) {
      appId = appConfigs.appId
      privateKey = appConfigs.privateKey
    }
    var timeStamp = getTime()
    var version = '1.0'
    var _notifyUrl = notifyUrl
    var bizContent = content || {}
    if (appId && privateKey) {
      bizContent.out_trade_no = orderId
      var dataJson = {
        app_id: appId,
        method: method,
        format: format,
        charset: charset,
        sign_type: signType,
        timestamp: timeStamp,
        version: version,
        biz_content: JSON.stringify(bizContent)
      }
      if (_notifyUrl) {
        dataJson.notify_url = _notifyUrl
      }
      var result = signWithRSA({ dataJson: dataJson, privateKey: privateKey })
      if (result && result.status === 0) {
        var _result = result.result
        if (_result && _result.sign) {
          cb &&
            cb('success', {
              data: {
                appId: appId,
                method: method,
                format: format,
                charset: charset,
                signType: signType,
                timeStamp: timeStamp,
                version: version,
                bizContent: bizContent,
                sign: _result.sign
              }
            })
        } else {
          cb && cb('fail', { reason: _result.detail || 'no sign' })
        }
      } else {
        cb &&
          cb('fail', {
            reason: (result.result && result.result.detail) || 'no sign'
          })
      }
    } else {
      cb && cb('fail', { reason: 'wrong params' })
    }
  },
  genHashCode: function(_sys, node, id, text, cb) {
    var _text = text + ''
    var result = pwHash({ text: _text })
    cb && cb('success', result)
  },
  verifyHashCode: function(_sys, node, id, text, hash, cb) {
    var _text = text + ''
    var result = pwVerify({ text: _text, hash: hash })
    if (result.result) {
      cb && cb('success', result)
    } else {
      cb && cb('fail', result)
    }
  },
  signJwtFunc: function(_sys, node, id, data, key, cb) {
    // var result = signJwt({ data: data, key: key })
    // if (result.result && result.result.token) {
    //   cb && cb('success', result.result.token)
    // } else {
    //   cb && cb('fail', result)
    // }
    var ret = extGo({
      fn: 'jwt.genJwtToken',
      param: { data: data, key: key }
    })
    if (ret.status == 0) {
      cb && cb('success', ret.result)
    } else {
      cb && cb('fail', ret)
    }
  },
  parseJwtFunc: function(_sys, node, id, token, key, cb) {
    // var result = parseJwt({ token: token, key: key })
    // if (result.result) {
    //   if (result.result.status === 200) {
    //     cb && cb('success', { data: result.result.data, status: 0 })
    //   } else {
    //     cb && cb('fail', { data: '', status: result.result.status })
    //   }
    // } else {
    //   cb && cb('fail', { data: '', status: -1 })
    // }
    var ret = extGo({
      fn: 'jwt.parseJwtToken',
      param: { token: token, key: key }
    })
    if (ret.status == 0) {
      var _ret = { status: 0 }
      if (ret.result && ret.result.Claims) {
        // 兼容之前的，如果解密的jwt串是由ivx生成的，则data返回生成时传入的原始数据
        var claims = ret.result.Claims
        _ret.data = claims.claims !== undefined ? claims.claims : claims
      } else {
        _ret = ret
      }
      cb && cb('success', _ret)
    } else {
      cb && cb('fail', ret)
    }
  },

  base64EncodeFunc: function(_sys, node, id, value, padding, cb) {
    var _value = value
    var _padding = padding
    var _cb = cb
    var hex = false
    if (arguments && arguments.length === 5 && typeof value === 'object') {
      _value = value.value
      _padding = value.padding
      _cb = padding
      if (value.dataEncode === 'hex') {
        hex = true
      }
    }
    var result = base64Encode({ value: _value, padding: _padding, hex: hex })
    if (result.result) {
      _cb && _cb('success', result.result.value)
    } else {
      _cb && _cb('fail', result.result.status)
    }
  },

  base64DecodeFunc: function(_sys, node, id, value, padding, cb) {
    var _value = value
    var _padding = padding
    var _cb = cb
    var hex = false
    if (arguments && arguments.length === 5 && typeof value === 'object') {
      _value = value.value
      _padding = value.padding
      _cb = padding
      if (value.dataDecode === 'hex') {
        hex = true
      }
    }
    var result = base64Decode({ value: _value, padding: _padding, hex: hex })
    if (result.result) {
      _cb && _cb('success', result.result.value)
    } else {
      _cb && _cb('fail', result.result.status)
    }
  }
}

$funcs['data-timerService'] = {
  recordResult: function(_sys, node, id, result) {
    $timerServiceResult = result
  },
  setLog: function(_sys, node, id, params, cb) {
    var _params = params || {}
    var obj = {
      topic: _params.topic,
      level: _params.level,
      msg: _params.sMsg
    }
    if (_params.aData) {
      obj.data = _params.aData
    }
    var result = userLog(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  getConfig: function(_sys, node, id, cb) {
    var result = timerGet({ id: id })
    if (result.status === 0) {
      result.result.isOnline = true
      if (
        result.result &&
        (result.result.startTime || result.result.startTime === 0)
      ) {
        var _startTime = result.result.startTime
        _startTime = new Date(_startTime * 1000 + 8 * 3600 * 1000)
          .toISOString()
          .substring(0, 19)
          .replace('T', ' ')
        result.result.startTime = _startTime
      }
    } else {
      result.result.isOnline = false
    }
    var value = result.result
    if (cb) {
      if (result && result.status === 0) {
        cb('success', value)
      } else {
        cb('fail', value)
      }
    }
  },
  setConfig: function(
    _sys,
    node,
    id,
    startTime,
    period,
    repeatTimes,
    workers,
    cb
  ) {
    var obj = {
      id: id,
      period: period,
      repeatTimes: repeatTimes,
      workers: workers
    }
    var result
    if (startTime) {
      var isoStartTime
      try {
        isoStartTime = startTime.split(' ').join('T') + '+08:00'
      } catch (e) {
        isoStartTime = startTime
      }
      var date = new Date(isoStartTime)
      var time = Date.parse(date) / 1000
      if (isNaN(time)) {
        result = {
          status: 500,
          result: {
            detail: '开始时间有误'
          }
        }
      } else {
        obj['startTime'] = time
        result = timerSet(obj)
      }
    } else {
      result = timerSet(obj)
    }
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  timerDel: function(_sys, node, id, cb) {
    var result = timerDel({ id: id })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  runService: function(_sys, node, id, params, cb) {
    var result = _serviceCmd(id, params)
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', {
            detail: 'error'
          })
        }
      }
    }
  }
}

$funcs['data-mqSender'] = {
  sendMsg: function(_sys, node, id, topic, msgs, server, cb) {
    var result
    var _server = server
    var _cb = cb
    if (arguments && arguments.length === 6) {
      _cb = _server
      _server = undefined
    }
    var body
    try {
      body = {
        topic: String(topic),
        body: JSON.stringify(msgs)
      }
    } catch (e) {
      throw new Error('unsupport msgs')
    }
    if (_server) {
      body.server = _server
    }
    var saRes = mqPublish(body)
    if (saRes.status === 500) {
      if (saRes.result.detail === 'not support') {
        // 私有部署增加mqPublish函数,如返回not support,则是云平台
        var instanceID = _sys.get(node, id, 'instanceID')
        if (instanceID) {
          var instanceUri = lookupResource({ id: instanceID })
          if (
            instanceUri &&
            instanceUri.status === 0 &&
            instanceUri.result &&
            instanceUri.result.uri
          ) {
            var url = 'http://' + instanceUri.result.uri + '/publish'
            var req = {
              url: url,
              method: 'POST',
              type: 'JSON',
              body: body
            }
            var res = serverApi(req)
            if (res.status === 0) {
              result = {
                status: 0,
                result: {}
              }
            } else {
              result = {
                status: 500,
                result: { detail: res }
              }
            }
          } else {
            result = {
              status: 500,
              result: {
                detail:
                  (instanceUri.result && instanceUri.result.detail) ||
                  'wrong instanceURI.'
              }
            }
          }
        } else {
          result = {
            status: 500,
            result: {
              detail: 'wrong instanceID.'
            }
          }
        }
      } else {
        result = {
          status: 500,
          result: { detail: saRes }
        }
      }
    } else {
      result = {
        status: 0,
        result: {}
      }
    }

    if (_cb) {
      if (result && result.status === 0) {
        _cb('success', result)
      } else {
        _cb('fail', result)
      }
    }
  }
}

$funcs['data-mqSvc'] = {
  sendMsg: function(_sys, node, id, params, cb) {
    // 对入参的处理
    var result = mqSend({
      sid: id,
      param: params
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  }
}

$funcs['data-ds'] = {
  listShards: function(_sys, node, id, stream, cb) {
    var result = dsListShards({
      stream: stream
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        result = { result: { shards: null } }
        cb('fail', result)
      }
    }
  },

  putRecords: function(_sys, node, id, stream, records, cb) {
    var result = dsPutRecords({
      stream: stream,
      records: records
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },

  getRecords: function(
    _sys,
    node,
    id,
    stream,
    shard,
    cursor,
    limit,
    start,
    end,
    cb
  ) {
    var isoStart
    var isoEnd
    try {
      isoStart = start.split(' ').join('T') + '+08:00'
      isoEnd = end.split(' ').join('T') + '+08:00'
    } catch (e) {}
    var _start = Date.parse(new Date(isoStart)) / 1000 || 0
    var _end = Date.parse(new Date(isoEnd)) / 1000 || 0
    var result = dsGetRecords({
      stream: stream,
      shard: shard,
      cursor: cursor,
      limit: limit,
      start: _start,
      end: _end
    })
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  }
}

$funcs['data-dbo'] = {
  beginTransaction: function(_sys, node, id) {
    // var action = $staticFns[id]
    // if (!action) return

    var parentDbType = _sys.get(node, id, 'dbType')
    var parentLinkUrl = _sys.get(node, id, 'linkUrl')
    var parentUserName = _sys.get(node, id, 'username')
    var parentPassword = _sys.get(node, id, 'password')
    var parentLinkType = _sys.get(node, id, 'linkType')
    var parentDsn = _sys.get(node, id, 'dsn')
    var parentDb = _sys.get(node, id, 'defaultDb')

    _sys.set(node, id, 'transactionId', '')

    var reqData = {
      driver: parentDbType,
      user: parentUserName,
      pass: parentPassword,
      addr: parentLinkUrl,
      db: parentDb
    }
    if (parentLinkType === 'dsn' && parentDsn) {
      reqData.dsn = parentDsn
    }
    if (parentDbType === 'postgres' && !reqData.db) {
      reqData.db = 'postgres'
    }
    var sess = sqlOpen(reqData)

    if (sess && sess.result && sess.result.sessId) {
      var txResult = sqlTxBegin({
        sessId: sess.result.sessId
      })
      if (txResult && txResult.result && txResult.result.txId) {
        _sys.set(node, id, 'transactionId', txResult.result.txId)
      }
    }
  },
  rollBack: function(_sys, node, id) {
    var transactionId = _sys.get(node, id, 'transactionId')

    if (transactionId) {
      sqlTxRollback({
        txId: transactionId
      })
      _sys.set(node, id, 'transactionId', '')
    }
  },
  commit: function(_sys, node, id) {
    var transactionId = _sys.get(node, id, 'transactionId')

    if (transactionId) {
      sqlTxCommit({
        txId: transactionId
      })
      _sys.set(node, id, 'transactionId', '')
    }
  },
  runSqlFunc: function(_sys, node, id, props, cb) {
    var dbType = _sys.get(node, id, 'dbType')
    var linkUrl = _sys.get(node, id, 'linkUrl')
    var userName = _sys.get(node, id, 'username')
    var password = _sys.get(node, id, 'password')
    var transactionId = _sys.get(node, id, 'transactionId')
    var linkType = _sys.get(node, id, 'linkType')
    var dsn = _sys.get(node, id, 'dsn')
    var db = _sys.get(node, id, 'defaultDb')

    var code = props.sqlCode //_sys.get(node, id, 'sqlCode')
    var sqlType = props.sqlType //_sys.get(node, id, 'sqlType') //sql模板设置的返回类型 query，exec

    var dealCode = code
    var sqlParam = []

    if (!transactionId) {
      var reqData = {
        driver: dbType,
        user: userName,
        pass: password,
        addr: linkUrl,
        db: db
      }
      if (linkType === 'dsn' && dsn) {
        reqData.dsn = dsn
      }
      if (dbType === 'postgres' && !reqData.db) {
        reqData.db = 'postgres'
      }
      var sess = sqlOpen(reqData)
      if (sqlType === 'exec') {
        var r = sqlExec({
          sessId: sess.result.sessId,
          sql: dealCode,
          params: sqlParam
        })
      } else {
        var r = sqlQuery({
          sessId: sess.result.sessId,
          sql: dealCode,
          params: sqlParam
        })
      }
    } else {
      if (sqlType === 'exec') {
        var r = sqlExec({
          txId: transactionId,
          sql: dealCode,
          params: sqlParam
        })
      } else {
        var r = sqlQuery({
          txId: transactionId,
          sql: dealCode,
          params: sqlParam
        })
      }
    }

    try {
      if (cb) {
        if (r && r.status === 0) {
          cb(true, r)
        } else {
          cb(false, r)
        }
      }
    } catch (e) {
      // 出错
      if (cb) {
        cb(false, { err: e })
      }
    }
  }
}

$funcs['data-sqltemplate'] = {
  run: function(_sys, node, id) {
    var parentId = '' + _sys.get(node, id, 'parentId')
    var code = '' + _sys.get(node, id, 'code')
    var inParamsProps = '' + _sys.get(node, id, 'inParams')
    var sqlType = '' + _sys.get(node, id, 'sqlType')
    var paramList = []
    if (inParamsProps) {
      paramList = inParamsProps.split(',')
    }

    var inParams = []
    // // 第三个才是有效params
    for (var i = 3; i < arguments.length; i++) {
      if (i !== arguments.length - 1) {
        inParams.push(arguments[i])
      }
    }

    var regStr = ''
    if (paramList.length > 0) {
      regStr = '(' + paramList.join(')|(') + ')'
      var reg = new RegExp(regStr, 'g')
    }
    var dealCode = code
    var sqlParam = []
    if (reg) {
      dealCode = code.replace(reg, function(param) {
        var paramIndex = paramList.indexOf(param)
        sqlParam.push(inParams[paramIndex])
        return '$*'
      })
    }

    var parentDbType = _sys.get(node, parentId, 'dbType')
    var parentLinkUrl = _sys.get(node, parentId, 'linkUrl')
    var parentUserName = _sys.get(node, parentId, 'username')
    var parentPassword = _sys.get(node, parentId, 'password')
    var transactionId = _sys.get(node, parentId, 'transactionId')
    var parentLinkType = _sys.get(node, parentId, 'linkType')
    var parentDsn = _sys.get(node, parentId, 'dsn')
    var parentDb = _sys.get(node, parentId, 'defaultDb')

    var cb = arguments[arguments.length - 1] // 回调

    if (!transactionId) {
      var reqData = {
        driver: parentDbType,
        user: parentUserName,
        pass: parentPassword,
        addr: parentLinkUrl,
        db: parentDb
      }
      if (parentLinkType === 'dsn' && parentDsn) {
        reqData.dsn = parentDsn
      }
      if (parentDbType === 'postgres' && !reqData.db) {
        reqData.db = 'postgres'
      }
      var sess = sqlOpen(reqData)
      if (sqlType === 'exec') {
        var r = sqlExec({
          sessId: sess.result.sessId,
          sql: dealCode,
          params: sqlParam
        })
      } else {
        var r = sqlQuery({
          sessId: sess.result.sessId,
          sql: dealCode,
          params: sqlParam
        })
      }
    } else {
      if (sqlType === 'exec') {
        var r = sqlExec({
          txId: transactionId,
          sql: dealCode,
          params: sqlParam
        })
      } else {
        var r = sqlQuery({
          txId: transactionId,
          sql: dealCode,
          params: sqlParam
        })
      }
    }

    try {
      // var result = action.apply(this, inParams)
      if (cb) {
        // cb(true, { result: 456 })
        // cb(true, {
        //   result: {
        //     dealCode: dealCode,
        //     sqlParam: sqlParam,
        //     result: r
        //   }
        // })
        if (r && r.status === 0) {
          cb(true, r)
        } else {
          cb(false, r)
        }
      }
    } catch (e) {
      // 出错
      if (cb) {
        cb(false, { err: e })
      }
    }
  }
}
$funcs['data-func'] = {
  fireFunc: function(_sys, node, id) {
    var action = $staticFns[id]
    if (!action) return
    var inParams = []
    // 第三个才是有效params
    for (var i = 3; i < arguments.length; i++) {
      if (i !== arguments.length - 1) {
        inParams.push(arguments[i])
      }
    }
    var cb = arguments[arguments.length - 1] // 回调
    try {
      var result = action.apply(this, inParams)
      if (cb) {
        cb(true, result)
      }
    } catch (e) {
      // 出错
      if (cb) {
        cb(false, {})
      }
    }
  },
  fireSyncFunc: function(_sys, node, id) {
    var action = $staticFns[id]
    if (!action) return
    var inParams = []
    // 第三个才是有效params
    for (var i = 3; i < arguments.length; i++) {
      if (i !== arguments.length - 1) {
        inParams.push(arguments[i])
      }
    }
    var cb = arguments[arguments.length - 1] // 默认添加的回调
    inParams.push(cb)
    try {
      action.apply(this, inParams)
    } catch (e) {
      // 出错
      if (cb) {
        cb(false, {})
      }
    }
  }
}

$funcs['data-funcGroup'] = {
  fireFuncGroup: function(_sys, node, id, fParam, cbFParam) {
    var action = $staticFns[id]
    if (!action) return
    userLog({ topic: 'fbegin', msg: id, data: fParam })
    var isSync = _sys.get(node, id, 'sync')
    if (isSync) {
      // 同步处理
      var result = action.call(this, fParam, undefined, _sys, node)
      if (cbFParam) {
        cbFParam(true, result)
      }
      userLog({ topic: 'fend', data: result })
    } else {
      var msg = {
        topic: 'fend'
      }
      var hookCb = function(status, result) {
        if (!status) {
          msg.level = 2
        }
        if (result) {
          msg.data = result
        }
        if (cbFParam) {
          cbFParam(status, result)
        }
      }
      var ret = action.call(this, fParam, hookCb, _sys, node)
      userLog(msg)
      return ret
    }
  }
}

$funcs['data-funcGroupCb'] = {
  fireFuncCb: function(_sys, node, id, inParams, cbF) {
    var status = _sys.get(node, id, 'status')
    var cbFunc = cbF || _sys.get(node, id, 'value')
    cbFunc && cbFunc(status, inParams || {})
  }
}

$funcs['data-flow'] = {
  getPendingNodes: function(_sys, node, id, config, approved, states, cb) {
    var COMPOUND = 'Compound',
      IDENTIFIER = 'Identifier',
      MEMBER_EXP = 'MemberExpression',
      LITERAL = 'Literal',
      THIS_EXP = 'ThisExpression',
      CALL_EXP = 'CallExpression',
      UNARY_EXP = 'UnaryExpression',
      BINARY_EXP = 'BinaryExpression',
      LOGICAL_EXP = 'LogicalExpression',
      CONDITIONAL_EXP = 'ConditionalExpression',
      ARRAY_EXP = 'ArrayExpression',
      PERIOD_CODE = 46, // '.'
      COMMA_CODE = 44, // ','
      SQUOTE_CODE = 39, // single quote
      DQUOTE_CODE = 34, // double quotes
      OPAREN_CODE = 40, // (
      CPAREN_CODE = 41, // )
      OBRACK_CODE = 91, // [
      CBRACK_CODE = 93, // ]
      QUMARK_CODE = 63, // ?
      SEMCOL_CODE = 59, // ;
      COLON_CODE = 58, // :
      throwError = function(message, index) {
        var error = new Error(message + ' at character ' + index)
        error.index = index
        error.description = message
        throw error
      },
      // Operations
      // ----------

      // Set `t` to `true` to save space (when minified, not gzipped)
      t = true,
      // Use a quickly-accessible map to store all of the unary operators
      // Values are set to `true` (it really doesn't matter)
      unary_ops = { '-': t, '!': t, '~': t, '+': t },
      // Also use a map for the binary operations but set their values to their
      // binary precedence for quick reference:
      // see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)
      binary_ops = {
        '||': 1,
        '&&': 2,
        '|': 3,
        '^': 4,
        '&': 5,
        '==': 6,
        '!=': 6,
        '===': 6,
        '!==': 6,
        '<': 7,
        '>': 7,
        '<=': 7,
        '>=': 7,
        '<<': 8,
        '>>': 8,
        '>>>': 8,
        '+': 9,
        '-': 9,
        '*': 10,
        '/': 10,
        '%': 10
      },
      // Get return the longest key length of any object
      getMaxKeyLen = function(obj) {
        var max_len = 0,
          len
        for (var key in obj) {
          if ((len = key.length) > max_len && obj.hasOwnProperty(key)) {
            max_len = len
          }
        }
        return max_len
      },
      max_unop_len = getMaxKeyLen(unary_ops),
      max_binop_len = getMaxKeyLen(binary_ops),
      // Literals
      // ----------
      // Store the values to return for the various literals we may encounter
      literals = {
        true: true,
        false: false,
        null: null
      },
      // Except for `this`, which is special. This could be changed to something like `'self'` as well
      this_str = 'this',
      // Returns the precedence of a binary operator or `0` if it isn't a binary operator
      binaryPrecedence = function(op_val) {
        return binary_ops[op_val] || 0
      },
      // Utility function (gets called from multiple places)
      // Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions
      createBinaryExpression = function(operator, left, right) {
        var type =
          operator === '||' || operator === '&&' ? LOGICAL_EXP : BINARY_EXP
        return {
          type: type,
          operator: operator,
          left: left,
          right: right
        }
      },
      // `ch` is a character code in the next three functions
      isDecimalDigit = function(ch) {
        return ch >= 48 && ch <= 57 // 0...9
      },
      isIdentifierStart = function(ch) {
        return (
          ch === 36 ||
          ch === 95 || // `$` and `_`
          (ch >= 65 && ch <= 90) || // A...Z
          (ch >= 97 && ch <= 122) || // a...z
          (ch >= 128 && !binary_ops[String.fromCharCode(ch)])
        ) // any non-ASCII that is not an operator
      },
      isIdentifierPart = function(ch) {
        return (
          ch === 36 ||
          ch === 95 || // `$` and `_`
          (ch >= 65 && ch <= 90) || // A...Z
          (ch >= 97 && ch <= 122) || // a...z
          (ch >= 48 && ch <= 57) || // 0...9
          (ch >= 128 && !binary_ops[String.fromCharCode(ch)])
        ) // any non-ASCII that is not an operator
      },
      // Parsing
      // -------
      // `expr` is a string with the passed in expression
      jsep = function(expr) {
        // `index` stores the character number we are currently at while `length` is a constant
        // All of the gobbles below will modify `index` as we move along
        var index = 0,
          exprI = function(i) {
            return expr.charAt(i)
          },
          exprICode = function(i) {
            return expr.charCodeAt(i)
          },
          length = expr.length,
          // Push `index` up to the next non-space character
          gobbleSpaces = function() {
            var ch = exprICode(index)
            // space or tab
            while (ch === 32 || ch === 9 || ch === 10 || ch === 13) {
              ch = exprICode(++index)
            }
          },
          // The main parsing function. Much of this code is dedicated to ternary expressions
          gobbleExpression = function() {
            var test = gobbleBinaryExpression(),
              consequent,
              alternate
            gobbleSpaces()
            if (exprICode(index) === QUMARK_CODE) {
              // Ternary expression: test ? consequent : alternate
              index++
              consequent = gobbleExpression()
              if (!consequent) {
                throwError('Expected expression', index)
              }
              gobbleSpaces()
              if (exprICode(index) === COLON_CODE) {
                index++
                alternate = gobbleExpression()
                if (!alternate) {
                  throwError('Expected expression', index)
                }
                return {
                  type: CONDITIONAL_EXP,
                  test: test,
                  consequent: consequent,
                  alternate: alternate
                }
              } else {
                throwError('Expected :', index)
              }
            } else {
              return test
            }
          },
          // Search for the operation portion of the string (e.g. `+`, `===`)
          // Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)
          // and move down from 3 to 2 to 1 character until a matching binary operation is found
          // then, return that binary operation
          gobbleBinaryOp = function() {
            gobbleSpaces()
            var biop,
              to_check = expr.substr(index, max_binop_len),
              tc_len = to_check.length
            while (tc_len > 0) {
              // Don't accept a binary op when it is an identifier.
              // Binary ops that start with a identifier-valid character must be followed
              // by a non identifier-part valid character
              if (
                binary_ops.hasOwnProperty(to_check) &&
                (!isIdentifierStart(exprICode(index)) ||
                  (index + to_check.length < expr.length &&
                    !isIdentifierPart(exprICode(index + to_check.length))))
              ) {
                index += tc_len
                return to_check
              }
              to_check = to_check.substr(0, --tc_len)
            }
            return false
          },
          // This function is responsible for gobbling an individual expression,
          // e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`
          gobbleBinaryExpression = function() {
            var ch_i,
              node,
              biop,
              prec,
              stack,
              biop_info,
              left,
              right,
              i,
              cur_biop

            // First, try to get the leftmost thing
            // Then, check to see if there's a binary operator operating on that leftmost thing
            left = gobbleToken()
            biop = gobbleBinaryOp()

            // If there wasn't a binary operator, just return the leftmost node
            if (!biop) {
              return left
            }

            // Otherwise, we need to start a stack to properly place the binary operations in their
            // precedence structure
            biop_info = { value: biop, prec: binaryPrecedence(biop) }

            right = gobbleToken()
            if (!right) {
              throwError('Expected expression after ' + biop, index)
            }
            stack = [left, biop_info, right]

            // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)
            while ((biop = gobbleBinaryOp())) {
              prec = binaryPrecedence(biop)

              if (prec === 0) {
                break
              }
              biop_info = { value: biop, prec: prec }

              cur_biop = biop
              // Reduce: make a binary expression from the three topmost entries.
              while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
                right = stack.pop()
                biop = stack.pop().value
                left = stack.pop()
                node = createBinaryExpression(biop, left, right)
                stack.push(node)
              }

              node = gobbleToken()
              if (!node) {
                throwError('Expected expression after ' + cur_biop, index)
              }
              stack.push(biop_info, node)
            }

            i = stack.length - 1
            node = stack[i]
            while (i > 1) {
              node = createBinaryExpression(
                stack[i - 1].value,
                stack[i - 2],
                node
              )
              i -= 2
            }
            return node
          },
          // An individual part of a binary expression:
          // e.g. `foo.bar(baz)`, `1`, `"abc"`, `(a % 2)` (because it's in parenthesis)
          gobbleToken = function() {
            var ch, to_check, tc_len

            gobbleSpaces()
            ch = exprICode(index)

            if (isDecimalDigit(ch) || ch === PERIOD_CODE) {
              // Char code 46 is a dot `.` which can start off a numeric literal
              return gobbleNumericLiteral()
            } else if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {
              // Single or double quotes
              return gobbleStringLiteral()
            } else if (ch === OBRACK_CODE) {
              return gobbleArray()
            } else {
              to_check = expr.substr(index, max_unop_len)
              tc_len = to_check.length
              while (tc_len > 0) {
                // Don't accept an unary op when it is an identifier.
                // Unary ops that start with a identifier-valid character must be followed
                // by a non identifier-part valid character
                if (
                  unary_ops.hasOwnProperty(to_check) &&
                  (!isIdentifierStart(exprICode(index)) ||
                    (index + to_check.length < expr.length &&
                      !isIdentifierPart(exprICode(index + to_check.length))))
                ) {
                  index += tc_len
                  return {
                    type: UNARY_EXP,
                    operator: to_check,
                    argument: gobbleToken(),
                    prefix: true
                  }
                }
                to_check = to_check.substr(0, --tc_len)
              }

              if (isIdentifierStart(ch) || ch === OPAREN_CODE) {
                // open parenthesis
                // `foo`, `bar.baz`
                return gobbleVariable()
              }
            }

            return false
          },
          // Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to
          // keep track of everything in the numeric literal and then calling `parseFloat` on that string
          gobbleNumericLiteral = function() {
            var number = '',
              ch,
              chCode
            while (isDecimalDigit(exprICode(index))) {
              number += exprI(index++)
            }

            if (exprICode(index) === PERIOD_CODE) {
              // can start with a decimal marker
              number += exprI(index++)

              while (isDecimalDigit(exprICode(index))) {
                number += exprI(index++)
              }
            }

            ch = exprI(index)
            if (ch === 'e' || ch === 'E') {
              // exponent marker
              number += exprI(index++)
              ch = exprI(index)
              if (ch === '+' || ch === '-') {
                // exponent sign
                number += exprI(index++)
              }
              while (isDecimalDigit(exprICode(index))) {
                //exponent itself
                number += exprI(index++)
              }
              if (!isDecimalDigit(exprICode(index - 1))) {
                throwError(
                  'Expected exponent (' + number + exprI(index) + ')',
                  index
                )
              }
            }

            chCode = exprICode(index)
            // Check to make sure this isn't a variable name that start with a number (123abc)
            if (isIdentifierStart(chCode)) {
              throwError(
                'Variable names cannot start with a number (' +
                  number +
                  exprI(index) +
                  ')',
                index
              )
            } else if (chCode === PERIOD_CODE) {
              throwError('Unexpected period', index)
            }

            return {
              type: LITERAL,
              value: parseFloat(number),
              raw: number
            }
          },
          // Parses a string literal, staring with single or double quotes with basic support for escape codes
          // e.g. `"hello world"`, `'this is\nJSEP'`
          gobbleStringLiteral = function() {
            var str = '',
              quote = exprI(index++),
              closed = false,
              ch

            while (index < length) {
              ch = exprI(index++)
              if (ch === quote) {
                closed = true
                break
              } else if (ch === '\\') {
                // Check for all of the common escape codes
                ch = exprI(index++)
                switch (ch) {
                  case 'n':
                    str += '\n'
                    break
                  case 'r':
                    str += '\r'
                    break
                  case 't':
                    str += '\t'
                    break
                  case 'b':
                    str += '\b'
                    break
                  case 'f':
                    str += '\f'
                    break
                  case 'v':
                    str += '\x0B'
                    break
                  default:
                    str += ch
                }
              } else {
                str += ch
              }
            }

            if (!closed) {
              throwError('Unclosed quote after "' + str + '"', index)
            }

            return {
              type: LITERAL,
              value: str,
              raw: quote + str + quote
            }
          },
          // Gobbles only identifiers
          // e.g.: `foo`, `_value`, `$x1`
          // Also, this function checks if that identifier is a literal:
          // (e.g. `true`, `false`, `null`) or `this`
          gobbleIdentifier = function() {
            var ch = exprICode(index),
              start = index,
              identifier

            if (isIdentifierStart(ch)) {
              index++
            } else {
              throwError('Unexpected ' + exprI(index), index)
            }

            while (index < length) {
              ch = exprICode(index)
              if (isIdentifierPart(ch)) {
                index++
              } else {
                break
              }
            }
            identifier = expr.slice(start, index)

            if (literals.hasOwnProperty(identifier)) {
              return {
                type: LITERAL,
                value: literals[identifier],
                raw: identifier
              }
            } else if (identifier === this_str) {
              return { type: THIS_EXP }
            } else {
              return {
                type: IDENTIFIER,
                name: identifier
              }
            }
          },
          // Gobbles a list of arguments within the context of a function call
          // or array literal. This function also assumes that the opening character
          // `(` or `[` has already been gobbled, and gobbles expressions and commas
          // until the terminator character `)` or `]` is encountered.
          // e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`
          gobbleArguments = function(termination) {
            var ch_i,
              args = [],
              node,
              closed = false
            var separator_count = 0
            while (index < length) {
              gobbleSpaces()
              ch_i = exprICode(index)
              if (ch_i === termination) {
                // done parsing
                closed = true
                index++
                if (
                  termination === CPAREN_CODE &&
                  separator_count &&
                  separator_count >= args.length
                ) {
                  throwError(
                    'Unexpected token ' + String.fromCharCode(termination),
                    index
                  )
                }
                break
              } else if (ch_i === COMMA_CODE) {
                // between expressions
                index++
                separator_count++
                if (separator_count !== args.length) {
                  // missing argument
                  if (termination === CPAREN_CODE) {
                    throwError('Unexpected token ,', index)
                  } else if (termination === CBRACK_CODE) {
                    for (var arg = args.length; arg < separator_count; arg++) {
                      args.push(null)
                    }
                  }
                }
              } else {
                node = gobbleExpression()
                if (!node || node.type === COMPOUND) {
                  throwError('Expected comma', index)
                }
                args.push(node)
              }
            }
            if (!closed) {
              throwError('Expected ' + String.fromCharCode(termination), index)
            }
            return args
          },
          // Gobble a non-literal variable name. This variable name may include properties
          // e.g. `foo`, `bar.baz`, `foo['bar'].baz`
          // It also gobbles function calls:
          // e.g. `Math.acos(obj.angle)`
          gobbleVariable = function() {
            var ch_i, node
            ch_i = exprICode(index)

            if (ch_i === OPAREN_CODE) {
              node = gobbleGroup()
            } else {
              node = gobbleIdentifier()
            }
            gobbleSpaces()
            ch_i = exprICode(index)
            while (
              ch_i === PERIOD_CODE ||
              ch_i === OBRACK_CODE ||
              ch_i === OPAREN_CODE
            ) {
              index++
              if (ch_i === PERIOD_CODE) {
                gobbleSpaces()
                node = {
                  type: MEMBER_EXP,
                  computed: false,
                  object: node,
                  property: gobbleIdentifier()
                }
              } else if (ch_i === OBRACK_CODE) {
                node = {
                  type: MEMBER_EXP,
                  computed: true,
                  object: node,
                  property: gobbleExpression()
                }
                gobbleSpaces()
                ch_i = exprICode(index)
                if (ch_i !== CBRACK_CODE) {
                  throwError('Unclosed [', index)
                }
                index++
              } else if (ch_i === OPAREN_CODE) {
                // A function call is being made; gobble all the arguments
                node = {
                  type: CALL_EXP,
                  arguments: gobbleArguments(CPAREN_CODE),
                  callee: node
                }
              }
              gobbleSpaces()
              ch_i = exprICode(index)
            }
            return node
          },
          // Responsible for parsing a group of things within parentheses `()`
          // This function assumes that it needs to gobble the opening parenthesis
          // and then tries to gobble everything within that parenthesis, assuming
          // that the next thing it should see is the close parenthesis. If not,
          // then the expression probably doesn't have a `)`
          gobbleGroup = function() {
            index++
            var node = gobbleExpression()
            gobbleSpaces()
            if (exprICode(index) === CPAREN_CODE) {
              index++
              return node
            } else {
              throwError('Unclosed (', index)
            }
          },
          // Responsible for parsing Array literals `[1, 2, 3]`
          // This function assumes that it needs to gobble the opening bracket
          // and then tries to gobble the expressions as arguments.
          gobbleArray = function() {
            index++
            return {
              type: ARRAY_EXP,
              elements: gobbleArguments(CBRACK_CODE)
            }
          },
          nodes = [],
          ch_i,
          node

        while (index < length) {
          ch_i = exprICode(index)

          // Expressions can be separated by semicolons, commas, or just inferred without any
          // separators
          if (ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {
            index++ // ignore separators
          } else {
            // Try to gobble each expression individually
            if ((node = gobbleExpression())) {
              nodes.push(node)
              // If we weren't able to find a binary expression and are out of room, then
              // the expression passed in probably has too much
            } else if (index < length) {
              throwError('Unexpected "' + exprI(index) + '"', index)
            }
          }
        }

        // If there's only one expression just try returning the expression
        if (nodes.length === 1) {
          return nodes[0]
        } else {
          return {
            type: COMPOUND,
            body: nodes
          }
        }
      }

    // To be filled in by the template
    jsep.version = '<%= version %>'
    jsep.toString = function() {
      return 'JavaScript Expression Parser (JSEP) v' + jsep.version
    }

    /**
     * @method jsep.addUnaryOp
     * @param {string} op_name The name of the unary op to add
     * @return jsep
     */
    jsep.addUnaryOp = function(op_name) {
      max_unop_len = Math.max(op_name.length, max_unop_len)
      unary_ops[op_name] = t
      return this
    }

    /**
     * @method jsep.addBinaryOp
     * @param {string} op_name The name of the binary op to add
     * @param {number} precedence The precedence of the binary op (can be a float)
     * @return jsep
     */
    jsep.addBinaryOp = function(op_name, precedence) {
      max_binop_len = Math.max(op_name.length, max_binop_len)
      binary_ops[op_name] = precedence
      return this
    }

    /**
     * @method jsep.addLiteral
     * @param {string} literal_name The name of the literal to add
     * @param {*} literal_value The value of the literal
     * @return jsep
     */
    jsep.addLiteral = function(literal_name, literal_value) {
      literals[literal_name] = literal_value
      return this
    }

    /**
     * @method jsep.removeUnaryOp
     * @param {string} op_name The name of the unary op to remove
     * @return jsep
     */
    jsep.removeUnaryOp = function(op_name) {
      delete unary_ops[op_name]
      if (op_name.length === max_unop_len) {
        max_unop_len = getMaxKeyLen(unary_ops)
      }
      return this
    }

    /**
     * @method jsep.removeAllUnaryOps
     * @return jsep
     */
    jsep.removeAllUnaryOps = function() {
      unary_ops = {}
      max_unop_len = 0

      return this
    }

    /**
     * @method jsep.removeBinaryOp
     * @param {string} op_name The name of the binary op to remove
     * @return jsep
     */
    jsep.removeBinaryOp = function(op_name) {
      delete binary_ops[op_name]
      if (op_name.length === max_binop_len) {
        max_binop_len = getMaxKeyLen(binary_ops)
      }
      return this
    }

    /**
     * @method jsep.removeAllBinaryOps
     * @return jsep
     */
    jsep.removeAllBinaryOps = function() {
      binary_ops = {}
      max_binop_len = 0

      return this
    }

    /**
     * @method jsep.removeLiteral
     * @param {string} literal_name The name of the literal to remove
     * @return jsep
     */
    jsep.removeLiteral = function(literal_name) {
      delete literals[literal_name]
      return this
    }

    /**
     * @method jsep.removeAllLiterals
     * @return jsep
     */
    jsep.removeAllLiterals = function() {
      literals = {}

      return this
    }

    var approvedMap = {}
    var statesMap = {}
    if (approved) {
      approved.forEach(function(v) {
        approvedMap[v.id] = v.value
      })
    }
    if (states) {
      states.forEach(function(v) {
        statesMap[v.name] = v.value
      })
    }
    var jsEval = function(ast) {
      switch (ast.type) {
        case 'Literal':
          return ast.value

        case 'UnaryExpression':
          var arg = jsEval(ast.argument)
          switch (ast.operator) {
            case '!':
              return !arg

            case '-':
              return -arg

            default:
              throw new Error('unsupport operator ' + ast.operator)
          }

        case 'BinaryExpression':
        case 'LogicalExpression':
          var left = jsEval(ast.left)
          var right = jsEval(ast.right)
          switch (ast.operator) {
            case '+':
              return left + right

            case '-':
              return left + right

            case '*':
              return left * right

            case '/':
              return left / right

            case '==':
              return left == right

            case '!=':
              return left != right

            case '&&':
              return left && right

            case '||':
              return left || right

            case '>':
              return left > right

            case '<':
              return left < right

            case '>=':
              return left >= right

            case '<=':
              return left <= right

            default:
              throw new Error('unsupport operator ' + ast.operator)
          }

        case 'ConditionalExpression':
          return jsEval(ast.test)
            ? jsEval(ast.consequent)
            : jsEval(ast.alternate)

        case 'Identifier':
          if (ast.name in statesMap) {
            return statesMap[ast.name]
          } else {
            throw new Error('unknown identifier ' + ast.name)
          }

        default:
          throw new Error('unsupport type ' + ast.type)
      }
    }

    if (typeof config === 'string') config = JSON.parse(config)

    var jsCache = {}
    var pendingList = []
    var failId = ''
    var runTree = function(node) {
      var childStart = 0
      var hasChild = node.c && node.c.length
      var isClosed = hasChild && node.c[0].f
      if (isClosed) childStart++
      switch (node.t) {
        case 'if':
          var r = true
          if (node._js) {
            try {
              if (!(node.k in jsCache)) {
                jsCache[node.k] = jsep(node._js)
              }
              r = jsEval(jsCache[node.k])
            } catch (e) {
              r = false
            }
          }
          return !r ? false : hasChild ? runTree(node.c[0]) : true

        case 'gatewayAny':
          if (!hasChild) return true
          var pending
          for (var i = childStart; i < node.c.length; i++) {
            var r = runTree(node.c[i])
            if (r === true) {
              pendingList = []
              return isClosed ? runTree(node.c[0]) : true
            } else if (r === 1) {
              pending = 1
            }
          }
          return pending ? 1 : false

        case 'gatewayEvery':
          if (!hasChild) return true
          var pending
          for (var i = childStart; i < node.c.length; i++) {
            var r = runTree(node.c[i])
            if (!r) {
              return false
            }
            if (r === 1) pending = 1
          }
          return pending ? 1 : isClosed ? runTree(node.c[0]) : true

        case 'gateway':
          var pending
          var max = node._n || node.c.length - childStart
          var count = 0
          for (var i = childStart; i < node.c.length; i++) {
            var r = runTree(node.c[i])
            if (r === true) {
              count++
              if (count >= max) {
                pendingList = []
                return isClosed ? runTree(node.c[0]) : true
              }
            }
            if (r === 1) pending = 1
          }
          return pending ? 1 : false

        default:
          var k = '' + node.k
          if (k in approvedMap) {
            if (approvedMap[k]) {
              return hasChild ? runTree(node.c[0]) : true
            } else {
              failId = '' + node.k
              return false
            }
          }
          pendingList.push(node.k)
          return 1
      }
    }

    var r = runTree(config)
    var status = r === 1 ? 'pending' : r ? 'success' : 'fail'
    if (cb) {
      cb(status, { pendingList: pendingList, failId: failId })
    }
  },
  getPreviousNodes: function(_sys, node, id, config, key, cb) {
    var pm = {}
    var nm = {}
    var result = []
    var enumTree = function(n) {
      var k = n.k
      nm[k] = n
      if (n.c) {
        n.c.forEach(function(c) {
          pm[c.k] = k
          enumTree(c)
        })
      }
    }
    var fillNode = function(n) {
      var t = n.t
      if (
        t == 'if' ||
        t == 'gateway' ||
        t == 'gatewayAny' ||
        t == 'gatewayEvery'
      ) {
        return
      }
      result.push(n.k)
    }
    var fillTree = function(n, start) {
      fillNode(n)
      if (n.c) {
        for (var i = start; i < n.c.length; i++) {
          fillTree(n.c[i], 0)
        }
      }
    }
    enumTree(config)
    while (key in pm) {
      var p = nm[pm[key]]
      if (nm[key].f && p.c[0] == nm[key]) {
        fillTree(p, 1)
      } else {
        fillNode(p)
      }
      key = pm[key]
    }

    if (cb) {
      cb(0, { result: result })
    }
  }
}

$funcs['server-system'] = {
  _sysTime: function(_sys, node, id, type) {
    var standardTime = new Date().getTime()
    var serverStartTime = _sys['serverStartTime']
      ? Math.round(_sys['serverStartTime'] * 1000)
      : standardTime
    var clientStartTime = _sys['clientStartTime'] || standardTime
    var clientTime = serverStartTime
    var startTime = clientStartTime
    var endTime = standardTime
    var unixTime = clientTime + (endTime - startTime) // 毫秒级别

    var format = function format(s) {
      return s < 10 ? '0' + s : s
    }

    var weekDayList = [
      '星期天',
      '星期一',
      '星期二',
      '星期三',
      '星期四',
      '星期五',
      '星期六'
    ]
    var date = new Date(unixTime)

    switch (type) {
      case 'year':
        return format(date.getFullYear())

      case 'month':
        return format(date.getMonth() + 1)

      case 'day':
        return format(date.getDate())

      case 'hour':
        return format(date.getHours())

      case 'min':
        return format(date.getMinutes())

      case 'sec':
        return format(date.getSeconds())

      case 'weekDay':
        return weekDayList[date.getDay()]

      case 'weekDayValue':
        return date.getDay()

      case 'ymd':
        return (
          format(date.getFullYear()) +
          '-' +
          format(date.getMonth() + 1) +
          '-' +
          format(date.getDate())
        )

      case 'hms':
        return (
          format(date.getHours()) +
          ':' +
          format(date.getMinutes()) +
          ':' +
          format(date.getSeconds())
        )

      case 'ymdhms':
        return (
          format(date.getFullYear()) +
          '-' +
          format(date.getMonth() + 1) +
          '-' +
          format(date.getDate()) +
          ' ' +
          format(date.getHours()) +
          ':' +
          format(date.getMinutes()) +
          ':' +
          format(date.getSeconds())
        )

      case 'unixtime':
        return Math.round(unixTime / 1000)

      case 'unixtimeMil':
        return unixTime

      case 'daysOfYear':
        // 当年二月天数
        var FebDays = new Date(date.getFullYear(), 2, 0).getDate()

        if (FebDays === 28) {
          return 365
        } else {
          return 366
        }

      case 'daysOfMon':
        // 构造日期对象时，date.getMonth() + 1是实际构造的下一个月份，因为月份是从0开始的
        // 第三个数0天数，要求最小是1号，比1号小的话，就成了你要的上个月最后那一天了
        var year = date.getFullYear()
        var mon = date.getMonth() + 1
        var day = new Date(year, mon, 0)
        return day.getDate()
    }

    return date
  },
  setLog: function(_sys, node, id, params, cb) {
    var _params = params || {}
    var obj = {
      topic: _params.topic,
      level: _params.level,
      msg: _params.sMsg
    }
    if (_params.aData) {
      obj.data = _params.aData
    }
    var result = userLog(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  readCustomVars: function(_sys, node, id, cb) {
    var config = workConfig() || {}
    var customVars = config.result.customVars || []
    var result
    if (customVars.length > 0) {
      result = {}
      for (var i = 0; i < customVars.length; i++) {
        result[customVars[i].k] = customVars[i].v
      }
    }
    cb && cb('finished', result)
  }
}

$funcs['server-sys-serverSys'] = {
  _sysTime: function(_sys, node, id, type) {
    var standardTime = new Date().getTime()
    var serverStartTime = _sys['serverStartTime']
      ? Math.round(_sys['serverStartTime'] * 1000)
      : standardTime
    var clientStartTime = _sys['clientStartTime'] || standardTime
    var clientTime = serverStartTime
    var startTime = clientStartTime
    var endTime = standardTime
    var unixTime = clientTime + (endTime - startTime) // 毫秒级别

    var format = function format(s) {
      return s < 10 ? '0' + s : s
    }

    var weekDayList = [
      '星期天',
      '星期一',
      '星期二',
      '星期三',
      '星期四',
      '星期五',
      '星期六'
    ]
    var date = new Date(unixTime)

    switch (type) {
      case 'year':
        return format(date.getFullYear())

      case 'month':
        return format(date.getMonth() + 1)

      case 'day':
        return format(date.getDate())

      case 'hour':
        return format(date.getHours())

      case 'min':
        return format(date.getMinutes())

      case 'sec':
        return format(date.getSeconds())

      case 'weekDay':
        return weekDayList[date.getDay()]

      case 'weekDayValue':
        return date.getDay()

      case 'ymd':
        return (
          format(date.getFullYear()) +
          '-' +
          format(date.getMonth() + 1) +
          '-' +
          format(date.getDate())
        )

      case 'hms':
        return (
          format(date.getHours()) +
          ':' +
          format(date.getMinutes()) +
          ':' +
          format(date.getSeconds())
        )

      case 'ymdhms':
        return (
          format(date.getFullYear()) +
          '-' +
          format(date.getMonth() + 1) +
          '-' +
          format(date.getDate()) +
          ' ' +
          format(date.getHours()) +
          ':' +
          format(date.getMinutes()) +
          ':' +
          format(date.getSeconds())
        )

      case 'unixtime':
        return Math.round(unixTime / 1000)

      case 'unixtimeMil':
        return unixTime

      case 'daysOfYear':
        // 当年二月天数
        var FebDays = new Date(date.getFullYear(), 2, 0).getDate()

        if (FebDays === 28) {
          return 365
        } else {
          return 366
        }

      case 'daysOfMon':
        // 构造日期对象时，date.getMonth() + 1是实际构造的下一个月份，因为月份是从0开始的
        // 第三个数0天数，要求最小是1号，比1号小的话，就成了你要的上个月最后那一天了
        var year = date.getFullYear()
        var mon = date.getMonth() + 1
        var day = new Date(year, mon, 0)
        return day.getDate()
    }

    return date
  },
  setLog: function(_sys, node, id, params, cb) {
    var _params = params || {}
    var obj = {
      topic: _params.topic,
      level: _params.level,
      msg: _params.sMsg
    }
    if (_params.aData) {
      obj.data = _params.aData
    }
    var result = userLog(obj)
    if (cb) {
      if (result && result.status === 0) {
        cb('success', result)
      } else {
        cb('fail', result)
      }
    }
  },
  readCustomVars: function(_sys, node, id, cb) {
    var config = workConfig() || {}
    var customVars = config.result.customVars || []
    var result
    if (customVars.length > 0) {
      result = {}
      for (var i = 0; i < customVars.length; i++) {
        result[customVars[i].k] = customVars[i].v
      }
    }
    cb && cb('finished', result)
  }
}
// 提取微信v2支付相关公共方法
var _wechatPayUtil = {
  randomString(len) {
    len = len || 15
    var chars =
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
    var _len = chars.length
    var res = ''
    for (var i = 0; i < len; i++) {
      res += chars.charAt(Math.floor(Math.random() * _len))
    }
    return res
  },
  createTradeNo() {
    //生成时间字符串  eg: 20210705094549323
    return _wechatPayUtil.getTime() + _wechatPayUtil.randomString(15)
  },
  getTime() {
    var date = new Date()
    date.setHours(date.getHours() - date.getTimezoneOffset() / 60)
    return date.toISOString().replace(/[-T:.Z]/g, '')
  },
  // 生成待签名字符串：参数名ASCII码从小到大排序
  getSerializeData({ data, apiKey }) {
    //注意：需剔除所有值为空以及key为sign的参数,不能剔除值为0的参数
    Object.keys(data).forEach(function(key) {
      if ((!data[key] && data[key] !== 0) || key == 'sign') {
        delete data[key]
      }
    })
    var signStr = Object.keys(data)
      .sort()
      .map(function(key) {
        var paramData = data[key]
        if (typeof paramData !== 'string') {
          //将所有非字符串类型值转为字符串
          paramData = JSON.stringify(paramData)
        }
        return key + '=' + paramData
      })
      .join('&')
    return signStr + '&key=' + apiKey
  },
  getSign({ data, apiKey, isMD5 }) {
    var signStr = _wechatPayUtil.getSerializeData({ data, apiKey })
    var sign = !isMD5
      ? _wechatPayUtil.sha256({ data: signStr, key: apiKey })
      : _wechatPayUtil.md5({ data: signStr })
    return { sign, signStr }
  },
  // 生成MD5
  md5({ data }) {
    var params = {
      algorithm: 'md5',
      data: data,
      dataEncode: 'hex',
      dataDecode: 'raw'
    }
    var result = encryptHash(params)
    return result && result.result && result.result.data.toUpperCase()
  },
  // 生成HMAC-SHA256
  sha256({ data, key }) {
    var params = {
      algorithm: 'sha256',
      data: data,
      dataEncode: 'hex',
      dataDecode: 'raw',
      key: key,
      keyEncode: 'raw'
    }
    var result = encryptHMAC(params)
    return result && result.result && result.result.data.toUpperCase()
  },
  // json2xml
  json2xml({ data, sign }) {
    var jsonData = ''
    var noneCDataKey = ['total_fee', 'refund_fee', 'amount']
    Object.keys(data)
      .sort()
      .forEach(function(key) {
        var parmData = data[key]
        if (parmData) {
          if (typeof parmData !== 'string') {
            parmData = JSON.stringify(parmData)
          }
          if (noneCDataKey.indexOf(key) >= 0 || !isNaN(parmData)) {
            jsonData += '<' + key + '>' + parmData + '</' + key + '>'
          } else {
            jsonData +=
              '<' +
              key +
              '>' +
              '<![CDATA[' +
              parmData +
              ']]>' +
              '</' +
              key +
              '>'
          }
        }
      })
    var xmlData =
      '<xml>' +
      jsonData +
      '<sign>' +
      '<![CDATA[' +
      sign +
      ']]>' +
      '</sign></xml>'
    return xmlData
  },
  // 发送xml请求
  sendReq({ data, apiKey, url, cert, certKey, isMD5 }) {
    //生成签名
    var { sign } = _wechatPayUtil.getSign({ data, apiKey, isMD5 })
    //生成xml
    var xml = _wechatPayUtil.json2xml({ data, sign })
    var req = {
      url: url,
      method: 'POST',
      type: 'XML',
      body: xml
    }
    if (cert && certKey) {
      req['sslConfig'] = {
        cert: cert,
        key: certKey
      }
    }
    var result = serverApi(req)
    var xmlDataRes =
      result && result.result ? xml2json(result.result).result : undefined
    var retSign = xmlDataRes && xmlDataRes.xml ? xmlDataRes.xml.sign : undefined
    var xmlData = xmlDataRes ? xmlDataRes.xml : undefined
    return {
      result: xmlDataRes,
      sign: retSign,
      data: xmlData
    }
  },
  //返回数据校验
  verifyRes({ resObj, apiKey, isMD5 }) {
    resObj = resObj || {}
    var responseData = resObj['data']
    var resSign = resObj['sign']
    var { sign } = _wechatPayUtil.getSign({
      data: responseData,
      apiKey,
      isMD5
    })
    return resSign == sign
  },
  processRet({ resObj, apiKey }) {
    var responseData = resObj['data'] || {}
    // 接口通信情况
    if (responseData['return_code'] == 'SUCCESS') {
      // 返回数据校验
      var verifyRes = _wechatPayUtil.verifyRes({ resObj, apiKey })
      if (!verifyRes) {
        return {
          state: 'fail',
          data: _wechatPayUtil.genRetRes({
            resVal: responseData,
            detail: 'verifyRes fail',
            isSuccess: false
          })
        }
      }
      if (responseData['result_code'] == 'SUCCESS') {
        return {
          state: 'success',
          data: _wechatPayUtil.genRetRes({
            resVal: responseData,
            isSuccess: true
          })
        }
      } else {
        return {
          state: 'fail',
          data: _wechatPayUtil.genRetRes({
            resVal: responseData,
            detail: responseData['err_code'],
            isSuccess: false
          })
        }
      }
    } else {
      // 接口通信失败: 签名失败、参数格式校验错误
      return {
        state: 'fail',
        data: _wechatPayUtil.genRetRes({
          resVal: responseData,
          detail: responseData['return_msg'],
          isSuccess: false
        })
      }
    }
  },
  genRetRes({ resVal, detail, isSuccess }) {
    var map = {
      zh: ['是', '否'],
      en: ['true', 'false']
    }
    var lang = ($sys && $sys.lang) || 'zh'
    var resMap = map[lang] || map['zh']
    return { resVal, isSuccess: isSuccess ? resMap[0] : resMap[1], detail }
  }
}

$funcs['data-wechatConfig'] = {
  getUserinfo: function(_sys, node, id, propObj, cb) {
    var code
    var wechatConfig
    if (typeof propObj == 'object') {
      code = propObj['code']
      if (propObj['type'] == 'APP') {
        wechatConfig = _getWorkConfig('wechatApp')
      } else if (propObj['type'] == 'wechat') {
        wechatConfig = _getWorkConfig('wechat')
      }
    } else {
      code = propObj
      wechatConfig = _getWorkConfig('wechat')
    }
    //var wechatConfig = _getWorkConfig('wechat')
    var appId = (wechatConfig && wechatConfig.appId) || ''
    var secret = (wechatConfig && wechatConfig.appSecret) || ''
    var url =
      'https://api.weixin.qq.com/sns/oauth2/access_token?appid=' +
      appId +
      '&secret=' +
      secret +
      '&code=' +
      code +
      '&grant_type=authorization_code'
    var req = {
      url: url,
      method: 'GET',
      type: 'JSON' //请求中参数的类型
    }
    var result = serverApi(req)
    if (cb && result) {
      if (result.status === 0) {
        var openid
        var access_token
        if (result.result) {
          openid = result.result.openid
          access_token = result.result.access_token
        }
        //redis缓存access_token,refresh_token
        cacheSet({
          key: 'Nwechat' + appId + openid + '_access_token',
          value: JSON.stringify(access_token),
          expire: 7200
        })
        cacheSet({
          key: 'Nwechat' + appId + openid + '_refresh_token',
          value: JSON.stringify(result.result.refresh_token),
          expire: 2592000
        })

        //拉取用户信息
        if (result.result && result.result.scope == 'snsapi_userinfo') {
          var result2 = serverApi({
            url:
              'https://api.weixin.qq.com/sns/userinfo?access_token=' +
              access_token +
              '&openid=' +
              openid +
              '&lang=zh_CN',
            method: 'GET',
            type: 'JSON'
          })
          if (result2 && result2.status == 0) {
            result2.result['access_token'] = access_token
            cb('success', result2.result)
          } else {
            cb('fail', { detail: 'error', msg: '拉取用户信息失败' })
          }
        } else {
          cb('success', { access_token: access_token, openid: openid })
        }
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', { detail: 'error' })
        }
      }
    }
  },
  getAccessToken: function(_sys, node, id, propObj, cb) {
    //======兼容=======
    var _cb
    var sign = ''
    if (arguments.length == 4) {
      _cb = propObj
    } else {
      _cb = cb
      var wechatConfig
      if (propObj['type'] == 'APP') {
        wechatConfig = _getWorkConfig('wechatApp')
      } else if (propObj['type'] == 'wechat') {
        wechatConfig = _getWorkConfig('wechat')
      }
      var appId = (wechatConfig && wechatConfig.appId) || ''
      sign = appId + ((propObj && propObj['openid']) || '')
    }
    //读取redis中缓存参数
    function getCache(key) {
      var result = cacheGet({ key: key })
      if (result.status !== 0 || result['result']['value'] === '') {
        return ''
      }
      return JSON.parse(result['result']['value'])
    }
    var wechat_access_token = getCache('Nwechat' + sign + '_access_token')
    var wechat_refresh_token = getCache('Nwechat' + sign + '_refresh_token')
    if (wechat_access_token) {
      _cb && _cb('success', wechat_access_token)
    } else {
      if (wechat_refresh_token) {
        var wechatConfigs = _getWorkConfig('wechat')
        var appId = (wechatConfigs && wechatConfigs.appId) || undefined
        var url =
          'https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=' +
          appId +
          '&grant_type=refresh_token&refresh_token=' +
          wechat_refresh_token
        var result = serverApi({ url: url, method: 'GET', type: 'JSON' })
        if (result && result.status === 0) {
          if (!result.result.errcode) {
            //redis缓存refresh_token,access_token
            cacheSet({
              key: 'Nwechat' + sign + '_refresh_token',
              value: JSON.stringify(result.result.refresh_token),
              expire: 2592000
            })
            cacheSet({
              key: 'Nwechat' + sign + '_access_token',
              value: JSON.stringify(result.result.access_token),
              expire: 7200
            })
            _cb && _cb('success', result.result.access_token)
          } else {
            _cb && _cb('failed', result.result)
          }
        } else {
          _cb && _cb('failed', { detail: 'api error' })
        }
      } else {
        _cb && _cb('failed', { detail: 'empty' })
      }
    }
  },
  getUserinfo2: function(_sys, node, id, propObj, cb) {
    var access_token = propObj && propObj['access_token']
    var openid = propObj && propObj['openid']
    var result = serverApi({
      url:
        'https://api.weixin.qq.com/sns/userinfo?access_token=' +
        access_token +
        '&openid=' +
        openid +
        '&lang=zh_CN',
      method: 'GET',
      type: 'JSON'
    })
    if (result) {
      if (result.status == 0 && result.result && result.result.openid) {
        cb && cb('success', result.result)
      } else {
        cb && cb('fail', result.result)
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  },
  refund: function(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var wechatConfig = _getWorkConfig('wechat')
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else if (propObj && propObj['type'] == 'APP') {
      wechatConfig = _getWorkConfig('wechatApp')
    }

    var appid = wechatConfig && wechatConfig['appId']
    var mchid = merchantConfig && merchantConfig['mchId']
    var apiKey = merchantConfig && merchantConfig['apiKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']

    var obj = {
      appid: appid,
      mch_id: mchid, //商户号
      nonce_str: randomString(32), //随机字符串
      transaction_id: propObj && propObj['transaction_id'], //微信支付订单
      out_trade_no: propObj && propObj['out_trade_no'], //商户订单号
      out_refund_no: (propObj && propObj['out_refund_no']) || createTradeNo(), //退款订单号
      total_fee: parseInt(propObj && propObj['total_fee'] * 100), //订单金额，单位为分,整数
      refund_fee: parseInt(propObj && propObj['refund_fee'] * 100), //退款金额，单位为分，整数
      refund_desc: propObj && propObj['refund_desc'], //退款原因
      notify_url: propObj && propObj['notify_url'], //退款回调地址
      sign_type: 'HMAC-SHA256'
    }
    //判断是否是服务商模式，此模式下sub_mch_id参数必填
    if (propObj && propObj['mode'] == 'servicer') {
      obj['sub_mch_id'] =
        propObj['subMchId'] || (merchantConfig && merchantConfig['subMchId'])
    }

    var serializeData = getSerializeData(obj, apiKey)
    var sign = getSign(serializeData, apiKey, false)
    var xml = getXMLData(obj, sign)
    var resObj = sendReq(
      xml,
      'https://api.mch.weixin.qq.com/secapi/pay/refund',
      mchPemCert,
      mchPemKey
    )

    //---------校验返回数据-----------------

    var xmlDataRes = resObj['result']
    var responseData = resObj['data']
    var resSign = resObj['sign']
    var _serializeData, _sign
    if (responseData) {
      _serializeData = getSerializeData(responseData, apiKey)
      _sign = getSign(_serializeData, apiKey, false)
    }

    if (
      _sign &&
      _sign === resSign &&
      responseData['result_code'] == 'SUCCESS'
    ) {
      var res = {
        refund_fee: xmlDataRes.xml.refund_fee / 100,
        out_refund_no: xmlDataRes.xml.out_refund_no,
        transaction_id: xmlDataRes.xml.transaction_id,
        out_trade_no: xmlDataRes.xml.out_trade_no,
        refund_id: xmlDataRes.xml.refund_id
      }
      cb && cb('success', res)
    } else {
      cb && cb('fail', { detail: dealerr(xmlDataRes, resObj['apiRes']) })
    }

    //-------生成32位商户订单号----------
    function createTradeNo() {
      //生成时间字符串  eg: 20210705094549323
      function getTime() {
        var date = new Date()
        date.setHours(date.getHours() - date.getTimezoneOffset() / 60)
        return date.toISOString().replace(/[-T:.Z]/g, '')
      }
      return getTime() + randomString(15)
    }
    //生成随机字符串
    function randomString(len) {
      len = len || 15
      var chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
      var _len = chars.length
      var res = ''
      for (var i = 0; i < len; i++) {
        res += chars.charAt(Math.floor(Math.random() * _len))
      }
      return res
    }
    //----生成待签名字符串-------
    function getSerializeData(data, key) {
      //------注意：需剔除所有值为空以及key为sign的参数
      Object.keys(data).forEach(function(key) {
        if ((!data[key] && data[key] !== 0) || key == 'sign') {
          delete data[key]
        }
      })

      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            //将所有非字符串类型值转为字符串
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + paramData
        })
        .join('&')

      return signStr + '&key=' + key
    }
    //-----生成签名---注意：需转为大写-----
    function getSign(data, key, isMD5) {
      var params = {
        algorithm: isMD5 ? 'md5' : 'sha256',
        data: data,
        dataEncode: 'hex',
        dataDecode: 'raw',
        key: key,
        keyEncode: 'raw'
      }
      var result = encryptHMAC(params)
      return result && result.result && result.result.data.toUpperCase()
    }
    //-------请求数据转XML--------
    function getXMLData(data, sign) {
      var jsonData = ''
      var noneCDataKey = ['total_fee', 'refund_fee', 'amount']

      Object.keys(data)
        .sort()
        .forEach(function(key) {
          var parmData = data[key]
          if (parmData) {
            if (typeof parmData !== 'string') {
              parmData = JSON.stringify(parmData)
            }
            if (noneCDataKey.indexOf(key) >= 0 || !isNaN(parmData)) {
              jsonData += '<' + key + '>' + parmData + '</' + key + '>'
            } else {
              jsonData +=
                '<' +
                key +
                '>' +
                '<![CDATA[' +
                parmData +
                ']]>' +
                '</' +
                key +
                '>'
            }
          }
        })

      var xmlData =
        '<xml>' +
        jsonData +
        '<sign>' +
        '<![CDATA[' +
        sign +
        ']]>' +
        '</sign></xml>'

      return xmlData
    }
    //--------发送xml请求--------
    function sendReq(xmlData, url, cert, certKey) {
      var req = {
        url: url,
        method: 'POST',
        type: 'XML',
        body: xmlData,
        sslConfig: {
          cert: cert,
          key: certKey
        }
      }
      var result = serverApi(req)
      var xmlDataRes =
        result && result.result ? xml2json(result.result).result : undefined
      var sign = xmlDataRes && xmlDataRes.xml ? xmlDataRes.xml.sign : undefined
      var data = xmlDataRes ? xmlDataRes.xml : undefined

      return {
        result: xmlDataRes,
        sign: sign,
        data: data,
        apiRes: result && result.result
      }
    }
    //--------处理功能错误---------
    function dealerr(xmlDataRes, apiRes) {
      var res
      if (xmlDataRes && xmlDataRes.xml) {
        if (xmlDataRes.xml.return_code === 'SUCCESS') {
          if (xmlDataRes.xml.result_code === 'FAIL') {
            res = xmlDataRes.xml.err_code_des
          } else {
            res = '签名错误'
          }
        } else {
          res = xmlDataRes.xml.return_msg
        }
      } else {
        res = apiRes
      }
      return res
    }
  },
  payToMoney: function(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    //-----微信公众号:wechat,小程序：applet
    var wechatConfig = _getWorkConfig('wechat')
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else {
      wechatConfig = _getWorkConfig('wechat')
    }
    var appid = wechatConfig && wechatConfig['appId']
    var mchid = merchantConfig && merchantConfig['mchId']
    var apiKey = merchantConfig && merchantConfig['apiKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var obj = {
      mch_appid: appid,
      mchid: mchid,
      nonce_str: randomString(32),
      partner_trade_no:
        (propObj && propObj['partner_trade_no']) || createTradeNo(),
      openid: propObj && propObj['openid'],
      check_name:
        propObj && propObj['isCheck_name'] ? 'FORCE_CHECK' : 'NO_CHECK',
      re_user_name: propObj && propObj['re_user_name'], //如果check_name为FORCE_CHECK时必填
      amount: parseInt(propObj && propObj['amount'] * 100), //付款金额，单位分，整数
      desc: propObj && propObj['desc'] //备注
    }
    var serializeData = getSerializeData(obj, apiKey)
    var sign = getSign(serializeData) //使用的是hash-MD5
    var xml = getXMLData(obj, sign)
    var resObj = sendReq(
      xml,
      'https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers',
      mchPemCert,
      mchPemKey
    )

    //-----------校验返回数据----------
    var xmlDataRes = resObj['result']
    var responseData = resObj['data']
    if (responseData && responseData['result_code'] == 'SUCCESS') {
      var res = {
        payment_time: xmlDataRes.xml.payment_time,
        payment_no: xmlDataRes.xml.payment_no,
        partner_trade_no: xmlDataRes.xml.partner_trade_no
      }
      cb && cb('success', res)
    } else {
      cb && cb('fail', { detail: dealerr(xmlDataRes) })
    }
    //
    //
    //
    //---------生成32位商户订单号----------
    function createTradeNo() {
      //生成时间字符串  eg: 20210705094549323
      function getTime() {
        var date = new Date()
        date.setHours(date.getHours() - date.getTimezoneOffset() / 60)
        return date.toISOString().replace(/[-T:.Z]/g, '')
      }
      return getTime() + randomString(15)
    }
    //-------生成随机字符串----------------
    function randomString(len) {
      len = len || 15
      var chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
      var _len = chars.length
      var res = ''
      for (var i = 0; i < len; i++) {
        res += chars.charAt(Math.floor(Math.random() * _len))
      }
      return res
    }
    //----生成待签名字符串--------------
    function getSerializeData(data, key) {
      //------注意：需剔除所有值为空以及key为sign的参数,不能剔除值为0的参数-------------
      Object.keys(data).forEach(function(key) {
        if ((!data[key] && data[key] !== 0) || key == 'sign') {
          delete data[key]
        }
      })
      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            //将所有非字符串类型值转为字符串
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + paramData
        })
        .join('&')
      return signStr + '&key=' + key
    }
    //-----生成签名(Hash-MD5)---注意：需转为大写-----
    function getSign(data) {
      var params = {
        algorithm: 'md5',
        data: data,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }
      var result = encryptHash(params)
      return result && result.result && result.result.data.toUpperCase()
    }
    //-------请求数据转XML-------------------
    function getXMLData(data, sign) {
      var jsonData = ''
      var noneCDataKey = ['total_fee', 'refund_fee', 'amount']
      Object.keys(data)
        .sort()
        .forEach(function(key) {
          var parmData = data[key]
          if (parmData) {
            if (typeof parmData !== 'string') {
              parmData = JSON.stringify(parmData)
            }
            if (noneCDataKey.indexOf(key) >= 0 || !isNaN(parmData)) {
              jsonData += '<' + key + '>' + parmData + '</' + key + '>'
            } else {
              jsonData +=
                '<' +
                key +
                '>' +
                '<![CDATA[' +
                parmData +
                ']]>' +
                '</' +
                key +
                '>'
            }
          }
        })
      var xmlData =
        '<xml>' +
        jsonData +
        '<sign>' +
        '<![CDATA[' +
        sign +
        ']]>' +
        '</sign></xml>'
      return xmlData
    }
    //-------发送xml请求--------------------
    function sendReq(xmlData, url, cert, certKey) {
      var req = {
        url: url,
        method: 'POST',
        type: 'XML',
        body: xmlData,
        sslConfig: {
          cert: cert,
          key: certKey
        }
      }
      var result = serverApi(req)
      var xmlDataRes =
        result && result.result ? xml2json(result.result).result : undefined
      var sign = xmlDataRes && xmlDataRes.xml ? xmlDataRes.xml.sign : undefined
      var data = xmlDataRes ? xmlDataRes.xml : undefined
      return { result: xmlDataRes, sign: sign, data: data }
    }
    //----------------处理功能错误---------------
    function dealerr(xmlDataRes) {
      var res
      if (xmlDataRes && xmlDataRes.xml) {
        if (xmlDataRes.xml.return_code === 'SUCCESS') {
          if (xmlDataRes.xml.result_code === 'FAIL') {
            res = xmlDataRes.xml.err_code_des
          } else {
            res = '签名错误！'
          }
        } else {
          res = xmlDataRes.xml.return_msg
        }
      } else {
        res = 'error'
      }
      return res
    }
  },
  createPayInfo: function(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var config
    var trade_type
    if (propObj) {
      if (propObj['type'] == 'JSAPI') {
        config = _getWorkConfig('wechat')
        trade_type = 'JSAPI'
      } else if (propObj['type'] == 'NATIVE') {
        config = _getWorkConfig('wechat')
        trade_type = 'NATIVE'
      } else if (propObj['type'] == 'APPLET') {
        config = _getWorkConfig('applet')
        trade_type = 'JSAPI'
      } else if (propObj['type'] == 'H5') {
        config = _getWorkConfig('wechat')
        trade_type = 'MWEB'
      } else if (propObj['type'] == 'APP') {
        config = _getWorkConfig('wechatApp')
        trade_type = 'APP'
      }
    }

    var appid = config && config['appId']
    var mchid = merchantConfig && merchantConfig['mchId']
    var apiKey = merchantConfig && merchantConfig['apiKey']

    var obj = {
      appid: appid,
      mch_id: mchid,
      nonce_str: randomString(32),
      sign_type: 'HMAC-SHA256',
      body: propObj && propObj['body'],
      out_trade_no: (propObj && propObj['out_trade_no']) || createTradeNo(), //商户订单构成：字母、数字、中划线-、下划线_、竖线|、星号*
      total_fee: parseInt(propObj && propObj['total_fee'] * 100),
      spbill_create_ip: propObj && propObj['spbill_create_ip'], //用户端IP
      notify_url: propObj && propObj['notify_url'],
      trade_type: trade_type || 'JSAPI',
      profit_sharing: propObj && propObj['profit_sharing'] ? 'Y' : 'N'
    }
    //----当支付类型为MWEB时，此参数必填----
    if (trade_type === 'MWEB') {
      obj['scene_info'] = {
        h5_info: {
          type: 'Wap',
          wap_url: propObj && propObj['wap_url'],
          wap_name: propObj && propObj['wap_name']
        }
      }
    } else if (trade_type === 'JSAPI') {
      obj['openid'] = propObj['openid']
    }
    //判断是否是服务商模式，此模式下sub_mch_id参数必填
    if (propObj && propObj['mode'] == 'servicer') {
      obj['sub_mch_id'] =
        propObj['subMchId'] || (merchantConfig && merchantConfig['subMchId'])
    }

    var serializeData = getSerializeData(obj, apiKey)
    var sign = getSign(serializeData, apiKey, false)
    var xml = getXMLData(obj, sign)
    var resObj = sendReq(xml, 'https://api.mch.weixin.qq.com/pay/unifiedorder')
    //-------返回数据校验----------
    var xmlDataRes = resObj['result']
    var responseData = resObj['data']
    var resSign = resObj['sign']
    var _serializeData = getSerializeData(responseData, apiKey)
    var _sign = getSign(_serializeData, apiKey, false)
    if (
      _sign &&
      _sign === resSign &&
      responseData['result_code'] == 'SUCCESS'
    ) {
      var res = {
        trade_type: xmlDataRes.xml.trade_type,
        prepay_id: xmlDataRes.xml.prepay_id,
        out_trade_no: obj['out_trade_no']
      }
      //-----------h5支付信息---------
      if (trade_type === 'MWEB') {
        res['mweb_url'] = xmlDataRes.xml.mweb_url
      } else if (trade_type === 'APP') {
        //-----------app的支付信息，坑：签名参数全部是小写-----------------
        var temp = {
          appid: appid,
          partnerid: mchid,
          prepayid: xmlDataRes.xml.prepay_id,
          package: 'Sign=WXPay',
          noncestr: randomString(32),
          timestamp: (new Date().getTime() + '').slice(0, 10)
        }
        temp['sign'] = getSign(getSerializeData(temp, apiKey), apiKey, false)
        //------前端接口的要求的参数类型------
        res['appPayInfo'] = {
          appId: appid,
          partnerId: mchid,
          prepayId: xmlDataRes.xml.prepay_id,
          package: 'Sign=WXPay',
          nonceStr: temp['noncestr'],
          timeStamp: temp['timestamp'],
          sign: temp['sign']
        }
      } else if (trade_type === 'NATIVE') {
        //---------NATIVE的支付信息-------------------
        res['code_url'] = xmlDataRes.xml.code_url
      } else {
        //------------jsapi的支付信息--------------
        var temp = {
          appId: appid,
          nonceStr: randomString(32),
          package: 'prepay_id=' + xmlDataRes.xml.prepay_id,
          signType: 'HMAC-SHA256',
          timeStamp: (new Date().getTime() + '').slice(0, 10)
        }
        temp['paySign'] = getSign(getSerializeData(temp, apiKey), apiKey, false)
        res['jsapiPayInfo'] = temp
      }
      cb && cb('success', res)
    } else {
      cb && cb('fail', { detail: dealerr(xmlDataRes) })
    }

    //------------------------------------
    //------------------------------------
    //
    //
    //
    //---------生成32位商户订单号----------
    function createTradeNo() {
      //生成时间字符串  eg: 20210705094549323
      function getTime() {
        var date = new Date()
        date.setHours(date.getHours() - date.getTimezoneOffset() / 60)
        return date.toISOString().replace(/[-T:.Z]/g, '')
      }
      return getTime() + randomString(15)
    }
    //-------生成随机字符串----------------
    function randomString(len) {
      len = len || 15
      var chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
      var _len = chars.length
      var res = ''
      for (var i = 0; i < len; i++) {
        res += chars.charAt(Math.floor(Math.random() * _len))
      }
      return res
    }
    //----生成待签名字符串--------------
    function getSerializeData(data, key) {
      //------注意：需剔除所有值为空以及key为sign的参数,不能剔除值为0的参数-------------
      Object.keys(data).forEach(function(key) {
        if ((!data[key] && data[key] !== 0) || key == 'sign') {
          delete data[key]
        }
      })
      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            //将所有非字符串类型值转为字符串
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + paramData
        })
        .join('&')
      return signStr + '&key=' + key
    }
    //-----生成签名---注意：需转为大写-----
    function getSign(data, key, isMD5) {
      var params = {
        algorithm: isMD5 ? 'md5' : 'sha256',
        data: data,
        dataEncode: 'hex',
        dataDecode: 'raw',
        key: key,
        keyEncode: 'raw'
      }
      var result = encryptHMAC(params)
      return result && result.result && result.result.data.toUpperCase()
    }
    //-------请求数据转XML-------------------
    function getXMLData(data, sign) {
      var jsonData = ''
      var noneCDataKey = ['total_fee', 'refund_fee', 'amount']
      Object.keys(data)
        .sort()
        .forEach(function(key) {
          var parmData = data[key]
          if (parmData) {
            if (typeof parmData !== 'string') {
              parmData = JSON.stringify(parmData)
            }
            if (noneCDataKey.indexOf(key) >= 0 || !isNaN(parmData)) {
              jsonData += '<' + key + '>' + parmData + '</' + key + '>'
            } else {
              jsonData +=
                '<' +
                key +
                '>' +
                '<![CDATA[' +
                parmData +
                ']]>' +
                '</' +
                key +
                '>'
            }
          }
        })
      var xmlData =
        '<xml>' +
        jsonData +
        '<sign>' +
        '<![CDATA[' +
        sign +
        ']]>' +
        '</sign></xml>'
      return xmlData
    }
    //----------------发送xml请求--------------------
    function sendReq(xmlData, url, cert, certKey) {
      var req = {
        url: url,
        method: 'POST',
        type: 'XML',
        body: xmlData
      }
      var result = serverApi(req)
      var xmlDataRes =
        result && result.result ? xml2json(result.result).result : undefined
      var sign = xmlDataRes && xmlDataRes.xml ? xmlDataRes.xml.sign : undefined
      var data = xmlDataRes ? xmlDataRes.xml : undefined
      return { result: xmlDataRes, sign: sign, data: data }
    }
    //----------------处理功能错误---------------
    function dealerr(xmlDataRes) {
      var res
      if (xmlDataRes && xmlDataRes.xml) {
        if (xmlDataRes.xml.return_code === 'SUCCESS') {
          if (xmlDataRes.xml.result_code === 'FAIL') {
            res = xmlDataRes.xml.err_code_des
          } else {
            res = '签名错误'
          }
        } else {
          res = xmlDataRes.xml.return_msg
        }
      } else {
        res = 'error'
      }
      return res
    }
    //////////////////////////////////////////
  },
  checkAsyncNotice: function(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var apiKey = merchantConfig && merchantConfig['apiKey']

    var data = propObj && propObj['data']
    var sign = data && data['xml'] && data['xml']['sign']
    var responseData = data && data['xml']
    var _sign = ''
    if (Object.prototype.toString.call(responseData) === '[object Object]') {
      var serializeData = getSerializeData(responseData, apiKey)
      _sign = getSign(serializeData, apiKey, false)
    }

    var res = !!(sign && _sign === sign)
    var xmlData =
      '<xml><return_code><![CDATA[' +
      (res ? 'SUCCESS' : 'FAIL') +
      ']]></return_code></xml>'

    if (res) {
      cb && cb('success', { isSuccess: res, xmlData: xmlData })
    } else {
      cb && cb('fail', { isSuccess: res, xmlData: xmlData })
    }

    //----生成待签名字符串--------------
    function getSerializeData(data, key) {
      //------注意：需剔除所有值为空以及key为sign的参数,不能剔除值为0的参数-------------
      Object.keys(data).forEach(function(key) {
        if ((!data[key] && data[key] !== 0) || key == 'sign') {
          delete data[key]
        }
      })
      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            //将所有非字符串类型值转为字符串
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + paramData
        })
        .join('&')
      return signStr + '&key=' + key
    }

    //-----生成签名--sha256/MD5---注意：需转为大写-----
    function getSign(data, key, isMD5) {
      if (isMD5) {
        var params = {
          algorithm: 'md5',
          data: data,
          dataEncode: 'hex',
          dataDecode: 'raw'
        }
        var result = encryptHash(params)
      } else {
        var params = {
          algorithm: 'sha256',
          data: data,
          dataEncode: 'hex',
          dataDecode: 'raw',
          key: key,
          keyEncode: 'raw'
        }
        var result = encryptHMAC(params)
      }
      return result && result.result && result.result.data.toUpperCase()
    }
  },
  orderquery: function(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    if (propObj) {
      if (['JSAPI', 'NATIVE', 'H5'].indexOf(propObj['type']) > -1) {
        var config = _getWorkConfig('wechat')
      } else if (propObj['type'] == 'APPLET') {
        var config = _getWorkConfig('applet')
      } else if (propObj['type'] == 'APP') {
        var config = _getWorkConfig('wechatApp')
      }
    }
    var appid = config && config['appId']
    var mchid = merchantConfig && merchantConfig['mchId']
    var apiKey = merchantConfig && merchantConfig['apiKey']

    var obj = {
      appid: appid,
      mch_id: mchid,
      transaction_id: propObj && propObj['transaction_id'],
      out_trade_no: propObj && propObj['out_trade_no'],
      nonce_str: randomString(32)
    }
    //判断是否是服务商模式，此模式下sub_mch_id参数必填
    if (propObj && propObj['mode'] == 'servicer') {
      obj['sub_mch_id'] =
        propObj['subMchId'] || (merchantConfig && merchantConfig['subMchId'])
    }

    var serializeData = getSerializeData(obj, apiKey)
    var sign = getSign(serializeData, apiKey, true)
    var xml = getXMLData(obj, sign)
    var resObj = sendReq(xml, 'https://api.mch.weixin.qq.com/pay/orderquery')

    //-------返回数据校验----------
    var xmlDataRes = resObj['result']
    var responseData = resObj['data']
    var resSign = resObj['sign']
    var _serializeData = getSerializeData(responseData, apiKey)
    var _sign = getSign(_serializeData, apiKey, true)
    if (
      _sign &&
      _sign === resSign &&
      responseData['result_code'] == 'SUCCESS'
    ) {
      var res = {
        openid: responseData['openid'],
        is_subscribe: responseData['is_subscribe'],
        trade_type: responseData['trade_type'],
        trade_state: responseData['trade_state'],
        bank_type: responseData['bank_type'],
        total_fee: responseData['total_fee'],
        cash_fee: responseData['cash_fee'],
        transaction_id: responseData['transaction_id'],
        out_trade_no: responseData['out_trade_no'],
        time_end: responseData['time_end'],
        trade_state_desc: responseData['trade_state_desc']
      }
      cb && cb('success', res)
    } else {
      cb && cb('fail', { detail: [dealerr(xmlDataRes), config, propObj] })
    }

    //-------生成随机字符串----------------
    function randomString(len) {
      len = len || 15
      var chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
      var _len = chars.length
      var res = ''
      for (var i = 0; i < len; i++) {
        res += chars.charAt(Math.floor(Math.random() * _len))
      }
      return res
    }
    //----生成待签名字符串--------------
    function getSerializeData(data, key) {
      //------注意：需剔除所有值为空以及key为sign的参数,不能剔除值为0的参数-------------
      Object.keys(data).forEach(function(key) {
        if ((!data[key] && data[key] !== 0) || key == 'sign') {
          delete data[key]
        }
      })
      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            //将所有非字符串类型值转为字符串
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + paramData
        })
        .join('&')
      return signStr + '&key=' + key
    }
    //-----生成签名--sha256/MD5---注意：需转为大写-----
    function getSign(data, key, isMD5) {
      if (isMD5) {
        var params = {
          algorithm: 'md5',
          data: data,
          dataEncode: 'hex',
          dataDecode: 'raw'
        }
        var result = encryptHash(params)
      } else {
        var params = {
          algorithm: 'sha256',
          data: data,
          dataEncode: 'hex',
          dataDecode: 'raw',
          key: key,
          keyEncode: 'raw'
        }
        var result = encryptHMAC(params)
      }
      return result && result.result && result.result.data.toUpperCase()
    }
    //-------请求数据转XML-------------------
    function getXMLData(data, sign) {
      var jsonData = ''
      var noneCDataKey = ['total_fee', 'refund_fee', 'amount']
      Object.keys(data)
        .sort()
        .forEach(function(key) {
          var parmData = data[key]
          if (parmData) {
            if (typeof parmData !== 'string') {
              parmData = JSON.stringify(parmData)
            }
            if (noneCDataKey.indexOf(key) >= 0 || !isNaN(parmData)) {
              jsonData += '<' + key + '>' + parmData + '</' + key + '>'
            } else {
              jsonData +=
                '<' +
                key +
                '>' +
                '<![CDATA[' +
                parmData +
                ']]>' +
                '</' +
                key +
                '>'
            }
          }
        })
      var xmlData =
        '<xml>' +
        jsonData +
        '<sign>' +
        '<![CDATA[' +
        sign +
        ']]>' +
        '</sign></xml>'
      return xmlData
    }
    //----------------发送xml请求--------------------
    function sendReq(xmlData, url, cert, certKey) {
      var req = {
        url: url,
        method: 'POST',
        type: 'XML',
        body: xmlData
      }
      var result = serverApi(req)
      var xmlDataRes =
        result && result.result ? xml2json(result.result).result : undefined
      var sign = xmlDataRes && xmlDataRes.xml ? xmlDataRes.xml.sign : undefined
      var data = xmlDataRes ? xmlDataRes.xml : undefined
      return { result: xmlDataRes, sign: sign, data: data }
    }
    //----------------处理功能错误---------------
    function dealerr(xmlDataRes) {
      var res
      if (xmlDataRes && xmlDataRes.xml) {
        if (xmlDataRes.xml.return_code === 'SUCCESS') {
          if (xmlDataRes.xml.result_code === 'FAIL') {
            res = xmlDataRes.xml.err_code_des
          } else {
            res = '签名错误'
          }
        } else {
          res = xmlDataRes.xml.return_msg
        }
      } else {
        res = 'error'
      }
      return res
    }
    //////////////////////////////////////////
  },
  micropay: function(_sys, node, id, propObj, cb) {
    propObj = propObj || {}
    var merchantConfig = _getWorkConfig('merchant') || {}
    var config = _getWorkConfig('wechat') || {}
    var appid = config['appId']
    var mchid = merchantConfig['mchId']
    var apiKey = merchantConfig['apiKey'] // 微信商户平台-->账户中心-->账户设置-->API安全-->设置API密钥
    var req = {
      appid, //公众账号ID
      mch_id: mchid, //商户号
      nonce_str: _wechatPayUtil.randomString(32), //随机字符串
      sign_type: 'HMAC-SHA256', // 签名类型: MD5, HMAC-SHA256
      body: propObj['body'], //商品描述
      out_trade_no: propObj['out_trade_no'] || _wechatPayUtil.createTradeNo(), //商户订单号
      total_fee: parseInt(propObj['total_fee']), //标价金额
      spbill_create_ip: propObj['spbill_create_ip'], // 调用微信支付API的机器IP
      auth_code: propObj['auth_code'], // 付款码: 设备读取用户微信中的条码或者二维码信息
      profit_sharing: propObj['profit_sharing'] ? 'Y' : 'N' // 是否分账
    }
    //判断是否是服务商模式，此模式下sub_mch_id参数必填
    if (propObj['mode'] == 'servicer') {
      req['sub_mch_id'] = propObj['subMchId'] || merchantConfig['subMchId']
    }
    //发送请求
    var resObj = _wechatPayUtil.sendReq({
      data: req,
      apiKey,
      url: 'https://api.mch.weixin.qq.com/pay/micropay',
      isMD5: req['sign_type'] !== 'HMAC-SHA256'
    })
    var responseData = resObj['data'] || {}
    let ret = _wechatPayUtil.processRet({ resObj, apiKey })
    if (ret.state == 'success') {
      if (responseData['trade_type'] == 'MICROPAY') {
        // 交易成功
        return cb && cb('success', ret.data)
      } else {
        return (
          cb &&
          cb(
            'fail',
            _wechatPayUtil.genRetRes({
              resVal: responseData,
              isSuccess: false,
              detail: 'trade_type is not MICROPAY'
            })
          )
        )
      }
    } else {
      return cb && cb('fail', ret.data)
    }
  },
  reverse: function(_sys, node, id, propObj, cb) {
    propObj = propObj || {}
    var merchantConfig = _getWorkConfig('merchant') || {}
    var config = _getWorkConfig('wechat') || {}
    var appid = config['appId']
    var mchid = merchantConfig['mchId']
    var apiKey = merchantConfig['apiKey']
    var mchPemKey = merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig['mchPemCert']
    var req = {
      appid, //公众账号ID
      mch_id: mchid, //商户号
      transaction_id: propObj['transaction_id'], //微信订单号
      out_trade_no: propObj['out_trade_no'], //商户订单号
      nonce_str: _wechatPayUtil.randomString(32), //随机字符串
      sign_type: 'HMAC-SHA256'
    }
    //判断是否是服务商模式，此模式下sub_mch_id参数必填
    if (propObj['mode'] == 'servicer') {
      req['sub_mch_id'] = propObj['subMchId'] || merchantConfig['subMchId']
    }
    //发送请求
    var resObj = _wechatPayUtil.sendReq({
      data: req,
      apiKey,
      url: 'https://api.mch.weixin.qq.com/secapi/pay/reverse',
      cert: mchPemCert,
      certKey: mchPemKey
    })
    let ret = _wechatPayUtil.processRet({ resObj, apiKey })
    return cb && cb(ret.state, ret.data)
  },
  refundQuery: function(_sys, node, id, propObj, cb) {
    propObj = propObj || {}
    var config
    switch (propObj['type']) {
      case 'APPLET':
        config = _getWorkConfig('applet') || {}
        break
      case 'APP':
        config = _getWorkConfig('wechatApp') || {}
        break
      default:
        config = _getWorkConfig('wechat') || {}
        break
    }
    var merchantConfig = _getWorkConfig('merchant') || {}
    var appid = config['appId']
    var mchid = merchantConfig['mchId']
    var apiKey = merchantConfig['apiKey']

    var req = {
      appid, //公众账号ID
      mch_id: mchid, //商户号
      nonce_str: _wechatPayUtil.randomString(32), //随机字符串
      sign_type: 'HMAC-SHA256',
      transaction_id: propObj['transaction_id'], //微信订单号
      out_trade_no: propObj['out_trade_no'], //商户订单号
      out_refund_no: propObj['out_refund_no'], //商户退款单号
      refund_id: propObj['refund_id'] //微信退款单号
    }
    //判断是否是服务商模式，此模式下sub_mch_id参数必填
    if (propObj['mode'] == 'servicer') {
      req['sub_mch_id'] = propObj['subMchId'] || merchantConfig['subMchId']
    }
    //发送请求
    var resObj = _wechatPayUtil.sendReq({
      data: req,
      apiKey,
      url: 'https://api.mch.weixin.qq.com/pay/refundquery',
      isMD5: req['sign_type'] !== 'HMAC-SHA256'
    })
    let ret = _wechatPayUtil.processRet({ resObj, apiKey })
    return cb && cb(ret.state, ret.data)
  },
  getToken: function(_sys, node, id, propObj, cb) {
    var config
    if (propObj) {
      config = _getWorkConfig(propObj['type'])
    }
    var appId = config && config['appId']
    var appSecret = config && config['appSecret']

    var key = 'U' + appId + appSecret
    var cache = getCache(key)
    if (cache && propObj['cache'] !== false) {
      cb && cb('success', { accessToken: cache })
    } else {
      var result = serverApi({
        url:
          'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=' +
          appId +
          '&secret=' +
          appSecret,
        method: 'GET',
        type: 'JSON'
      })
      if (result) {
        if (result.status == 0 && result.result && result.result.access_token) {
          cacheSet({
            key: key,
            value: result.result.access_token,
            expire: result.result.expires_in
          })
          cb &&
            cb('success', {
              accessToken: result.result.access_token,
              expires: result.result.expires_in
            })
        } else {
          cb && cb('fail', result.result)
        }
      } else {
        cb && cb('fail', { detail: 'request error' })
      }
    }
    //读取redis中缓存参数
    function getCache(key) {
      var result = cacheGet({ key: key })
      if (result && result.status == 0 && result.result) {
        return result['result']['value']
      } else {
        return ''
      }
    }
  },
  sendSubscribeMsg: function(_sys, node, id, propObj, cb) {
    var access_token = propObj && propObj['access_token']
    var req = {
      url:
        'https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token=' +
        access_token,
      method: 'POST',
      type: 'JSON',
      body: {
        touser: propObj && propObj['touser'],
        template_id: propObj && propObj['template_id'],
        page: propObj && propObj['page'],
        data: propObj && propObj['data'],
        miniprogram_state: propObj && propObj['miniprogram_state']
      }
    }
    var result = serverApi(req)
    if (result) {
      if (result.status == 0 && result.result && result.result.errcode == 0) {
        cb && cb('success', { msgid: result.result.msgid })
      } else {
        cb && cb('fail', result.result)
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  },
  sendTemplateMsg: function(_sys, node, id, propObj, cb) {
    var access_token = propObj && propObj['access_token']
    var req = {
      url:
        'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=' +
        access_token,
      method: 'POST',
      type: 'JSON',
      body: {
        touser: propObj && propObj['touser'],
        template_id: propObj && propObj['template_id'],
        url: propObj && propObj['url'],
        data: propObj && propObj['data']
      }
    }

    if (propObj && propObj['appid']) {
      req['body']['miniprogram'] = {
        appid: propObj && propObj['appid']
      }
      if (propObj['pagepath']) {
        req['body']['miniprogram']['pagepath'] = propObj['pagepath']
      }
    }

    var result = serverApi(req)
    if (result) {
      if (result.status == 0 && result.result && result.result.errcode == 0) {
        cb && cb('success', { msgid: result.result.msgid })
      } else {
        cb && cb('fail', result.result)
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  },
  appletCode2Session: function(_sys, node, id, propObj, cb) {
    var code = propObj['code']
    var appletConfig = _getWorkConfig('applet')
    var appId = appletConfig && appletConfig.appId
    var secret = appletConfig && appletConfig.appSecret
    if (!appId || !secret || !code) {
      cb && cb('fail', { detail: '参数缺少：appId,secret,code为必填' })
      return
    }
    var req = {
      url:
        'https://api.weixin.qq.com/sns/jscode2session?appid=' +
        appId +
        '&secret=' +
        secret +
        '&js_code=' +
        code +
        '&grant_type=authorization_code',
      method: 'GET',
      type: 'JSON'
    }
    var result = serverApi(req)
    if (result) {
      if (result.status == 0 && result.result && result.result.openid) {
        cb &&
          cb('success', {
            openid: result.result.openid,
            sessionKey: result.result.session_key,
            unionid: result.result.unionid
          })
      } else {
        cb && cb('fail', result)
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  },
  decryptData: function(_sys, node, id, propObj, cb) {
    var iv = propObj.iv
    var encryptedData = propObj.encryptedData
    var sessionKey = propObj.sessionKey
    if (!iv || !encryptedData || !sessionKey) {
      cb && cb('fail', 'iv,encryptedData,sessionKey为必填参数')
      return
    }
    var params = {
      algorithm: 'aes',
      data: encryptedData, //密文
      dataEncode: 'raw', //解密后的明文编码
      dataDecode: 'base64', //传入的密文编码，
      key: sessionKey, //密钥
      keyEncode: 'base64', //密钥编码
      iv: iv, //算法初始向量
      ivEncode: 'base64', //算法初始向量编码
      mode: 'CBC', //使用的算法为 AES-128-CBC，数据采用PKCS#7填充。
      padding: 'pkcs7'
    }
    var res = decryptSymmetric(params)

    if (res.status === 0 && res.result && res.result.data) {
      var data = res.result.data
      try {
        var info = JSON.parse(data)
        cb && cb('success', info)
        return info
      } catch (e) {
        cb && cb('fail', res)
      }
    } else {
      cb && cb('fail', res)
    }
  },
  //wxpayV3
  prepay: function prepay(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var config
    var type = propObj['type']
    var mode = propObj['mode']
    if (type == 'JSAPI') {
      config = _getWorkConfig('wechat')
    } else if (type == 'NATIVE') {
      config = _getWorkConfig('wechat')
    } else if (type == 'APPLET') {
      config = _getWorkConfig('applet')
    } else if (type == 'H5') {
      config = _getWorkConfig('wechat')
    } else if (type == 'APP') {
      config = _getWorkConfig('wechatApp')
    }

    var appid = config && config['appId']
    var outTradeNo =
      propObj['outTradeNo'] ||
      new Date().getTime() +
        Math.random()
          .toString(16)
          .slice(2)

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      description: propObj['description'],
      outTradeNo: outTradeNo,
      notifyUrl: propObj['notifyUrl'],
      goodsTag: propObj['goodsTag'],
      amount: {
        total: propObj['total']
      },
      settleInfo: {
        profitSharing: !!propObj['profitSharing']
      }
    }
    if (mode === 'servicer') {
      req.spAppid = appid
      req.subMchid = propObj['subMchId'] || subMchId
      if (['JSAPI', 'APPLET'].includes(type)) {
        req.payer = {
          spOpenid: propObj['openid']
        }
      } else if (type === 'H5') {
        req.SceneInfo = {
          payerClientIp: propObj['payerClientIp'],
          h5Info: {
            type: propObj['h5Type']
          }
        }
      }
    } else {
      req.appid = appid
      if (['JSAPI', 'APPLET'].includes(propObj['type'])) {
        req.payer = {
          openid: propObj['openid']
        }
      } else if (type === 'H5') {
        req.SceneInfo = {
          payerClientIp: propObj['payerClientIp'],
          h5Info: {
            type: propObj['h5Type']
          }
        }
      }
    }

    var fnMap = {
      common: {
        JSAPI: 'wx.wxpay.prepay',
        APPLET: 'wx.wxpay.prepay',
        H5: 'wx.wxpay.prepayByH5',
        APP: 'wx.wxpay.prepayByApp',
        NATIVE: 'wx.wxpay.prepayByNative'
      },
      servicer: {
        JSAPI: 'wx.wxpay.partnerPrepay',
        APPLET: 'wx.wxpay.partnerPrepay',
        H5: 'wx.wxpay.partnerPrepayByH5',
        APP: 'wx.wxpay.partnerPrepayByApp',
        NATIVE: 'wx.wxpay.partnerPrepayByNative'
      }
    }
    var resp = extGo({
      fn: fnMap[mode][type],
      param: req
    })
    if (resp && resp.status === 0) {
      resp.outTradeNo = outTradeNo
      var res = resp.result
      if (type === 'JSAPI' || type === 'APPLET') {
        resp.jsapiPayInfo = {
          appId: res.appId,
          timeStamp: res.timeStamp,
          nonceStr: res.nonceStr,
          package: res.package,
          signType: res.signType,
          paySign: res.paySign
        }
      } else if (type == 'APP') {
        resp.appPayInfo = {
          appId: res.appid,
          partnerId: res.partnerid,
          prepayId: res.prepayid,
          package: res.package,
          nonceStr: res.noncestr,
          timeStamp: res.timestamp,
          sign: res.sign
        }
      }
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  queryOrder: function queryOrder(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      outTradeNo: propObj['outTradeNo'],
      transactionId: propObj['transactionId']
    }
    var fn = 'wx.wxpay.queryPaymentOrder'
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
      fn = 'wx.wxpay.queryPartnerOrder'
    }

    var resp = extGo({
      fn: fn,
      param: req
    })
    if (resp && resp.status === 0) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  requestRefund: function requestRefund(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var outRefundNo =
      propObj['outRefundNo'] ||
      new Date().getTime() +
        Math.random()
          .toString(16)
          .slice(2)
    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      transactionId: propObj['transactionId'],
      outTradeNo: propObj['outTradeNo'],
      outRefundNo: outRefundNo,
      reason: propObj['reason'],
      notifyUrl: propObj['notifyUrl'],
      amount: {
        refund: propObj['refund'],
        total: propObj['total'],
        currency: 'CNY'
      }
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.refund',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['refund_id']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  queryRefund: function queryRefund(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      outRefundNo: propObj['outRefundNo']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.queryRefund',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['refund_id']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  transfer: function transfer(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    //-----微信公众号:wechat,小程序：applet
    var wechatConfig
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else {
      wechatConfig = _getWorkConfig('wechat')
    }
    var appid = wechatConfig && wechatConfig['appId']
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']

    var totalAmount, totalNum
    var transferDetailList = []
    if (propObj['listType'] === 'multiple') {
      totalAmount = propObj['totalAmount']
      totalNum = propObj['totalNum']
      if (Array.isArray(propObj['transferDetailList'])) {
        propObj['transferDetailList'].forEach(function(obj, index) {
          var outDetailNo =
            obj['out_detail_no'] ||
            new Date().getTime() +
              Math.random()
                .toString(16)
                .slice(2)
          transferDetailList.push({
            transferAmount: obj['transfer_amount'],
            transferRemark: obj['transfer_remark'],
            outDetailNo: outDetailNo,
            openid: obj['openid'],
            userName: obj['user_name']
          })
        })
      } else {
        cb &&
          cb('fail', {
            status: -1,
            result: { detail: 'transferDetailList must supply array' }
          })
        return
      }
    } else {
      totalAmount = propObj['transfer_amount']
      totalNum = 1
      var outDetailNo =
        propObj['out_detail_no'] ||
        new Date().getTime() +
          Math.random()
            .toString(16)
            .slice(2)
      transferDetailList = [
        {
          transferAmount: propObj['transfer_amount'],
          transferRemark: propObj['transfer_remark'],
          outDetailNo: outDetailNo,
          openid: propObj['openid'],
          userName: propObj['user_name']
        }
      ]
    }
    var outBatchNo =
      propObj['outBatchNo'] ||
      new Date().getTime() +
        Math.random()
          .toString(16)
          .slice(2)

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      appid: appid,
      batchName: propObj['batchName'],
      batchRemark: propObj['batchRemark'],
      outBatchNo: outBatchNo,
      totalAmount: totalAmount,
      totalNum: totalNum,
      transferDetailList: transferDetailList
    }
    var resp = extGo({
      fn: 'wx.wxpay.transfer',
      param: req
    })
    if (
      resp &&
      resp.status === 0 &&
      resp.result &&
      resp.result['out_batch_no']
    ) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  queryTransfer: function queryTransfer(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    //-----微信公众号:wechat,小程序：applet
    var wechatConfig
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else {
      wechatConfig = _getWorkConfig('wechat')
    }
    var appid = wechatConfig && wechatConfig['appId']
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      batchId: propObj['batchId'],
      needQueryDetail: propObj['needQueryDetail'],
      offset: propObj['offset'],
      limit: propObj['limit'],
      detailStatus: propObj['detailStatus']
    }

    var resp = extGo({
      fn: 'wx.wxpay.queryTransfer',
      param: req
    })
    if (
      resp &&
      resp.status === 0 &&
      resp.result &&
      resp.result['transfer_batch']
    ) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  createProfitShareOrder: function createProfitShareOrder(
    _sys,
    node,
    id,
    propObj,
    cb
  ) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    //-----微信公众号:wechat,小程序：applet
    var wechatConfig
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else {
      wechatConfig = _getWorkConfig('wechat')
    }
    var appid = wechatConfig && wechatConfig['appId']
    var outOrderNo =
      propObj['outOrderNo'] ||
      new Date().getTime() +
        Math.random()
          .toString(16)
          .slice(2)
    var receivers = []
    if (propObj['listType'] === 'multiple') {
      if (Array.isArray(propObj['receivers'])) {
        propObj['receivers'].forEach(function(obj) {
          receivers.push(obj)
        })
      } else {
        cb &&
          cb('fail', {
            status: -1,
            result: { detail: 'receivers must supply array' }
          })
        return
      }
    } else {
      receivers.push({
        type: propObj['accountType'],
        account: propObj['account'],
        name: propObj['name'],
        amount: parseInt(propObj['amount']),
        description: propObj['description']
      })
    }
    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      appid: appid,
      transactionId: propObj['transactionId'],
      outOrderNo: outOrderNo,
      unfreezeUnsplit: !!propObj['unfreezeUnsplit'],
      receivers: receivers
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId']
    }
    var resp = extGo({
      fn: 'wx.wxpay.createProfitShareOrder',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['receivers']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  queryProfitShareOrder: function queryProfitShareOrder(
    _sys,
    node,
    id,
    propObj,
    cb
  ) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      transactionId: propObj['transactionId'],
      outOrderNo: propObj['outOrderNo']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }
    var resp = extGo({
      fn: 'wx.wxpay.queryProfitShareOrder',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['receivers']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  createReturnOrder: function createReturnOrder(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var outReturnNo =
      propObj['outReturnNo'] ||
      new Date().getTime() +
        Math.random()
          .toString(16)
          .slice(2)
    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      orderId: propObj['orderId'],
      outOrderNo: propObj['outOrderNo'],
      outReturnNo: outReturnNo,
      returnMchid: propObj['returnMchid'],
      amount: parseInt(propObj['amount']),
      description: propObj['description']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.createReturnOrder',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['return_id']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  queryReturnOrder: function queryReturnOrder(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      outReturnNo: propObj['outReturnNo'],
      outOrderNo: propObj['outOrderNo']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.queryReturnOrder',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['return_id']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  unfreezeOrder: function unfreezeOrder(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var outOrderNo =
      propObj['outReturnNo'] ||
      new Date().getTime() +
        Math.random()
          .toString(16)
          .slice(2)
    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      transactionId: propObj['transactionId'],
      outOrderNo: outOrderNo,
      description: propObj['description']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.unfreezeOrder',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['order_id']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  queryOrderAmount: function queryOrderAmount(_sys, node, id, propObj, cb) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      transactionId: propObj['transactionId']
    }

    var resp = extGo({
      fn: 'wx.wxpay.queryOrderAmount',
      param: req
    })
    if (
      resp &&
      resp.status === 0 &&
      resp.result &&
      resp.result['unsplit_amount']
    ) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  addProfitShareReceiver: function addProfitShareReceiver(
    _sys,
    node,
    id,
    propObj,
    cb
  ) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var wechatConfig
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else {
      wechatConfig = _getWorkConfig('wechat')
    }
    var appid = wechatConfig && wechatConfig['appId']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      appid: appid,
      type: propObj['accountType'],
      account: propObj['account'],
      name: propObj['name'],
      relationType: propObj['relationType'],
      customRelation: propObj['customRelation']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.addProfitShareReceiver',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['account']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  delProfitShareReceiver: function delProfitShareReceiver(
    _sys,
    node,
    id,
    propObj,
    cb
  ) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']
    var subMchId = merchantConfig && merchantConfig['subMchId']

    var wechatConfig
    if (propObj && propObj['type'] == 'applet') {
      wechatConfig = _getWorkConfig('applet')
    } else {
      wechatConfig = _getWorkConfig('wechat')
    }
    var appid = wechatConfig && wechatConfig['appId']

    var req = {
      credentials: {
        mchId: mchid,
        mchPrivateKey: mchPemKey,
        mchCertificate: mchPemCert,
        mchAPIv3Key: mchApIv3Key
      },
      appid: appid,
      type: propObj['accountType'],
      account: propObj['account']
    }
    if (propObj['mode'] === 'servicer') {
      req.subMchid = propObj['subMchId'] || subMchId
    }

    var resp = extGo({
      fn: 'wx.wxpay.delProfitShareReceiver',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['account']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  verifySignByPK: function verifySignByPK(_sys, node, id, propObj, cb) {
    var req = {
      timeStamp: propObj['timeStamp'],
      nonce: propObj['nonce'],
      signBody: propObj['signBody'],
      sign: propObj['sign'],
      pemCertContent: propObj['pemCertContent']
    }
    var resp = extGo({
      fn: 'wx.wxpay.verifySignByPK',
      param: req
    })
    if (resp && resp.status === 0 && resp.result === true) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  },
  downloadCertificates: function downloadCertificates(
    _sys,
    node,
    id,
    propObj,
    cb
  ) {
    var merchantConfig = _getWorkConfig('merchant')
    var mchid = merchantConfig && merchantConfig['mchId']
    var mchApIv3Key = merchantConfig && merchantConfig['mchSecretKey']
    var mchPemKey = merchantConfig && merchantConfig['mchPemKey']
    var mchPemCert = merchantConfig && merchantConfig['mchPemCert']

    var req = {
      mchId: mchid,
      mchPrivateKey: mchPemKey,
      mchCertificate: mchPemCert,
      mchAPIv3Key: mchApIv3Key
    }
    var resp = extGo({
      fn: 'wx.wxpay.downloadCertificates',
      param: req
    })
    if (resp && resp.status === 0 && resp.result && resp.result['data']) {
      cb && cb('success', resp)
    } else {
      cb && cb('fail', resp)
    }
  }
  //wxpayV3 end
}

$funcs['data-hw-account'] = {
  getAccessToken: function(_sys, node, id, propObj, cb) {
    //======兼容=======
    var _cb
    var sign = ''
    _cb = cb
    var grant_type = propObj && propObj['grant_type']
    var client_id = propObj && propObj['client_id']
    var client_secret = propObj && propObj['client_secret']
    var redirect_uri = propObj && propObj['redirect_uri']
    var code = propObj && propObj['code']
    var refresh_token = propObj && propObj['refresh_token']

    //读取redis中缓存参数
    function getCache(key) {
      var result = cacheGet({ key: key })
      if (result.status !== 0 || result['result']['value'] === '') {
        return ''
      }
      return JSON.parse(result['result']['value'])
    }
    var dataObj = {
      grant_type: grant_type,
      client_id: client_id,
      client_secret: client_secret,
      redirect_uri: redirect_uri,
      code: code
    }
    if (grant_type === 'refresh_token ') {
      dataObj['refresh_token'] = refresh_token
    }
    var newBody = ''
    for (var i in dataObj) {
      newBody = newBody + '&' + i + '=' + encodeURIComponent(dataObj[i])
    }
    var body = newBody.slice(1)
    var req = {
      url: 'https://oauth-login.cloud.huawei.com/oauth2/v3/token',
      method: 'POST',
      type: 'FORM',
      header: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: body
    }
    var result = serverApi(req)
    if (result && result.status === 0) {
      if (!result.result.errcode) {
        _cb && _cb('success', result.result)
      } else {
        _cb && _cb('failed', result.result)
      }
    } else {
      _cb && _cb('failed', { detail: 'api error' })
    }
  },
  getTokenInfo: function(_sys, node, id, propObj, cb) {
    //======兼容=======
    var _cb
    var sign = ''
    _cb = cb
    var access_token = propObj && propObj['access_token']
    var open_id = 'OPENID'

    //读取redis中缓存参数
    function getCache(key) {
      var result = cacheGet({ key: key })
      if (result.status !== 0 || result['result']['value'] === '') {
        return ''
      }
      return JSON.parse(result['result']['value'])
    }
    var dataObj = {
      access_token: access_token,
      open_id: open_id
    }
    var newBody = ''
    for (var i in dataObj) {
      newBody = newBody + '&' + i + '=' + encodeURIComponent(dataObj[i])
    }
    var body = newBody.slice(1)
    var req = {
      url:
        'https://oauth-api.cloud.huawei.com/rest.php?nsp_fmt=JSON&nsp_svc=huawei.oauth2.user.getTokenInfo',
      method: 'POST',
      type: 'FORM',
      header: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: body
    }
    var result = serverApi(req)
    if (result && result.status === 0) {
      if (!result.result.errcode) {
        _cb && _cb('success', result.result)
      } else {
        _cb && _cb('failed', result.result)
      }
    } else {
      _cb && _cb('failed', { detail: 'api error' })
    }
  },
  getUserInfo: function(_sys, node, id, propObj, cb) {
    //======兼容=======
    var _cb
    var sign = ''
    _cb = cb
    var access_token = propObj && propObj['access_token']
    var getNickName = propObj && propObj['getNickName']

    //读取redis中缓存参数
    function getCache(key) {
      var result = cacheGet({ key: key })
      if (result.status !== 0 || result['result']['value'] === '') {
        return ''
      }
      return JSON.parse(result['result']['value'])
    }
    var dataObj = {
      access_token: access_token,
      getNickName: getNickName
    }
    var newBody = ''
    for (var i in dataObj) {
      newBody = newBody + '&' + i + '=' + encodeURIComponent(dataObj[i])
    }
    var body = newBody.slice(1)
    var req = {
      url:
        'https://account.cloud.huawei.com/rest.php?nsp_svc=GOpen.User.getInfo',
      method: 'POST',
      type: 'FORM',
      header: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: body
    }
    var result = serverApi(req)
    if (result && result.status === 0) {
      if (!result.result.errcode) {
        _cb && _cb('success', result.result)
      } else {
        _cb && _cb('failed', result.result)
      }
    } else {
      _cb && _cb('failed', { detail: 'api error' })
    }
  }
}

$funcs['data-alipay'] = {
  createPayURL: function(_sys, node, id, paramObj, cb) {
    var alipayConfig = _getWorkConfig('alipayApp')
    var app_id = alipayConfig && alipayConfig['appId']
    var privateKey = alipayConfig && alipayConfig['privateKey']

    var pubObj = {
      app_id: app_id,
      method: 'alipay.trade.wap.pay',
      return_url: paramObj && paramObj['return_url'],
      charset: 'utf-8',
      sign_type: 'RSA2',
      timestamp: getTime(),
      version: '1.0',
      notify_url: paramObj && paramObj['notify_url'],
      biz_content: {
        subject: paramObj && paramObj['subject'], //订单标题
        body: paramObj && paramObj['body'],
        out_trade_no: createTradeNo(),
        total_amount: parseFloat(paramObj && paramObj['total_amount']),
        quit_url: paramObj && paramObj['quit_url'],
        product_code: 'QUICK_WAP_PAY'
      }
    }
    var serializeData = getSerializeData(pubObj)
    var sign = ''
    var result = signWithRSA({
      type: 'RSA2',
      data: serializeData,
      privateKey: privateKey
    })
    if (result && result.status == 0) {
      sign = result.result.sign
    }

    var reqParam = getReqParam(pubObj, sign)
    cb &&
      cb('success', {
        payURL: 'https://openapi.alipay.com/gateway.do?' + reqParam,
        out_trade_no: pubObj['biz_content']['out_trade_no']
      })

    //生成请求时间 eg: 2021-07-05 10:20:54
    function getTime() {
      var date = new Date()
      date.setHours(date.getHours() - date.getTimezoneOffset() / 60)
      return date
        .toISOString()
        .replace(/\..*/g, '')
        .replace(/T/, ' ')
    }
    //生成商户订单号
    function createTradeNo() {
      //生成随机字符串
      function randomString(len) {
        len = len || 64
        var chars =
          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
        var _len = chars.length
        var res = ''
        for (var i = 0; i < len; i++) {
          res += chars.charAt(Math.floor(Math.random() * _len))
        }
        return res
      }
      //生成时间字符串  eg: 20210705094549323
      function getTime() {
        var date = new Date()
        date.setHours(date.getHours() - date.getTimezoneOffset() / 60)
        return date.toISOString().replace(/[-T:.Z]/g, '')
      }
      return getTime() + randomString(47)
    }

    //生成待签名字符串
    function getSerializeData(data) {
      //----------passback_params公用回传参数。如果请求时传递了该参数，支付宝会在异步通知时将该参数原样返回。本参数必须进行UrlEncode之后才可以发送给支付宝。----------------
      //------注意：需剔除所有值为空的参数
      Object.keys(data).forEach(function(key) {
        if (!data[key]) {
          //剔除所有空值属性
          delete data[key]
        } else if (key == "'biz_content'") {
          Object.keys(data[key]).forEach(function(bizKey) {
            if (!data[key][bizKey]) {
              delete data[key][bizKey]
            } else if (bizKey == 'passback_params') {
              if (typeof data[key][bizKey] !== 'string') {
                data[key][bizKey] = JSON.stringify(data[key][bizKey])
              }
              data[key][bizKey] = encodeURIComponent(data[key][bizKey])
            }
          })
        }
      })

      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            //将所有非字符串类型值转为字符串
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + paramData
        })
        .join('&')

      return signStr
    }
    //生成请求参数
    function getReqParam(data, sign) {
      // 添加sign
      if (sign) {
        data.sign = sign
      }
      var signStr = Object.keys(data)
        .sort()
        .map(function(key) {
          var paramData = data[key]
          if (typeof paramData !== 'string') {
            paramData = JSON.stringify(paramData)
          }
          return key + '=' + encodeURIComponent(paramData) //由于参数中可能存在网址，所以需要进行UrlEncode编码
        })
        .join('&')

      return signStr
    }
  },
  CheckAsyncNotice: function(_sys, node, id, data, cb) {
    var alipayConfig = _getWorkConfig('alipayApp')
    var publicKey = alipayConfig && alipayConfig['publicKey']
    var res = getSignStr(data)
    var params = {
      type: 'RSA2',
      sign: res['sign'],
      data: res['signStr'],
      publicKey: publicKey
    }
    var result = verifySignWithRSA(params)
    if (result && result.status == 0) {
      cb && cb('success', { isSuccess: true })
    } else {
      cb && cb('fail', { isSuccess: false })
    }

    function getSignStr(data) {
      // 主要用于验证参数
      var ignoreParams = [
        '_eid',
        '_sid',
        '_gid',
        '_nid',
        '_uid',
        '_client',
        '_locOffset',
        '_urlQuery',
        'sign_type'
      ]

      var sign = ''
      var signStr = ''

      // 筛选
      if (data && Object.keys(data).length > 0) {
        var resultParams = {}
        Object.keys(data).forEach(function(key) {
          if (ignoreParams.indexOf(key) < 0) {
            if (key === 'sign') {
              sign = data[key]
            } else {
              resultParams[key] = data[key]
            }
          }
        })
        signStr = Object.keys(resultParams)
          .sort()
          .map(function(key) {
            var parmData = resultParams[key]
            if (Array.prototype.toString.call(parmData) !== '[object String]') {
              parmData = JSON.stringify(parmData)
            }
            return key + '=' + parmData
          })
          .join('&')
      }
      return { signStr: signStr, sign: sign }
    }
  }
}

$funcs['data-azure-AI'] = {
  translateText: function(_sys, node, id, data, to, from, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/translate',
        data: textData,
        from: from,
        to: to
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  detectLanguageWhenTranslate: function(_sys, node, id, data, to, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/translate',
        data: textData,
        to: to
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  detectLanguage: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/detect',
        data: textData
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  transliterationWhenTranslate: function(
    _sys,
    node,
    id,
    data,
    to,
    toScript,
    cb
  ) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/translate',
        data: textData,
        to: to,
        toScript: toScript
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  transliteration: function(
    _sys,
    node,
    id,
    data,
    language,
    fromScript,
    toScript,
    cb
  ) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/transliterate',
        data: textData,
        language: language,
        fromScript: fromScript,
        toScript: toScript
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  getSenLengthWhenTranslate: function(_sys, node, id, data, to, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/translate',
        data: textData,
        to: to,
        includeSentenceLength: true
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  getSenLength: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/breaksentence',
        data: textData
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  dictionaryTranslate: function(_sys, node, id, data, to, from, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var textData = []
    data.map(item => {
      var obj = {}
      obj['text'] = item
      textData.push(obj)
    })
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/dictionary/lookup',
        data: textData,
        from: from,
        to: to
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  dictionaryExamples: function(_sys, node, id, data, to, from, cb) {
    var config = _getWorkConfig('azure')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var result = extGo({
      fn: 'azure.translator.Translator',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        url: '/dictionary/examples',
        data: data,
        from: from,
        to: to
      }
    })
    var resultData = (result && result.result) || {}
    var errObj = {}
    if (result.status === 0) {
      if (typeof resultData === 'object') {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: JSON.parse(resultData)
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  analyzeSentiment: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location

    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'analyzeSentiment',
        data: data,
        extra: { includeOpinionMining: true }
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  emotionAnalysis: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location

    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'analyzeSentiment',
        data: data
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  detectLanguage_analytics: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location

    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'detectLanguage',
        data: data
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  recognizeEntities: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location

    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'recognizeEntities',
        data: data
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  recognizePiiEntities: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location

    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'recognizePiiEntities',
        data: data
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  recognizeLinkedEntities: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location
    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'recognizeLinkedEntities',
        data: data
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  },

  extraceKeyPhrases: function(_sys, node, id, data, cb) {
    var config = _getWorkConfig('textAnalytics')

    var subscriptionKey = config.subscriptionKey
    var endpoint = config.endpoint
    var location = config.location

    var result = extGo({
      fn: 'azure.textanalytics.TextAnalytics',
      param: {
        tc: {
          subscriptionKey: subscriptionKey,
          endpoint: endpoint,
          location: location
        },
        type: 'extractKeyPhrases',
        data: data
      }
    })
    var resultData = (result && result.result && result.result.documents) || {}
    var errObj = {}
    if (result.status === 0) {
      if (!Array.isArray(resultData)) {
        resultData['type'] = '接口失败'
        cb &&
          cb('fail', {
            isSuccess: '否',
            errMsg: resultData
          })
      } else {
        cb &&
          cb('success', {
            isSuccess: '是',
            data: resultData
          })
      }
    } else {
      errObj['type'] = '中台失败'
      errObj['result'] = resultData
      errObj['status'] = result.status
      cb &&
        cb('fail', {
          isSuccess: '否',
          errMsg: errObj
        })
    }
  }
}

$funcs['data-transcoding'] = {
  xmlToJson: function(_sys, node, id, paramObj, cb) {
    var data = paramObj.data
    var result = xml2json(data)
    if (result.status === 0) {
      cb && cb('success', { result: result.result, isSuccess: true })
    } else {
      cb &&
        cb('fail', {
          isSuccess: false,
          errMsg: result.result.detail
        })
    }
  },
  jsonToXml: function(_sys, node, id, paramObj, cb) {
    var data = paramObj.data
    var result = json2xml(data)
    if (result.status === 0) {
      cb && cb('success', { result: result.result, isSuccess: true })
    } else {
      cb &&
        cb('fail', {
          isSuccess: false,
          errMsg: result.result.detail
        })
    }
  }
}

$funcs['data-jsSDK'] = {
  useCustomSDK: function(_sys, node, id, paramObj, cb) {
    var SDKInfo = _sys.get(node, id, 'jsSDKInfo')
    var uid = param._eid ? 'e' + param._eid : 'u' + param._uid
    var result = extFn({
      ns: uid + ':' + SDKInfo.seq + ':' + SDKInfo.lang,
      fn: paramObj.fn,
      param: paramObj.param
    })
    if (result.status === 0) {
      cb &
        cb('success', {
          data: result.result
        })
    } else {
      cb &
        cb('fail', {
          errMsg: result.result
        })
    }
  }
}

$funcs['data-javaSDK'] = {
  useCustomSDK: function(_sys, node, id, paramObj, cb) {
    var SDKInfo = _sys.get(node, id, 'javaSDKInfo')
    var uid = param._eid ? 'e' + param._eid : 'u' + param._uid
    var result = extFn({
      ns: uid + ':' + SDKInfo.seq + ':' + SDKInfo.lang,
      fn: paramObj.fn,
      param: paramObj.param
    })
    if (result.status === 0) {
      cb &
        cb('success', {
          data: result.result
        })
    } else {
      cb &
        cb('fail', {
          errMsg: result.result
        })
    }
  }
}

$funcs['data-pythonSDK'] = {
  useCustomSDK: function(_sys, node, id, paramObj, cb) {
    var SDKInfo = _sys.get(node, id, 'pythonSDKInfo')
    var uid = param._eid ? 'e' + param._eid : 'u' + param._uid
    var result = extFn({
      ns: uid + ':' + SDKInfo.seq + ':' + SDKInfo.lang,
      fn: paramObj.fn,
      param: paramObj.param
    })
    if (result.status === 0) {
      cb &
        cb('success', {
          data: result.result
        })
    } else {
      cb &
        cb('fail', {
          errMsg: result.result
        })
    }
  }
}

$funcs['data-jpush'] = {
  postMsg: function(_sys, node, id, propObj, cb) {
    var config = _getWorkConfig('jpush')
    var appKey = config && config['appKey']
    var masterSecret = config && config['masterSecret']
    var body = {
      platform: (propObj && propObj['platform']) || 'all',
      audience: (propObj && propObj['audience']) || 'all',
      notification: propObj && propObj['notification']
    }
    var res_base64 = dealBase64(appKey + ':' + masterSecret, true)

    var req = {
      url: 'https://api.jpush.cn/v3/push',
      method: 'POST',
      type: 'JSON',
      header: { Authorization: 'Basic ' + res_base64.result },
      body: body
    }

    var result = serverApi(req)

    //
    //返回结果
    if (cb && result) {
      var tempRes = result.result //请求api返回的结果
      var res = {
        result: tempRes
      }
      if (result.status === 0) {
        if (tempRes) {
          res = {
            result: tempRes,
            msgId: tempRes.msg_id,
            isSuccess: !tempRes.error,
            errorCode: tempRes.error && tempRes.error.code,
            errorMsg: tempRes.error && tempRes.error.message
          }
        } else {
          res['isSucess'] = false
        }

        if (res['isSuccess']) {
          cb('success', res)
        } else {
          cb('fail', res)
        }
      } else {
        //通信上出现失败
        res['isSuccess'] = false
        if (result.result) {
          cb('fail', res)
        } else {
          cb('fail', { detail: 'error' })
        }
      }
    }

    //-----base64处理-------
    function dealBase64(data, isEncode) {
      var base = new Base64()
      var result = {}
      if (isEncode) {
        result.result = base.encode(data)
      } else {
        result.result = base.decode(data)
      }

      return result

      function Base64() {
        // private property
        var _keyStr =
          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='

        // public method for encoding
        this.encode = function(input) {
          var output = ''
          var chr1, chr2, chr3, enc1, enc2, enc3, enc4
          var i = 0
          input = _utf8_encode(input)
          while (i < input.length) {
            chr1 = input.charCodeAt(i++)
            chr2 = input.charCodeAt(i++)
            chr3 = input.charCodeAt(i++)
            enc1 = chr1 >> 2
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4)
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6)
            enc4 = chr3 & 63
            if (isNaN(chr2)) {
              enc3 = enc4 = 64
            } else if (isNaN(chr3)) {
              enc4 = 64
            }
            output =
              output +
              _keyStr.charAt(enc1) +
              _keyStr.charAt(enc2) +
              _keyStr.charAt(enc3) +
              _keyStr.charAt(enc4)
          }
          return output
        }

        // public method for decoding
        this.decode = function(input) {
          var output = ''
          var chr1, chr2, chr3
          var enc1, enc2, enc3, enc4
          var i = 0
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '')
          while (i < input.length) {
            enc1 = _keyStr.indexOf(input.charAt(i++))
            enc2 = _keyStr.indexOf(input.charAt(i++))
            enc3 = _keyStr.indexOf(input.charAt(i++))
            enc4 = _keyStr.indexOf(input.charAt(i++))
            chr1 = (enc1 << 2) | (enc2 >> 4)
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)
            chr3 = ((enc3 & 3) << 6) | enc4
            output = output + String.fromCharCode(chr1)
            if (enc3 != 64) {
              output = output + String.fromCharCode(chr2)
            }
            if (enc4 != 64) {
              output = output + String.fromCharCode(chr3)
            }
          }
          output = _utf8_decode(output)
          return output
        }

        // private method for UTF-8 encoding
        var _utf8_encode = function(string) {
          string = string.replace(/\r\n/g, '\n')
          var utftext = ''
          for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n)
            if (c < 128) {
              utftext += String.fromCharCode(c)
            } else if (c > 127 && c < 2048) {
              utftext += String.fromCharCode((c >> 6) | 192)
              utftext += String.fromCharCode((c & 63) | 128)
            } else {
              utftext += String.fromCharCode((c >> 12) | 224)
              utftext += String.fromCharCode(((c >> 6) & 63) | 128)
              utftext += String.fromCharCode((c & 63) | 128)
            }
          }
          return utftext
        }

        // private method for UTF-8 decoding
        var _utf8_decode = function(utftext) {
          var string = ''
          var i = 0
          var c = (c1 = c2 = 0)
          while (i < utftext.length) {
            c = utftext.charCodeAt(i)
            if (c < 128) {
              string += String.fromCharCode(c)
              i++
            } else if (c > 191 && c < 224) {
              c2 = utftext.charCodeAt(i + 1)
              string += String.fromCharCode(((c & 31) << 6) | (c2 & 63))
              i += 2
            } else {
              c2 = utftext.charCodeAt(i + 1)
              c3 = utftext.charCodeAt(i + 2)
              string += String.fromCharCode(
                ((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)
              )
              i += 3
            }
          }
          return string
        }
      }
    }
  },
  revokeMsg: function(_sys, node, id, propObj, cb) {
    var msgId = String(propObj && propObj['msgId'])

    var config = _getWorkConfig('jpush')
    var appKey = config && config['appKey']
    var masterSecret = config && config['masterSecret']

    var res_base64 = dealBase64(appKey + ':' + masterSecret, true)
    var req = {
      url: 'https://api.jpush.cn/v3/push/' + msgId,
      method: 'DELETE',
      type: 'JSON',
      header: { Authorization: 'Basic ' + res_base64.result }
    }

    var result = serverApi(req)

    //---
    //返回结果

    var res = {}

    if (msgId) {
      if (cb && result) {
        var tempRes = result.result
        res['result'] = tempRes
        if (result.status === 0) {
          if (tempRes) {
            res = {
              result: tempRes,
              msgId: tempRes.msg_id,
              isSuccess: !tempRes.error,
              errorCode: tempRes.error && tempRes.error.code,
              errorMsg: tempRes.error && tempRes.error.message
            }
          } else {
            res['isSuccess'] = false
          }
          if (res['isSuccess']) {
            cb('success', res)
          } else {
            cb('fail', res)
          }
        } else {
          //通信失败
          res['isSuccess'] = false
          res['detail'] = 'api通信error'
          cb('fail', res)
        }
      }
    } else {
      res = {
        result: {},
        isSuccess: false,
        errorCode: 502,
        errorMsg: '无消息参数'
      }
      cb && cb('fail', res)
    }

    //-----base64处理-------
    function dealBase64(data, isEncode) {
      var base = new Base64()
      var result = {}
      if (isEncode) {
        result.result = base.encode(data)
      } else {
        result.result = base.decode(data)
      }

      return result

      function Base64() {
        // private property
        var _keyStr =
          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='

        // public method for encoding
        this.encode = function(input) {
          var output = ''
          var chr1, chr2, chr3, enc1, enc2, enc3, enc4
          var i = 0
          input = _utf8_encode(input)
          while (i < input.length) {
            chr1 = input.charCodeAt(i++)
            chr2 = input.charCodeAt(i++)
            chr3 = input.charCodeAt(i++)
            enc1 = chr1 >> 2
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4)
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6)
            enc4 = chr3 & 63
            if (isNaN(chr2)) {
              enc3 = enc4 = 64
            } else if (isNaN(chr3)) {
              enc4 = 64
            }
            output =
              output +
              _keyStr.charAt(enc1) +
              _keyStr.charAt(enc2) +
              _keyStr.charAt(enc3) +
              _keyStr.charAt(enc4)
          }
          return output
        }

        // public method for decoding
        this.decode = function(input) {
          var output = ''
          var chr1, chr2, chr3
          var enc1, enc2, enc3, enc4
          var i = 0
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '')
          while (i < input.length) {
            enc1 = _keyStr.indexOf(input.charAt(i++))
            enc2 = _keyStr.indexOf(input.charAt(i++))
            enc3 = _keyStr.indexOf(input.charAt(i++))
            enc4 = _keyStr.indexOf(input.charAt(i++))
            chr1 = (enc1 << 2) | (enc2 >> 4)
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)
            chr3 = ((enc3 & 3) << 6) | enc4
            output = output + String.fromCharCode(chr1)
            if (enc3 != 64) {
              output = output + String.fromCharCode(chr2)
            }
            if (enc4 != 64) {
              output = output + String.fromCharCode(chr3)
            }
          }
          output = _utf8_decode(output)
          return output
        }

        // private method for UTF-8 encoding
        var _utf8_encode = function(string) {
          string = string.replace(/\r\n/g, '\n')
          var utftext = ''
          for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n)
            if (c < 128) {
              utftext += String.fromCharCode(c)
            } else if (c > 127 && c < 2048) {
              utftext += String.fromCharCode((c >> 6) | 192)
              utftext += String.fromCharCode((c & 63) | 128)
            } else {
              utftext += String.fromCharCode((c >> 12) | 224)
              utftext += String.fromCharCode(((c >> 6) & 63) | 128)
              utftext += String.fromCharCode((c & 63) | 128)
            }
          }
          return utftext
        }

        // private method for UTF-8 decoding
        var _utf8_decode = function(utftext) {
          var string = ''
          var i = 0
          var c = (c1 = c2 = 0)
          while (i < utftext.length) {
            c = utftext.charCodeAt(i)
            if (c < 128) {
              string += String.fromCharCode(c)
              i++
            } else if (c > 191 && c < 224) {
              c2 = utftext.charCodeAt(i + 1)
              string += String.fromCharCode(((c & 31) << 6) | (c2 & 63))
              i += 2
            } else {
              c2 = utftext.charCodeAt(i + 1)
              c3 = utftext.charCodeAt(i + 2)
              string += String.fromCharCode(
                ((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)
              )
              i += 3
            }
          }
          return string
        }
      }
    }
  }
}

$funcs['data-server-dingding'] = {
  getAccessToken: function(_sys, node, id, cb) {
    var ddConfig = _getWorkConfig('h5microApp')
    var req = {
      url: 'https://api.dingtalk.com/v1.0/oauth2/accessToken',
      method: 'POST',
      type: 'JSON',
      body: {
        appKey: ddConfig && ddConfig['appId'],
        appSecret: ddConfig && ddConfig['appSecret']
      }
    }
    var result = serverApi(req)
    if (result && result.status == 0) {
      if (result.result) {
        if (result.result.accessToken) {
          cb &&
            cb('success', {
              accessToken: result.result.accessToken,
              expireIn: result.result.expireIn
            })
        } else {
          cb && cb('fail', result.result)
        }
      } else {
        cb && cb('fail', { detail: 'error' })
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  },
  getUserAccessToken: function(_sys, node, id, propObj, cb) {
    var ddConfig = _getWorkConfig('h5microApp')

    var clientId = ddConfig && ddConfig['appId']
    var clientSecret = ddConfig && ddConfig['appSecret']

    var req = {
      url: 'https://api.dingtalk.com/v1.0/oauth2/userAccessToken',
      method: 'POST',
      type: 'JSON',
      body: {
        clientId: clientId,
        clientSecret: clientSecret,
        code: propObj && propObj['code'],
        refreshToken: propObj && propObj['refreshToken'],
        grantType: (propObj && propObj['type']) || 'authorization_code'
      }
    }
    var result = serverApi(req)
    if (result && result.status == 0) {
      if (result.result) {
        if (result.result.accessToken) {
          cb &&
            cb('success', {
              accessToken: result.result.accessToken,
              refreshToken: result.result.refreshToken,
              expireIn: result.result.expireIn
            })
        } else {
          cb && cb('fail', result.result)
        }
      } else {
        cb && cb('fail', { detail: 'error' })
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  },
  createQRcode: function(_sys, node, id, propObj, cb) {
    var redirect_uri = propObj && propObj['redirect_uri']
    var backgroundColor = propObj && propObj['backgroundColor']
    var style = 'border:none;'
    if (backgroundColor) {
      style += 'background-color:' + backgroundColor
    }
    var href = propObj && propObj['href']
    var ddConfig = _getWorkConfig('h5microApp')
    var appid = ddConfig && ddConfig['appId']
    if (!redirect_uri || !appid) {
      if (!redirect_uri) {
        cb && cb('fail', { detail: '缺少redirect_uri' })
        return
      }
      if (!appid) {
        cb && cb('fail', { detail: '缺少appid' })
        return
      }
    }
    var url = encodeURIComponent(redirect_uri)
    var goto =
      'https://oapi.dingtalk.com/connect/oauth2/sns_authorize?appid=' +
      appid +
      '&response_type=code&scope=snsapi_login&state=STATE&redirect_uri=' +
      url

    var src =
      'https://login.dingtalk.com/login/qrcode.htm?goto=' +
      encodeURIComponent(goto)
    src += style ? '&style=' + encodeURIComponent(style) : ''
    src += href ? '&href=' + href : ''
    cb && cb('success', { src: src, goto: goto })
  },
  getuserinfo_bycode: function(_sys, node, id, propObj, cb) {
    var ddConfig = _getWorkConfig('h5microApp')
    var appid = ddConfig && ddConfig['appId']
    var secret = ddConfig && ddConfig['appSecret']
    var tempCode = propObj && propObj['tempCode']
    if (!appid) {
      cb && cb('fail', { detail: '缺少appid' })
      return
    }
    if (!secret) {
      cb && cb('fail', { detail: '缺少secret' })
      return
    }
    if (!tempCode) {
      cb && cb('fail', { detail: '缺少tempCode' })
      return
    }
    var timestamp = new Date().getTime()
    var url =
      'https://oapi.dingtalk.com/sns/getuserinfo_bycode?accessKey=' +
      appid +
      '&timestamp=' +
      timestamp +
      '&signature=' +
      getSign(timestamp, secret)
    var req = {
      url: url,
      method: 'POST',
      type: 'JSON',
      body: {
        tmp_auth_code: tempCode
      }
    }
    var result = serverApi(req)
    if (
      result &&
      result.status == 0 &&
      result.result &&
      result.result.errcode == 0
    ) {
      var user_info = result.result.user_info
      cb &&
        cb('success', {
          nick: user_info.nick,
          unionid: user_info.unionid,
          openid: user_info.openid
        })
    } else {
      cb && cb('fail', { detail: result })
    }

    function getSign(data, secret) {
      var params = {
        algorithm: 'sha256',
        data: String(data),
        dataEncode: 'base64', //加密结果输出为base64
        dataDecode: 'raw', //原始编码
        key: secret,
        keyEncode: 'raw'
      }
      var result = encryptHMAC(params)
      //base64编码中存在+,故需要进行urlencode
      var str = result && result.result && result.result.data
      if (str) {
        str = encodeURIComponent(str)
      }
      return str
    }
  },
  getUseridByUnionid: function(_sys, node, id, propObj, cb) {
    var accessToken = propObj && propObj['access_token']
    var unionid = propObj && propObj['unionid']
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accesToken' })
      return
    }
    if (!unionid) {
      cb && cb('fail', { detail: '缺少unionid' })
      return
    }
    var url =
      'https://oapi.dingtalk.com/topapi/user/getbyunionid?access_token=' +
      accessToken
    var req = {
      url: url,
      method: 'POST',
      type: 'JSON',
      body: {
        unionid: unionid
      }
    }
    var result = serverApi(req)
    if (
      result &&
      result.status == 0 &&
      result.result &&
      result.result.errcode == 0
    ) {
      var res = result.result.result
      cb &&
        cb('success', { userid: res.userid, contact_type: res.contact_type })
    } else {
      cb && cb('fail', { detail: result })
    }
  },
  getUserInfo: function(_sys, node, id, propObj, cb) {
    var accessToken = propObj && propObj['access_token']
    var userid = propObj && propObj['userid']
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken' })
      return
    }
    if (!userid) {
      cb && cb('fail', { detail: '缺少userid' })
      return
    }
    var url =
      'https://oapi.dingtalk.com/topapi/v2/user/get?access_token=' + accessToken
    var req = {
      url: url,
      method: 'POST',
      type: 'JSON',
      body: {
        userid: userid
      }
    }
    var result = serverApi(req)
    if (
      result &&
      result.status == 0 &&
      result.result &&
      result.result.errcode == 0
    ) {
      cb && cb('success', { info: result.result.result })
    } else {
      cb && cb('fail', { detail: result })
    }
  }
}

$funcs['data-server-wecom'] = {
  getAccessToken: function(_sys, node, id, cb) {
    var wecom_access_token = getCache('wecom_access_token')
    if (wecom_access_token) {
      cb && cb('success', { accessToken: wecom_access_token })
    } else {
      var wecomConfig = _getWorkConfig('wecom')
      var corpid = (wecomConfig && wecomConfig.corpid) || ''
      var corpsecret = (wecomConfig && wecomConfig.secret) || ''
      var url =
        'https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=' +
        corpid +
        '&corpsecret=' +
        corpsecret
      var req = {
        url: url,
        method: 'GET',
        type: 'JSON' //请求中参数的类型
      }
      var result = serverApi(req)
      if (result) {
        if (result.status == 0 && result.result && result.result.access_token) {
          cb &&
            cb('success', {
              accessToken: result.result.access_token,
              expiresIn: result.result.expires_in
            })
          cacheSet({
            key: 'wecom_access_token',
            value: result.result.access_token,
            expire: 7200
          })
        } else {
          cb && cb('fail', result.result)
        }
      } else {
        cb && cb('fail', { detail: '请求失败' })
      }
    }
    //读取redis中缓存参数
    function getCache(key) {
      var result = cacheGet({ key: key })
      if (result.status !== 0) {
        return ''
      }
      return result['result']['value']
    }
  },
  getUserInfo: function(_sys, node, id, propObj, cb) {
    var access_token = propObj && propObj['accessToken']
    var code = propObj && propObj['code']
    var url =
      'https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=' +
      access_token +
      '&code=' +
      code
    var req = {
      url: url,
      method: 'GET',
      type: 'JSON' //请求中参数的类型
    }
    var result = serverApi(req)
    if (result) {
      if (result.status == 0 && result.result && result.result.errcode == 0) {
        cb &&
          cb('success', {
            userId: result.result.UserId, //企业成员时返回
            deviceId: result.result.DeviceId,
            openId: result.result.OpenId, // 非企业成员时返回
            external_userid: result.result.external_userid // 非企业成员时返回
          })
      } else {
        cb && cb('fail', result.result)
      }
    } else {
      cb && cb('fail', { detail: '请求失败' })
    }
  }
}

$funcs['data-appletInterfaceServer'] = {
  getUserinfo: function(_sys, node, id, propObj, cb) {
    var code = propObj['code']
    var wechatConfig = _getWorkConfig('wechat')
    var type = propObj.type
    var openid
    var access_token
    var url
    var req
    var result
    var result2
    switch (type) {
      case 'wechat':
        var appId = (wechatConfig && wechatConfig.appId) || ''
        var secret = (wechatConfig && wechatConfig.appSecret) || ''
        url =
          'https://api.weixin.qq.com/sns/oauth2/access_token?appid=' +
          appId +
          '&secret=' +
          secret +
          '&code=' +
          code +
          '&grant_type=authorization_code'
        req = {
          url: url,
          method: 'GET',
          type: 'JSON' //请求中参数的类型
        }
        result = serverApi(req)
        if (cb && result) {
          if (result.status === 0) {
            if (result.result) {
              openid = result.result.openid
              access_token = result.result.access_token
            }

            //拉取用户信息
            if (result.result && result.result.scope == 'snsapi_userinfo') {
              result2 = serverApi({
                url:
                  'https://api.weixin.qq.com/sns/userinfo?access_token=' +
                  access_token +
                  '&openid=' +
                  openid +
                  '&lang=zh_CN',
                method: 'GET',
                type: 'JSON'
              })
              if (result2 && result2.status == 0) {
                result2.result['access_token'] = access_token
                cb('success', result2.result)
              } else {
                cb('fail', { detail: 'error', msg: '拉取用户信息失败' })
              }
            } else {
              cb('success', { access_token: access_token, openid: openid })
            }
          } else {
            if (result.result) {
              if (result.result.code === 408) {
                cb('timeout', result.result)
              } else {
                cb('fail', result.result)
              }
            } else {
              cb('fail', { detail: 'error' })
            }
          }
        }
        break
      case 'douyin':
        var douyinConfig = _getWorkConfig('douyin')
        var client_key = (douyinConfig && douyinConfig.clientKey) || ''
        var client_secret = (douyinConfig && douyinConfig.clientSecret) || ''
        url =
          'https://open.douyin.com/' +
          'oauth/access_token?client_key=' +
          client_key +
          '&client_secret=' +
          client_secret +
          '&code=' +
          code +
          '&grant_type=authorization_code'

        req = {
          url: url,
          method: 'GET',
          type: 'JSON' //请求中参数的类型
        }
        result = serverApi(req)
        if (cb && result) {
          if (result.status === 0) {
            if (result.result) {
              openid = result.result.data.open_id
              access_token = result.result.data.access_token
            }

            //拉取用户信息
            if (result.result) {
              result2 = serverApi({
                url:
                  'https://open.douyin.com/oauth/userinfo/?access_token=' +
                  access_token +
                  '&open_id=' +
                  openid,
                method: 'GET',
                type: 'JSON'
              })
              if (result2 && result2.status == 0) {
                result2.result['access_token'] = access_token
                cb('success', result2.result)
              } else {
                cb('fail', { detail: 'error', msg: '拉取用户信息失败' })
              }
            } else {
              cb('success', { access_token: access_token, openid: openid })
            }
          } else {
            if (result.result) {
              if (result.result.code === 408) {
                cb('timeout', result.result)
              } else {
                cb('fail', result.result)
              }
            } else {
              cb('fail', { detail: 'error' })
            }
          }
        }
        break
      default:
        break
    }
  },
  createPayInfo: function(_sys, node, id, propObj, cb) {
    // 创建订单
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    // 创建订单
    var byteDanceConfig = _getWorkConfig('byteDance')

    function randomString(len) {
      var $chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'
      var maxPos = $chars.length
      var pwd = ''
      for (var i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    }

    function getTime() {
      function trans(digit) {
        if (digit < 10) {
          return '0' + digit
        }
        return '' + digit
      }
      function trans100(digit) {
        if (digit < 100 && digit >= 10) {
          return '0' + digit
        } else if (digit < 10) {
          return '00' + digit
        }
        return '' + digit
      }
      var date = new Date()
      var Y = date.getFullYear() + ''
      var M = trans(date.getMonth() + 1)
      var D = trans(date.getDate())
      var h = trans(date.getHours())
      var m = trans(date.getMinutes())
      var s = trans(date.getSeconds())
      var sss = trans100(date.getMilliseconds())
      return Y + M + D + h + m + s + sss // 17位
    }

    var out_order_no = getTime() + randomString(15)

    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/create_order',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_order_no: out_order_no,
        total_amount: propObj.total_amount,
        subject: propObj.subject,
        body: propObj.body,
        valid_time: propObj.valid_time
      }
    }

    //不能传空的值，会导致签名失败
    if (propObj.cp_extra) {
      req.body['cp_extra'] = propObj.cp_extra
    }

    if (propObj.notify_url) {
      req.body['notify_url'] = propObj.notify_url
    }

    if (propObj.store_uid) {
      req.body['store_uid'] = propObj.store_uid
    }

    if (propObj.disable_msg) {
      req.body['disable_msg'] = propObj.disable_msg
    }

    if (propObj.msg_page) {
      req.body['msg_page'] = propObj.msg_page
    }

    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)

    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          out_order_no: out_order_no,
          detail: result.result.data
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  orderquery: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }
    // 查询订单
    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/query_order',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_order_no: propObj.out_order_no
      }
    }

    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)

    var result = serverApi(req)

    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          order_id: result.result.order_id,
          errTips: result.result.err_tips,
          payment_info: result.result.payment_info
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  refund: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    function randomString(len) {
      var $chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'
      var maxPos = $chars.length
      var pwd = ''
      for (var i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    }

    function getTime() {
      function trans(digit) {
        if (digit < 10) {
          return '0' + digit
        }
        return '' + digit
      }
      function trans100(digit) {
        if (digit < 100 && digit >= 10) {
          return '0' + digit
        } else if (digit < 10) {
          return '00' + digit
        }
        return '' + digit
      }
      var date = new Date()
      var Y = date.getFullYear() + ''
      var M = trans(date.getMonth() + 1)
      var D = trans(date.getDate())
      var h = trans(date.getHours())
      var m = trans(date.getMinutes())
      var s = trans(date.getSeconds())
      var sss = trans100(date.getMilliseconds())
      return Y + M + D + h + m + s + sss // 17位
    }
    // 发起退款
    var byteDanceConfig = _getWorkConfig('byteDance')

    var out_refund_no = getTime() + randomString(19)
    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/create_refund',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_order_no: propObj.out_order_no,
        out_refund_no: out_refund_no,
        reason: propObj.reason,
        refund_amount: propObj.refund_amount
      }
    }
    //不能传空的值，会导致签名失败
    if (propObj.cp_extra) {
      req.body['cp_extra'] = propObj.cp_extra
    }

    if (propObj.notify_url) {
      req.body['notify_url'] = propObj.notify_url
    }

    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    if (propObj.disable_msg) {
      req.body['disable_msg'] = propObj.disable_msg
    }

    if (propObj.msg_page) {
      req.body['msg_page'] = propObj.msg_page
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)

    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          out_refund_no: out_refund_no,
          errTips: result.result.err_tips,
          refund_no: result.result.refund_no
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  queryRefund: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }
    //退款查询
    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/query_refund',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_refund_no: propObj.out_refund_no
      }
    }
    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)

    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          refundInfo: result.result.refundInfo
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  settle: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    function randomString(len) {
      var $chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'
      var maxPos = $chars.length
      var pwd = ''
      for (var i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    }

    function getTime() {
      function trans(digit) {
        if (digit < 10) {
          return '0' + digit
        }
        return '' + digit
      }
      function trans100(digit) {
        if (digit < 100 && digit >= 10) {
          return '0' + digit
        } else if (digit < 10) {
          return '00' + digit
        }
        return '' + digit
      }
      var date = new Date()
      var Y = date.getFullYear() + ''
      var M = trans(date.getMonth() + 1)
      var D = trans(date.getDate())
      var h = trans(date.getHours())
      var m = trans(date.getMinutes())
      var s = trans(date.getSeconds())
      var sss = trans100(date.getMilliseconds())
      return Y + M + D + h + m + s + sss // 17位
    }
    //结算及分账
    var byteDanceConfig = _getWorkConfig('byteDance')

    let out_settle_no = getTime() + randomString(18)

    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/settle',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_settle_no: out_settle_no,
        out_order_no: propObj.out_order_no,
        settle_desc: propObj.settle_desc
      }
    }

    if (propObj.settle_params) {
      req.body['settle_params'] = propObj.settle_params
    }
    if (propObj.cp_extra) {
      req.body['cp_extra'] = propObj.cp_extra
    }
    if (propObj.notify_url) {
      req.body['notify_url'] = propObj.notify_url
    }
    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          out_settle_no: out_settle_no,
          settle_no: result.result.settle_no
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  query_settle: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }
    //结算及分账结果查询
    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/query_settle',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_settle_no: propObj.out_settle_no
      }
    }

    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          settle_info: result.result.settle_info
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  bill: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }
    //获取对账单
    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url:
        'https://developer.toutiao.com/api/apps/bill?app_id=' +
        byteDanceConfig.appId +
        '&start_date=' +
        propObj.start_date +
        '&end_date=' +
        propObj.end_date +
        '&seller=' +
        propObj.seller +
        '&bill_type=' +
        propObj.bill_type,
      method: 'GET',
      type: 'JSON',
      header: {
        'Content-Type': 'application/json'
      }
    }
    let reqBody = {
      app_id: byteDanceConfig.appId,
      start_date: propObj.start_date,
      end_date: propObj.end_date,
      seller: propObj.seller,
      bill_type: propObj.bill_type
    }
    req.url = req.url + '&sign=' + getSign(reqBody, propObj.SALT)

    var result = serverApi(req)
    if (!result.result.err_no) {
      cb &&
        cb('success', {
          bill_info: result.result
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  create_return: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    function randomString(len) {
      var $chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'
      var maxPos = $chars.length
      var pwd = ''
      for (var i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    }

    function getTime() {
      function trans(digit) {
        if (digit < 10) {
          return '0' + digit
        }
        return '' + digit
      }
      function trans100(digit) {
        if (digit < 100 && digit >= 10) {
          return '0' + digit
        } else if (digit < 10) {
          return '00' + digit
        }
        return '' + digit
      }
      var date = new Date()
      var Y = date.getFullYear() + ''
      var M = trans(date.getMonth() + 1)
      var D = trans(date.getDate())
      var h = trans(date.getHours())
      var m = trans(date.getMinutes())
      var s = trans(date.getSeconds())
      var sss = trans100(date.getMilliseconds())
      return Y + M + D + h + m + s + sss // 17位
    }
    //退分账请求接口
    var byteDanceConfig = _getWorkConfig('byteDance')

    let out_return_no = getTime() + randomString(18)

    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/create_return',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        thirdparty_id: propObj.thirdparty_id,
        settle_no: propObj.settle_no,
        out_settle_no: propObj.out_settle_no,
        out_return_no: out_return_no,
        return_desc: propObj.return_desc,
        merchant_uid: propObj.merchant_uid,
        return_amount: propObj.return_amount
      }
    }

    if (propObj.cp_extra) {
      req.body['cp_extra'] = propObj.cp_extra
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          out_return_no: out_return_no,
          return_info: result.result.return_info
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  query_return: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }
    //查询分账回退结果
    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url: 'https://developer.toutiao.com/api/apps/ecpay/v1/query_return',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        app_id: byteDanceConfig.appId,
        out_settle_no: propObj.out_settle_no
      }
    }

    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          return_info: result.result.return_info
        })
    } else {
      cb &&
        cb('fail', {
          errTips: result.result.err_tips
        })
    }
  },
  query_merchant_balance: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url:
        'https://developer.toutiao.com/api/apps/ecpay/saas/query_merchant_balance',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        merchant_uid: propObj.merchant_uid,
        channel_type: propObj.channel_type
      }
    }

    if (byteDanceConfig.appId) {
      req.body['app_id'] = byteDanceConfig.appId
    }
    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }
    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          account_info: result.result.account_info,
          settle_info: result.result.settle_info
        })
    } else {
      cb &&
        cb('fail', {
          err_tips: result.result.err_tips
        })
    }
  },
  merchant_withdraw: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    function randomString(len) {
      var $chars =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'
      var maxPos = $chars.length
      var pwd = ''
      for (var i = 0; i < len; i++) {
        pwd += $chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    }

    function getTime() {
      function trans(digit) {
        if (digit < 10) {
          return '0' + digit
        }
        return '' + digit
      }
      function trans100(digit) {
        if (digit < 100 && digit >= 10) {
          return '0' + digit
        } else if (digit < 10) {
          return '00' + digit
        }
        return '' + digit
      }
      var date = new Date()
      var Y = date.getFullYear() + ''
      var M = trans(date.getMonth() + 1)
      var D = trans(date.getDate())
      var h = trans(date.getHours())
      var m = trans(date.getMinutes())
      var s = trans(date.getSeconds())
      var sss = trans100(date.getMilliseconds())
      return Y + M + D + h + m + s + sss // 17位
    }

    let out_order_id = getTime() + randomString(18)

    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url:
        'https://developer.toutiao.com/api/apps/ecpay/saas/merchant_withdraw',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        merchant_uid: propObj.merchant_uid,
        channel_type: propObj.channel_type,
        withdraw_amount: propObj.withdraw_amount,
        out_order_id
      }
    }

    if (byteDanceConfig.appId) {
      req.body.app_id = byteDanceConfig.appId
    }
    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }

    if (propObj.callback) {
      req.body['callback'] = propObj.callback
    }

    if (propObj.cp_extra) {
      req.body['cp_extra'] = propObj.cp_extra
    }

    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          out_order_id: out_order_id,
          order_id: result.result.order_id
        })
    } else {
      cb &&
        cb('fail', {
          err_tips: result.result.err_tips
        })
    }
  },
  query_withdraw_order: function(_sys, node, id, propObj, cb) {
    function getSign(params, salt) {
      var skip_arr = ['thirdparty_id', 'app_id', 'sign']
      var paramArray = new Array()
      for (var k in params) {
        if (skip_arr.indexOf(k) != -1) {
          continue
        }
        if (params[k] == '' || params[k] == undefined) {
          continue
        }
        paramArray.push(params[k])
      }
      paramArray.push(salt)
      paramArray.sort()
      var signStr = paramArray.join('&')
      return encryptHash({
        algorithm: 'md5',
        data: signStr,
        dataEncode: 'hex',
        dataDecode: 'raw'
      }).result.data
    }

    var byteDanceConfig = _getWorkConfig('byteDance')
    var req = {
      url:
        'https://developer.toutiao.com/api/apps/ecpay/saas/query_withdraw_order',
      method: 'POST',
      type: 'JSON',
      noHeader: true,
      raw: false,
      body: {
        merchant_uid: propObj.merchant_uid,
        channel_type: propObj.channel_type,
        out_order_id: propObj.out_order_id
      }
    }

    if (byteDanceConfig.appId) {
      req.body.app_id = byteDanceConfig.appId
    }
    if (propObj.thirdparty_id) {
      req.body['thirdparty_id'] = propObj.thirdparty_id
    }
    req.body['sign'] = getSign(req.body, propObj.SALT)
    var result = serverApi(req)
    if (result.result.err_no === 0) {
      cb &&
        cb('success', {
          status: result.result.status,
          status_msg: result.result.status_msg
        })
    } else {
      cb &&
        cb('fail', {
          err_tips: result.result.err_tips
        })
    }
  }
}

$funcs['data-paypal'] = {
  getAccessToken: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    if (!clientId || !clientSecret) {
      cb &&
        cb('fail', {
          detail: '缺少clientId或clientSecret'
        })
      return
    }
    //============启用redis缓存读取================
    if (props.cache) {
      var cacheRes = cacheGet({ key: clientId + '_paypalAccessToken' })
      if (cacheRes && cacheRes.result && cacheRes.result.value) {
        cb && cb('success', { accessToken: cacheRes.result.value })
        return
      }
    }
    var request = {
      fn: 'paypalapi.checkout.getAccessToken',
      param: {
        clientId: clientId,
        clientSecret: clientSecret,
        type: props.type
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.access_token) {
      var res = response.result
      //==========启用redis缓存存储===============
      if (props.cache) {
        var nonce = res.nonce
        var matchRes = nonce.match(/.*:(.*?)Z/)
        if (matchRes && matchRes[0]) {
          var createTime = new Date(matchRes[0]).getTime()
          var expire = Math.round(
            res.expires_in - 500 - (new Date().getTime() - createTime) / 1000
          )
          if (expire) {
            cacheSet({
              key: clientId + '_paypalAccessToken',
              value: res.access_token,
              expire: expire
            })
          }
        }
      }
      cb &&
        cb('success', {
          accessToken: res.access_token,
          expiresIn: res.expires_in,
          nonce: res.nonce
        })
    } else {
      cb && cb('fail', { deltail: response })
    }
  },
  createPayout: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret

    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.receiver) {
      cb && cb('fail', { detail: '缺少receiver参数' })
      return
    } else if (!props.amountValue) {
      cb && cb('fail', { detail: '缺少amountValue参数' })
      return
    }
    var body = {
      sender_batch_header: {
        //付款方处理标头
        email_subject: props.emailSubject, //付款完成后，发送的邮件的主题
        email_message: props.emailMessage //内容
      },
      items: [
        //支付项目
        {
          recipient_type: props.recipientType, //收件人类型，EMAIL，PHONE，PAYPAL_ID
          amount: {
            //支付给收款人的货币和金额
            value: String(props.amountValue),
            currency: props.amountCurrency
          },
          receiver: props.receiver //收款方
        }
      ]
    }
    var request = {
      fn: 'paypalapi.payouts.createPayout',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        body: body
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.batch_header) {
      var res = response.result
      cb &&
        cb('success', {
          payoutBatchId: res.batch_header && res.batch_header.payout_batch_id,
          result: response.result.result
        })
    } else {
      cb && cb('fail', { deltail: response })
    }
  },
  showPayoutBatch: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { deltail: '缺少accessToken参数' })
      return
    } else if (!props.payoutBatchId) {
      cb && cb('fail', { deltail: '缺少payoutBatchId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.payouts.showPayoutBatch',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        payout_batch_id: props.payoutBatchId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.batch_header) {
      var res = response.result
      var payoutItemsId = []
      if (res && Array.isArray(res.items)) {
        res.items.map(function(item) {
          payoutItemsId.push(item.payout_item_id)
        })
      }
      cb &&
        cb('success', {
          result: res,
          payoutItemsId: payoutItemsId
        })
    } else {
      cb && cb('fail', { deltail: response })
    }
  },
  showPayoutItem: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.payoutItemId) {
      cb && cb('fail', { detail: '缺少payoutItemId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.payouts.showPayoutItem',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        payout_item_id: props.payoutItemId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.payout_item) {
      var res = response.result
      cb && cb('success', { result: res, status: res.transaction_status })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  cancelPaypalItem: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.payoutItemId) {
      cb && cb('fail', { detail: '缺少payoutItemId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.payouts.cancelPaypalItemInput',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        payout_item_id: props.payoutItemId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.payout_item) {
      var res = response.result
      cb && cb('success', { result: res, status: res.transaction_status })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  createOrder: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.intent) {
      cb && cb('fail', { detail: '缺少intent参数' })
      return
    } else if (!props.amountValue || !props.amountCurrency) {
      cb && cb('fail', { detail: '缺少amountValue或amountCurrency参数' })
      return
    }
    var body = {
      intent: props.intent, //商家获取订单付款的意图，CAPTURE,AUTHORIZE
      application_context: {
        return_url: props.returnUrl,
        cancel_url: props.cancelUrl,
        brand_name: props.brandName,
        landing_page: props.landing_page,
        user_action: 'PAY_NOW',
        locale: props.locale
      },
      purchase_units: [
        {
          amount: {
            currency_code: props.amountCurrency,
            value: String(props.amountValue)
          }
        }
      ]
    }
    var request = {
      fn: 'paypalapi.checkout.createOrder',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        body: body
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      var approveUrl = ''
      if (res && Array.isArray(res.links)) {
        for (var i = 0; i < res.links.length; i++) {
          if (res.links[i].rel === 'approve') {
            approveUrl = res.links[i].href
            break
          }
        }
      }
      cb &&
        cb('success', {
          orderId: res.id,
          approveUrl: approveUrl,
          result: res
        })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  getOrder: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.orderId) {
      cb && cb('fail', { detail: '缺少orderId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.getOrder',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        orderId: props.orderId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      var authorizationsId = []
      var capturesId = []
      var refundsId = []
      if (res && Array.isArray(res.purchase_units)) {
        res.purchase_units.map(function(unit) {
          if (unit.payments) {
            if (Array.isArray(unit.payments.authorizations)) {
              unit.payments.authorizations.map(function(authorization) {
                authorizationsId.push(authorization.id)
              })
            }
            if (Array.isArray(unit.payments.captures)) {
              unit.payments.captures.map(function(capture) {
                capturesId.push(capture.id)
              })
            }
            if (Array.isArray(unit.payments.refunds)) {
              unit.payments.refunds.map(function(refund) {
                refundsId.push(refund.id)
              })
            }
          }
        })
      }
      cb &&
        cb('success', {
          result: response.result,
          authorizationsId: authorizationsId,
          capturesId: capturesId,
          refundsId: refundsId
        })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  captureOrder: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.orderId) {
      cb && cb('fail', { detail: '缺少orderId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.captureOrder',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        orderId: props.orderId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      var capturesId = []
      if (res && Array.isArray(res.purchase_units)) {
        res.purchase_units.map(function(unit) {
          if (unit.payments && Array.isArray(unit.payments.captures)) {
            unit.payments.captures.map(capture => {
              capturesId.push(capture.id)
            })
          }
        })
      }
      cb &&
        cb('success', {
          result: res,
          capturesId: capturesId,
          status: res.status
        })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  authorizeOrder: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.orderId) {
      cb && cb('fail', { detail: '缺少orderId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.authorizeOrder',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        orderId: props.orderId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      var authorizationsId = []
      if (res && Array.isArray(res.purchase_units)) {
        res.purchase_units.map(function(unit) {
          if (unit.payments && Array.isArray(unit.payments.authorizations)) {
            unit.payments.authorizations.map(authorization => {
              authorizationsId.push(authorization.id)
            })
          }
        })
      }
      cb && cb('success', { result: res, authorizationsId: authorizationsId })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  getAuthorization: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.authorizationId) {
      cb && cb('fail', { detail: '缺少authorizationId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.getAuthorization',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        authorizationId: props.authorizationId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      cb && cb('success', { result: res, status: res.status })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  captureAuthorization: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.authorizationId) {
      cb && cb('fail', { detail: '缺少authorizationId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.captureAuthorization',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        authorizationId: props.authorizationId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      cb && cb('success', { result: res, status: res.status })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  reauthorize: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.authorizationId) {
      cb && cb('fail', { detail: '缺少authorizationId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.reauthorize',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        authorizationId: props.authorizationId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      cb && cb('success', { result: res })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  voidAuthorization: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.authorizationId) {
      cb && cb('fail', { detail: '缺少authorizationId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.voidAuthorization',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        authorizationId: props.authorizationId
      }
    }
    var response = extGo(request)
    if (response && response.status === 0) {
      cb && cb('success', { success: true })
    } else {
      cb && cb('fail', { detail: response, success: false })
    }
  },
  getCaptures: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.captureId) {
      cb && cb('fail', { detail: '缺少captureId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.getCaptures',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        captureId: props.captureId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      cb && cb('success', { result: res, status: res.status })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  refund: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.captureId) {
      cb && cb('fail', { detail: '缺少captureId参数' })
      return
    }
    var body
    if (props.amountValue && props.amountCurrency) {
      body = {
        amount: {
          value: String(props.amountValue),
          currency_code: props.amountCurrency
        }
      }
    }
    var request = {
      fn: 'paypalapi.checkout.refund',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        captureId: props.captureId,
        body: body
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      cb && cb('success', { result: res, status: res.status })
    } else {
      cb && cb('fail', { detail: response })
    }
  },
  getRefund: function(_sys, node, id, props, cb) {
    var paypalConfig = _getWorkConfig('paypal')
    var clientId = paypalConfig && paypalConfig.clientId
    var clientSecret = paypalConfig && paypalConfig.clientSecret
    var accessToken = props && props.accessToken
    if (!accessToken) {
      cb && cb('fail', { detail: '缺少accessToken参数' })
      return
    } else if (!props.refundId) {
      cb && cb('fail', { detail: '缺少refundId参数' })
      return
    }
    var request = {
      fn: 'paypalapi.checkout.getRefund',
      param: {
        credentials: {
          clientId: clientId,
          clientSecret: clientSecret,
          accessToken: accessToken,
          type: props.type
        },
        refundId: props.refundId
      }
    }
    var response = extGo(request)
    if (response && response.result && response.result.id) {
      var res = response.result
      cb && cb('success', { result: res, status: res.status })
    } else {
      cb && cb('fail', { detail: response })
    }
  }
}

$funcs['data-accountSys'] = {
  genToken: function genToken(_sys, node, id, propObj, cb) {
    var userId = propObj.userId
    var userInfo = propObj.userInfo
    var roleList = propObj.roleList
    var singlePoint = propObj.singlePoint
    var validTime = propObj.validTime

    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}

    var dbId = accountSysConfig && accountSysConfig.dbId
    var jwtKey = accountSysConfig && accountSysConfig.jwtKey
    var cookieName = accountSysConfig && accountSysConfig.cookieName

    if (userId === undefined) {
      cb && cb('fail', { status: -1, result: { detail: '用户ID不能为空' } })
      return
    } else if (!(userInfo instanceof Object)) {
      cb &&
        cb('fail', { status: -1, result: { detail: '用户信息须为一个对象' } })
      return
    } else if (!(roleList instanceof Array)) {
      cb && cb('fail', { status: -1, result: { detail: '角色须为一个数组' } })
      return
    } else if (!jwtKey || !dbId || !cookieName) {
      cb &&
        cb('fail', {
          status: -1,
          result: { detail: 'jwtKey/dbId/cookieName不能为空' }
        })
      return
    }

    var timestampStr = _randomString(24)
    var token
    if (singlePoint) {
      token = timestampStr
    } else {
      //多点登录
      var cacheRet = cacheGet({ key: dbId + ':' + userId })
      if (cacheRet && cacheRet.status === 0) {
        try {
          var sessionData = JSON.parse(cacheRet.result.value)
          token = sessionData.token
        } catch (err) {}
      }

      token = token || timestampStr
    }

    var expire = (validTime || 72) * 3600

    userId = String(userId)
    //生成jwt
    var ret = signJwt({ data: { userId: userId, token: token }, key: jwtKey })
    if (ret.result && ret.result.token) {
      //缓存session数据
      var obj = {
        key: dbId + ':' + userId,
        value: JSON.stringify({
          userInfo: userInfo,
          roles: roleList,
          token: token
        }),
        expire: expire
      }
      var cacheRet = cacheSet(obj)
      if (cacheRet && cacheRet.status === 0) {
        var jwtStr = ret.result.token
        //设置cookie
        var cookie =
          cookieName + '=' + jwtStr + '; Path=/; HttpOnly; Max-Age=' + expire
        setHttpHeader({ 'Set-Cookie': cookie })
        // 返回policy
        var totalPolicyList = []
        var roleObj = accountSysConfig.roles || {}
        roleList.map(function(role) {
          var rolePolicies = roleObj[role] && roleObj[role]['policies']
          if (Array.isArray(rolePolicies)) {
            rolePolicies.map(function(policy) {
              if (totalPolicyList.indexOf(policy) < 0) {
                totalPolicyList.push(policy)
              }
            })
          }
        })
        var nid = param._nid
        var policiesCookie =
          'ih5_policies_' +
          nid +
          '=' +
          encodeURIComponent(JSON.stringify(totalPolicyList)) +
          '; Path=/; Max-Age=' +
          expire
        setHttpHeader({ 'Set-Cookie': policiesCookie })

        cb &&
          cb('success', {
            status: 0,
            result: { token: jwtStr, policies: totalPolicyList }
          })
      } else {
        cb && cb('fail', { status: -1, result: { detail: cacheRet } })
      }
    } else {
      cb && cb('fail', { status: -1, result: { detail: ret } })
    }
  },
  parseToken: function parseToken(_sys, node, id, propObj, cb) {
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}

    var dbId = accountSysConfig && accountSysConfig.dbId
    var jwtKey = accountSysConfig && accountSysConfig.jwtKey
    var cookieName = accountSysConfig && accountSysConfig.cookieName
    if (!jwtKey || !dbId || !cookieName) {
      cb &&
        cb('fail', {
          status: -1,
          result: { detail: 'jwtKey/dbId/cookieName不能为空', data: {} }
        })
      return
    }

    var cookies = _serviceCookies()
    var token = cookies[cookieName]

    if (!token) {
      cb &&
        cb('fail', {
          status: -1,
          result: { detail: cookieName + ' 对应token不存在', data: {} }
        })
      return
    }
    var ret = parseJwt({ token: token, key: jwtKey })
    if (ret.result && ret.result.status === 200) {
      var userId = ret.result.data.userId
      var cacheRet = cacheGet({ key: dbId + ':' + userId })

      if (cacheRet && cacheRet.status === 0) {
        try {
          var sessionData = JSON.parse(cacheRet.result.value)
        } catch (e) {
          cb &&
            cb('fail', {
              status: -1,
              result: { detail: 'cookie失效', data: {} }
            })
          return
        }
        if (ret.result.data.token === sessionData.token) {
          var totalPolicyList = []
          var roleObj = accountSysConfig.roles || {}
          if (Array.isArray(sessionData.roles)) {
            sessionData.roles.map(function(role) {
              var rolePolicies = roleObj[role] && roleObj[role]['policies']
              if (Array.isArray(rolePolicies)) {
                rolePolicies.map(function(policy) {
                  if (totalPolicyList.indexOf(policy) < 0) {
                    totalPolicyList.push(policy)
                  }
                })
              }
            })
          }
          sessionData['policies'] = totalPolicyList
          sessionData.token = token
          sessionData.userId = userId
          cb && cb('success', { status: 0, result: { data: sessionData } })
        } else {
          cb &&
            cb('fail', {
              status: -1,
              result: { detail: 'cookie失效', data: {} }
            })
        }
      } else {
        cb && cb('fail', { status: -1, result: { detail: cacheRet, data: {} } })
      }
    } else {
      cb && cb('fail', { status: -1, result: { detail: ret, data: {} } })
    }
  },
  resetToken: function resetToken(_sys, node, id, propObj, cb) {
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}

    var dbId = accountSysConfig && accountSysConfig.dbId

    var userId = propObj.userId

    if (userId === undefined) {
      cb && cb('fail', { status: -1, result: { detail: '用户ID为必填项' } })
      return
    }
    var obj = {}
    if (Array.isArray(userId)) {
      var keys = userId.map(function(id) {
        return dbId + ':' + id
      })
      obj = { keys: keys }
    } else {
      obj = { key: dbId + ':' + userId }
    }
    var cacheRet = cacheDel(obj)
    if (cacheRet && cacheRet.status === 0) {
      var nid = param._nid
      var policiesCookie =
        'ih5_policies_' +
        nid +
        '=' +
        encodeURIComponent(JSON.stringify([])) +
        '; Path=/; Max-Age= 0'
      setHttpHeader({ 'Set-Cookie': policiesCookie })
      cb && cb('success', cacheRet)
    } else {
      cb && cb('fail', cacheRet)
    }
  },
  getRoles: function getRoles(_sys, node, id, cb) {
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}

    var roleObj = accountSysConfig.roles || {}

    var tempArr = []
    Object.keys(roleObj).map(function(name) {
      tempArr.push({ name: name, order: roleObj[name]['order'] })
    })
    tempArr.sort(function(a, b) {
      if (a.order === undefined && b.order === undefined) return 0
      if (a.order === undefined) return 1
      if (b.order === undefined) return -1
      return a.order - b.order
    })
    var roles = tempArr.map(function(obj) {
      return obj.name
    })

    cb && cb('success', { status: 0, result: { roles: roles } })
  },
  getPolicies: function getPolicies(_sys, node, id, cb) {
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}

    var policies = accountSysConfig.policies || []
    cb && cb('success', { status: 0, result: { policies: policies } })
  },
  getRolePolicies: function getRolePolicies(_sys, node, id, cb) {
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}

    var roleObj = accountSysConfig.roles || {}
    var res = []
    Object.keys(roleObj).map(function(key) {
      var obj = roleObj[key]
      obj['name'] = key
      res.push(obj)
    })
    res.sort(function(a, b) {
      if (a.order === undefined && b.order === undefined) return 0
      if (a.order === undefined) return 1
      if (b.order === undefined) return -1
      return a.order - b.order
    })
    cb && cb('success', { status: 0, result: { policies: res } })
  },
  addRole: function addRole(_sys, node, id, propObj, cb) {
    var role = propObj.role
    var policies = propObj.policies
    var description = propObj.description || ''
    if (!role) {
      cb && cb('fail', { status: -1, result: { detail: '角色名必填' } })
      return
    } else if (!Array.isArray(policies)) {
      cb && cb('fail', { status: -1, result: { detail: '权限组需为数组' } })
      return
    }
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}
    var roles = accountSysConfig.roles

    if (roles instanceof Object) {
      if (Object.keys(roles).indexOf(role) > -1) {
        cb && cb('fail', { statue: -1, result: { detail: '角色名不能重复' } })
        return
      }
      accountSysConfig.roles[role] = {
        policies: policies,
        order: new Date().getTime(),
        description: description
      }
    } else {
      accountSysConfig.roles = {
        [role]: {
          policies: policies,
          order: new Date().getTime(),
          description: description
        }
      }
    }
    var ret = setDynConfig({
      id: accountSysId,
      config: JSON.stringify(accountSysConfig)
    })
    if (ret.status !== 0) {
      cb && cb('fail', ret)
    } else {
      cb && cb('success', ret)
    }
  },
  delRoles: function delRoles(_sys, node, id, propObj, cb) {
    var roleList = propObj.roleList
    if (!roleList) {
      cb &&
        cb('fail', { status: -1, result: { detail: '待删除角色名不能为空' } })
      return
    } else if (Array.isArray(roleList) && roleList.length === 0) {
      cb &&
        cb('fail', {
          status: -1,
          result: { detail: '待删除角色列表元素不能为0' }
        })
      return
    }

    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}
    var roles = accountSysConfig.roles
    if (!roles instanceof Object) {
      cb && cb('fail', { statue: 0, result: { detail: '角色信息不存在' } })
      return
    }
    if (typeof roleList === 'string') {
      if (!roles[roleList]) {
        cb && cb('fail', { status: -1, result: { detail: '待删除角色不存在' } })
        return
      }
      delete roles[roleList]
    } else if (Array.isArray(roleList)) {
      var errArr = []
      roleList.map(function(rol) {
        if (!roles[rol]) {
          errArr.push(rol)
          return
        }
        delete roles[rol]
      })
      if (errArr.length > 0) {
        cb &&
          cb('fail', {
            status: -1,
            result: { detail: '待删除角色' + errArr + '不存在' }
          })
        return
      }
    }

    var ret = setDynConfig({
      id: accountSysId,
      config: JSON.stringify(accountSysConfig)
    })
    if (ret.status !== 0) {
      cb && cb('fail', ret)
    } else {
      cb && cb('success', ret)
    }
  },
  updateRole: function updateRole(_sys, node, id, propObj, cb) {
    var role = propObj.role
    var policies = propObj.policies
    var rename = propObj.rename
    var description = propObj.description

    if (!role) {
      cb && cb('fail', { status: -1, result: { detail: '角色名必填' } })
      return
    } else if (policies && !Array.isArray(policies)) {
      cb && cb('fail', { status: -1, result: { detail: '权限组需为数组' } })
      return
    } else if (!policies && !rename && description === undefined) {
      cb &&
        cb('fail', {
          status: -1,
          result: { detail: 'policies,rename,description不能都为空' }
        })
      return
    }
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}
    var roles = accountSysConfig.roles
    if (roles instanceof Object && roles[role]) {
      if (policies) {
        roles[role]['policies'] = policies
      }
      if (description !== undefined) {
        roles[role]['description'] = description
      }
      if (rename) {
        if (roles[rename]) {
          cb &&
            cb('fail', { status: -1, result: { detail: '重命名的名称已存在' } })
          return
        } else {
          roles[rename] = roles[role]
          delete roles[role]
        }
      }

      var ret = setDynConfig({
        id: accountSysId,
        config: JSON.stringify(accountSysConfig)
      })
      if (ret.status !== 0) {
        cb && cb('fail', ret)
      } else {
        cb && cb('success', ret)
      }
    } else {
      cb && cb('fail', { status: -1, result: { detail: '角色信息不存在' } })
    }
  },
  updateRoles: function updateRoles(_sys, node, id, propObj, cb) {
    var roles = propObj.roles
    if (!roles instanceof Object) {
      cb &&
        cb('fail', { status: -1, result: { detail: 'roles数据必须为对象' } })
      return
    }
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}
    accountSysConfig.roles = roles
    var ret = setDynConfig({
      id: accountSysId,
      config: JSON.stringify(accountSysConfig)
    })
    if (ret.status !== 0) {
      cb && cb('fail', ret)
    } else {
      cb && cb('success', ret)
    }
  },
  clearRoles: function clearRoles(_sys, node, id, cb) {
    var accountSysId = _sys.get(node, id, 'id')
    var configRes = getDynConfig({ id: accountSysId })
    if (configRes.status !== 0) {
      cb && cb('fail', configRes)
      return
    }
    try {
      var accountSysConfig = JSON.parse(configRes.result.config)
    } catch (e) {}
    delete accountSysConfig.roles

    var ret = setDynConfig({
      id: accountSysId,
      config: JSON.stringify(accountSysConfig)
    })
    if (ret.status !== 0) {
      cb && cb('fail', ret)
    } else {
      cb && cb('success', ret)
    }
  }
}

console = {
  log: function(obj) {
    userLog({
      topic: 'console',
      level: 0,
      msg: 'log',
      data: obj
    })
  },
  warn: function(obj) {
    userLog({
      topic: 'console',
      level: 2,
      msg: 'warn',
      data: obj
    })
  }
}

function _randomString(len) {
  len = len || 16
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
  var _len = chars.length
  var res = ''
  for (var i = 0; i < len; i++) {
    res += chars.charAt(Math.floor(Math.random() * _len))
  }
  return res
}

// deep clone
function klona(x) {
  if (typeof x !== 'object') return x

  var k,
    tmp,
    str = Object.prototype.toString.call(x)

  if (str === '[object Object]') {
    if (x.constructor !== Object && typeof x.constructor === 'function') {
      tmp = new x.constructor()
      for (k in x) {
        if (x.hasOwnProperty(k) && tmp[k] !== x[k]) {
          tmp[k] = klona(x[k])
        }
      }
    } else {
      tmp = {} // null
      for (k in x) {
        if (k === '__proto__') {
          Object.defineProperty(tmp, k, {
            value: klona(x[k]),
            configurable: true,
            enumerable: true,
            writable: true
          })
        } else {
          tmp[k] = klona(x[k])
        }
      }
    }
    return tmp
  }

  if (str === '[object Array]') {
    k = x.length
    for (tmp = Array(k); k--; ) {
      tmp[k] = klona(x[k])
    }
    return tmp
  }

  if (str === '[object Date]') {
    return new Date(+x)
  }

  if (str === '[object RegExp]') {
    tmp = new RegExp(x.source, x.flags)
    tmp.lastIndex = x.lastIndex
    return tmp
  }

  return x
}

// sql语句解析
var sqlLexer = (function() {
  var BOOLEAN,
    DBLSTRING,
    LITERAL,
    NUMBER,
    SEPARATOR,
    SQL_CONDITIONALS,
    SQL_FUNCTIONS,
    SQL_OPERATORS,
    SQL_SORT_ORDERS,
    MATH,
    STAR,
    STRING,
    SUB_SELECT_OP,
    WHITESPACE,
    PLACEHOLDER

  function Lexer(sql, opts) {
    var bytesConsumed, i
    if (opts == null) {
      opts = {}
    }
    this.sql = sql
    this.preserveWhitespace = opts.preserveWhitespace || false
    this.tokens = []
    this.currentLine = 1
    this.placeholderCount = 0
    i = 0
    while ((this.chunk = sql.slice(i))) {
      bytesConsumed =
        this.keywordToken() ||
        this.starToken() ||
        this.booleanToken() ||
        this.functionToken() ||
        this.sortOrderToken() ||
        this.seperatorToken() ||
        this.operatorToken() ||
        this.mathToken() ||
        this.conditionalToken() ||
        this.subSelectOpToken() ||
        this.numberToken() ||
        this.stringToken() ||
        this.parensToken() ||
        this.whitespaceToken() ||
        this.literalToken() ||
        this.placeholderToken()
      if (bytesConsumed < 1) {
        throw new Error(
          "NOTHING CONSUMED: Stopped at - '" + this.chunk.slice(0, 30) + "'"
        )
      }
      i += bytesConsumed
    }
    this.token('EOF', '')
    this.postProcess()
  }

  Lexer.prototype.postProcess = function() {
    var i, j, len, next_token, ref, results, token
    ref = this.tokens
    results = []
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      token = ref[i]
      if (token[0] === 'STAR') {
        next_token = this.tokens[i + 1]
        if (!(next_token[0] === 'SEPARATOR' || next_token[0] === 'FROM')) {
          results.push((token[0] = 'MATH_MULTI'))
        } else {
          results.push(void 0)
        }
      } else {
        results.push(void 0)
      }
    }
    return results
  }

  Lexer.prototype.token = function(name, value, count) {
    return this.tokens.push([
      name,
      value,
      count !== undefined ? count : this.currentLine
    ])
  }

  Lexer.prototype.tokenizeFromRegex = function(
    name,
    regex,
    part,
    lengthPart,
    output
  ) {
    var match, partMatch
    if (part == null) {
      part = 0
    }
    if (lengthPart == null) {
      lengthPart = part
    }
    if (output == null) {
      output = true
    }
    if (!(match = regex.exec(this.chunk))) {
      return 0
    }
    partMatch = match[part]
    if (output) {
      if (name === 'PLACEHOLDER') {
        this.token(name, partMatch, this.placeholderCount++)
      } else {
        this.token(name, partMatch)
      }
    }
    return match[lengthPart].length
  }

  Lexer.prototype.tokenizeFromWord = function(name, word) {
    var match, matcher
    if (word == null) {
      word = name
    }
    word = this.regexEscape(word)
    matcher =
      ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM', 'DISTCOUNT'].indexOf(word) >= 0
        ? new RegExp('^(' + word + ')(?=\\()', 'ig')
        : /^(\w| )+$/.test(word)
        ? new RegExp('^(' + word + ')([ ,]|$)', 'ig')
        : new RegExp('^(' + word + ')', 'ig')
    match = matcher.exec(this.chunk)
    if (!match) {
      return 0
    }
    this.token(name, match[1])
    return match[1].length
  }

  Lexer.prototype.tokenizeFromList = function(name, list) {
    var entry, j, len, ret
    ret = 0
    for (j = 0, len = list.length; j < len; j++) {
      entry = list[j]
      ret = this.tokenizeFromWord(name, entry)
      if (ret > 0) {
        break
      }
    }
    return ret
  }

  Lexer.prototype.keywordToken = function() {
    return (
      this.tokenizeFromWord('SELECT') ||
      this.tokenizeFromWord('FROM') ||
      this.tokenizeFromWord('WHERE') ||
      this.tokenizeFromWord('GROUP BY') ||
      this.tokenizeFromWord('HAVING') ||
      this.tokenizeFromWord('ORDER BY') ||
      this.tokenizeFromWord('LIMIT') ||
      this.tokenizeFromWord('OFFSET') ||
      this.tokenizeFromWord('UPDATE') ||
      this.tokenizeFromWord('SET')
    )
  }

  Lexer.prototype.operatorToken = function() {
    return this.tokenizeFromList('OPERATOR', SQL_OPERATORS)
  }

  Lexer.prototype.conditionalToken = function() {
    return this.tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS)
  }

  Lexer.prototype.subSelectOpToken = function() {
    return this.tokenizeFromList('SUB_SELECT_OP', SUB_SELECT_OP)
  }

  Lexer.prototype.functionToken = function() {
    return this.tokenizeFromList('FUNCTION', SQL_FUNCTIONS)
  }

  Lexer.prototype.sortOrderToken = function() {
    return this.tokenizeFromList('DIRECTION', SQL_SORT_ORDERS)
  }

  Lexer.prototype.booleanToken = function() {
    return this.tokenizeFromList('BOOLEAN', BOOLEAN)
  }

  Lexer.prototype.mathToken = function() {
    return this.tokenizeFromList('MATH', MATH)
  }

  Lexer.prototype.starToken = function() {
    return this.tokenizeFromRegex('STAR', STAR)
  }

  Lexer.prototype.seperatorToken = function() {
    return this.tokenizeFromRegex('SEPARATOR', SEPARATOR)
  }

  Lexer.prototype.literalToken = function() {
    return this.tokenizeFromRegex('LITERAL', LITERAL, 1, 0)
  }

  Lexer.prototype.numberToken = function() {
    return this.tokenizeFromRegex('NUMBER', NUMBER)
  }

  Lexer.prototype.stringToken = function() {
    return (
      this.tokenizeFromRegex('STRING', STRING, 1, 0) ||
      this.tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0)
    )
  }

  Lexer.prototype.parensToken = function() {
    return (
      this.tokenizeFromRegex('LEFT_PAREN', /^\(/) ||
      this.tokenizeFromRegex('RIGHT_PAREN', /^\)/)
    )
  }

  Lexer.prototype.whitespaceToken = function() {
    var match, newlines, partMatch
    if (!(match = WHITESPACE.exec(this.chunk))) {
      return 0
    }
    partMatch = match[0]
    newlines = partMatch.replace(/[^\n]/, '').length
    this.currentLine += newlines
    if (this.preserveWhitespace) {
      this.token('WHITESPACE', partMatch)
    }
    return partMatch.length
  }

  Lexer.prototype.placeholderToken = function() {
    return this.tokenizeFromRegex('PLACEHOLDER', PLACEHOLDER)
  }

  Lexer.prototype.regexEscape = function(str) {
    return str.replace(/[-[\]{}()*+?.,\\^$|#]/g, '\\$&')
  }

  SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM', 'DISTCOUNT']

  SQL_SORT_ORDERS = ['ASC', 'DESC']

  SQL_OPERATORS = [
    '=',
    '!=',
    '>=',
    '>',
    '<=',
    '<',
    'LIKE',
    'NOT LIKE',
    'IS NOT',
    'IS'
  ]

  SUB_SELECT_OP = ['IN', 'NOT IN']

  SQL_CONDITIONALS = ['AND', 'OR']

  BOOLEAN = ['TRUE', 'FALSE', 'NULL']

  MATH = ['+']

  STAR = /^\*/

  SEPARATOR = /^,/

  WHITESPACE = /^[ \n\r]+/

  LITERAL = /^`?([a-z0-9_\-\[\]\/\$-]([a-z0-9_\-\[\]\/\$-]|:(?!:)){0,})`?/i

  NUMBER = /^([0-9]+|-[0-9]+)(\.[0-9]+)?/

  STRING = /^'([^\\']*(?:\\.[^\\']*)*)'/

  DBLSTRING = /^"([^\\"]*(?:\\.[^\\"]*)*)"/

  PLACEHOLDER = /^\?/

  return Lexer
})()

function sqlTokenize(sql, opts) {
  return new sqlLexer(sql, opts).tokens
}

// sql2json
var sql2json = (function() {
  var obtainType = function(token, lookAhead = null, noConvertToFunc = false) {
    if (
      token[0] === 'LITERAL' &&
      lookAhead &&
      lookAhead[0] === 'LEFT_PAREN' &&
      !noConvertToFunc
    ) {
      return 'FUNCTION'
    }
    return token[0]
  }

  function sql2json(sql, experimental = false) {
    if (!sql) {
      throw new Error('Sql required')
    }
    this.sql = sql
    this.experimental = experimental
    try {
      this.tokens = sqlTokenize(this.sql)
    } catch (err) {
      throw new Error('SQL tokenizer detected an error: ' + err.toString())
    }
    this.index = 0
    this.stack = []
    this.parsed = {}
  }

  sql2json.prototype.hasNext = function() {
    return this.index < this.tokens.length
  }

  sql2json.prototype.next = function() {
    return this.tokens[this.index++]
  }

  sql2json.prototype.lookAhead = function() {
    if (!this.hasNext()) {
      return null
    }
    return this.tokens[this.index]
  }

  sql2json.prototype.lookBackward = function() {
    if (this.index === 0) {
      return null
    }
    return this.tokens[this.index - 2]
  }

  sql2json.prototype.parseFunction = function(functionName, isInSelect) {
    var stack = []
    var findParen = false
    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead())) {
        case 'LITERAL':
        case 'DBLSTRING':
        case 'STRING':
          stack.push({
            value: token[1],
            type: 'literal'
          })
          break
        case 'NUMBER':
          stack.push({
            value: parseFloat(token[1]),
            type: 'number'
          })
          break
        case 'FUNCTION':
          stack.push(this.parseFunction(token[1], isInSelect))
          break
        case 'SEPARATOR':
          if (!findParen) {
            return {
              value: functionName,
              type: 'literal',
              alias: null
            }
          }
          break
        case 'OPERATOR':
          stack.push(this.parseNamedArgument(token[1], stack.pop()))
          break
        case 'LEFT_PAREN':
          findParen = true
          break
        case 'RIGHT_PAREN':
          if (!findParen) {
            this.index--
            return {
              type: 'literal',
              value: functionName
            }
          }
          return {
            type: 'function',
            alias: null,
            value: functionName,
            arguments: stack
          }
        default:
          if (!findParen) {
            this.index--
            return {
              value: functionName,
              type: 'literal',
              alias: null
            }
          }
          stack.push({
            value: token[1],
            type: 'literal'
          })
      }
    }
  }

  sql2json.prototype.parseSelect = function() {
    this.parsed.select = []

    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead(), true)) {
        case 'STAR':
          if (this.parsed.select.length === 0) {
            this.parsed.select.push({
              value: '*',
              alias: null,
              type: 'wildcard'
            })
          } else {
            throw new Error('The SELECT statement has errors')
          }
          break
        case 'LITERAL':
        case 'DBLSTRING':
        case 'STRING':
        case 'DIRECTION':
        case 'CONDITIONAL':
        case 'BOOLEAN':
          this.parsed.select.push({
            value: token[1],
            alias: null,
            type: 'literal'
          })
          break
        case 'FUNCTION':
          this.parsed.select.push(this.parseFunction(token[1], true))
          break
        case 'SEPARATOR':
          break
        case 'OPERATOR':
          if (['LIKE', 'like', 'IS', 'is'].indexOf(token[1]) >= 0) {
            this.parsed.select.push({
              value: token[1],
              alias: null,
              type: 'literal'
            })
          } else {
            throw new Error('The SELECT statement has errors')
          }
          break
        case 'SUB_SELECT_OP':
          if (token[1] === 'IN' || token[1] === 'in') {
            this.parsed.select.push({
              value: token[1],
              alias: null,
              type: 'literal'
            })
          } else {
            throw new Error('The SELECT statement has errors')
          }
          break
        default:
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseFrom = function() {
    var name = ''
    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead())) {
        case 'MATH_MULTI':
          name += token[1]
          break
        case 'LITERAL':
          name += token[1]
          break
        case 'NUMBER':
          name += token[1]
          break
        case 'STRING':
          name += "'" + token[1] + "'"
          break
        case 'DBLSTRING':
          name += '"' + token[1] + '"'
          break
        default:
          this.parsed.from = name
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseUpdate = function() {
    var name = ''
    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead())) {
        case 'MATH_MULTI':
          name += token[1]
          break
        case 'LITERAL':
          name += token[1]
          break
        case 'NUMBER':
          name += token[1]
          break
        case 'STRING':
          name += "'" + token[1] + "'"
          break
        case 'DBLSTRING':
          name += '"' + token[1] + '"'
          break
        default:
          this.parsed.update = name
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseSet = function() {
    var stack = []
    var left = []
    while (this.hasNext()) {
      var token = this.next()
      var tokenType = obtainType(token, this.lookAhead())
      switch (tokenType) {
        case 'LITERAL':
        case 'DBLSTRING':
        case 'STRING':
        case 'DIRECTION':
        case 'CONDITIONAL':
          if (left.length === 0) {
            if (stack.length > 0 && !stack[stack.length - 1].right) {
              stack[stack.length - 1].right = {
                type: 'literal',
                value: token[1]
              }
            } else {
              left.push({
                type: 'literal',
                value: token[1]
              })
            }
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'BOOLEAN':
          if (left.length === 0) {
            if (stack.length > 0 && !stack[stack.length - 1].right) {
              stack[stack.length - 1].right = {
                type: token[1] === 'null' ? 'null' : 'literal',
                value: token[1]
              }
            } else {
              left.push({
                type: 'literal',
                value: token[1]
              })
            }
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'NUMBER':
          if (
            left.length === 0 &&
            stack.length > 0 &&
            !stack[stack.length - 1].right
          ) {
            stack[stack.length - 1].right = {
              type: 'number',
              value: parseFloat(token[1])
            }
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'PLACEHOLDER':
          if (
            left.length === 0 &&
            stack.length > 0 &&
            !stack[stack.length - 1].right
          ) {
            stack[stack.length - 1].right = {
              type: 'placeholder',
              index: token[2]
            }
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'OPERATOR':
          if (token[1] === '=') {
            if (left[0]) {
              stack.push({
                type: 'operator',
                value: '=',
                left: left[0],
                right: undefined
              })
              left.pop()
            } else {
              throw new Error('The SET statement has errors')
            }
          } else if (['LIKE', 'like', 'IS', 'is'].indexOf(token[1]) >= 0) {
            if (left.length === 0) {
              if (stack.length > 0 && !stack[stack.length - 1].right) {
                stack[stack.length - 1].right = {
                  type: 'literal',
                  value: token[1]
                }
              } else {
                left.push({
                  type: 'literal',
                  value: token[1]
                })
              }
            } else {
              throw new Error('The SET statement has errors')
            }
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'MATH':
        case 'MATH_MULTI':
          if (left[0]) {
            stack.push({
              type: 'operator',
              value: token[1],
              left: left[0],
              right: undefined
            })
            left.pop()
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'SUB_SELECT_OP':
          if (token[1] === 'IN' || token[1] === 'in') {
            if (left.length === 0) {
              if (stack.length > 0 && !stack[stack.length - 1].right) {
                stack[stack.length - 1].right = {
                  type: 'literal',
                  value: token[1]
                }
              } else {
                left.push({
                  type: 'literal',
                  value: token[1]
                })
              }
            } else {
              throw new Error('The SET statement has errors')
            }
          } else {
            throw new Error('The SET statement has errors')
          }
          break
        case 'SEPARATOR':
          break
        default:
          this.parsed.set = stack
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseIn = function() {
    var stack = []
    while (this.hasNext()) {
      var token = this.next()
      var tokenType = obtainType(token, this.lookAhead())
      if (tokenType === 'PLACEHOLDER') {
        stack = {
          type: 'placeholder',
          index: token[2]
        }
        return stack
      }
      switch (tokenType) {
        case 'LEFT_PAREN':
        case 'SEPARATOR':
          break
        case 'DBLSTRING':
        case 'STRING':
          stack.push({
            value: token[1],
            type: 'literal'
          })
          break
        case 'NUMBER':
          stack.push({
            value: parseFloat(token[1]),
            type: 'number'
          })
          break
        case 'RIGHT_PAREN':
          return stack
        default:
          throw new Error('The WHERE statement has errors')
      }
    }
  }

  sql2json.prototype.parseNamedArgument = function(value, first) {
    var name = first.value

    while (this.hasNext()) {
      var token = this.next()
      var tokenType = obtainType(token, this.lookAhead())
      switch (tokenType) {
        case 'DBLSTRING':
        case 'LITERAL':
        case 'STRING':
          return {
            name,
            type: 'literal',
            value: token[1]
          }
        case 'NUMBER':
          return {
            name,
            type: 'number',
            value: parseFloat(token[1])
          }
        default:
          throw new Error(
            'Invalid type ' + tokenType + 'for named argument value'
          )
      }
    }
  }

  sql2json.prototype.parseWhere = function(isHavingClause) {
    var values = []
    var operators = []
    var opMap = {
      OPERATOR: 'operator',
      SUB_SELECT_OP: 'in',
      CONDITIONAL: 'conditional'
    }
    var top
    function peek(stack) {
      return stack[stack.length - 1] || null
    }
    function apply_operator(operators, values) {
      var operator = operators.pop()
      var right = values.pop()
      var left = values.pop()
      if (operator.type === 'operator' || operator.type === 'conditional') {
        values.push({
          type: operator.type,
          value: operator.value,
          left: left,
          right: right
        })
      } else if (operator.type === 'in') {
        values.push({
          type: operator.type,
          op: operator.value,
          value: left.value,
          arguments: right
        })
      }
    }
    function greater_precedence(op1, op2) {
      var precedences = {
        conditional: 0,
        operator: 1,
        in: 1
      }
      var result = precedences[op1.type] > precedences[op2.type]
      if (!result && op1.type === 'conditional' && op2.type === 'conditional') {
        if (
          ['and', 'AND'].indexOf(op1.value) >= 0 &&
          ['or', 'OR'].indexOf(op2.value) >= 0
        ) {
          result = true
        }
      }
      return result
    }
    while (this.hasNext()) {
      var token = this.next()
      var tokenType = obtainType(token, this.lookAhead())
      switch (tokenType) {
        case 'LITERAL':
        case 'DBLSTRING':
        case 'STRING':
        case 'DIRECTION':
        case 'BOOLEAN':
          values.push({
            type: 'literal',
            value: token[1]
          })
          break
        case 'NUMBER':
          values.push({
            type: 'number',
            value: parseFloat(token[1])
          })
          break
        case 'PLACEHOLDER':
          values.push({
            type: 'placeholder',
            index: token[2]
          })
          break
        case 'OPERATOR':
        case 'SUB_SELECT_OP':
        case 'CONDITIONAL':
          top = peek(operators)
          var operator = {
            type: opMap[tokenType],
            value: token[1]
          }
          while (
            top &&
            top.type !== 'bracket' &&
            greater_precedence(top, operator)
          ) {
            apply_operator(operators, values)
            top = peek(operators)
          }
          operators.push(operator)
          if (tokenType === 'SUB_SELECT_OP') {
            values.push(this.parseIn())
          }
          break
        case 'LEFT_PAREN':
          operators.push({
            value: '(',
            type: 'bracket'
          })
          break
        case 'RIGHT_PAREN':
          top = peek(operators)
          while (top && top.type !== 'bracket') {
            apply_operator(operators, values)
            top = peek(operators)
          }
          operators.pop() // Discard the '('
          break
        default:
          top = peek(operators)
          while (top && top.type !== 'bracket') {
            apply_operator(operators, values)
            top = peek(operators)
          }
          if (values.length === 1 && operators.length === 0) {
            if (!!isHavingClause) {
              // having子句
              this.parsed.having = (this.parsed.having
                ? this.parsed.having
                : []
              ).concat(values)
            } else {
              // where子句
              this.parsed.where = (this.parsed.where
                ? this.parsed.where
                : []
              ).concat(values)
            }
          } else {
            if (!!isHavingClause) {
              throw new Error('The HAVING statement has errors')
            } else {
              throw new Error('The WHERE statement has errors')
            }
          }
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseOrder = function() {
    var stack = []
    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead())) {
        case 'LITERAL':
        case 'DBLSTRING':
        case 'STRING':
        case 'CONDITIONAL':
        case 'BOOLEAN':
          stack.push({
            type: 'literal',
            value: token[1],
            alias: null,
            direction: null
          })
          break
        case 'OPERATOR':
          if (['LIKE', 'like', 'IS', 'is'].indexOf(token[1]) >= 0) {
            stack.push({
              type: 'literal',
              value: token[1],
              alias: null,
              direction: null
            })
          } else {
            throw new Error('The ORDER statement has errors')
          }
          break
        case 'SUB_SELECT_OP':
          if (token[1] === 'IN' || token[1] === 'in') {
            stack.push({
              type: 'literal',
              value: token[1],
              alias: null,
              direction: null
            })
          } else {
            throw new Error('The ORDER statement has errors')
          }
          break
        case 'DIRECTION':
          var prev = this.lookBackward()
          if (prev && (prev[0] === 'ORDER BY' || prev[0] === 'SEPARATOR')) {
            stack.push({
              type: 'literal',
              value: token[1],
              alias: null,
              direction: null
            })
          } else {
            stack[stack.length - 1].direction = token[1]
          }
          break
        case 'SEPARATOR':
          break
        default:
          this.parsed.orderBy = stack
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseLimit = function() {
    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead())) {
        case 'NUMBER':
          this.parsed.limit = parseInt(token[1], 10)
          return
        case 'PLACEHOLDER':
          this.parsed.limit = {
            type: 'placeholder',
            index: token[2]
          }
          break
        default:
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseOfsset = function() {
    while (this.hasNext()) {
      var token = this.next()
      switch (obtainType(token, this.lookAhead())) {
        case 'NUMBER':
          this.parsed.offset = parseInt(token[1], 10)
          return
        case 'PLACEHOLDER':
          this.parsed.offset = {
            type: 'placeholder',
            index: token[2]
          }
          break
        default:
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parseGroup = function() {
    var stack = []
    while (this.hasNext()) {
      var token = this.next()
      var tokenType = obtainType(token, this.lookAhead())
      switch (tokenType) {
        case 'SEPARATOR':
          break
        case 'LITERAL':
        case 'DBLSTRING':
        case 'STRING':
        case 'DIRECTION':
        case 'CONDITIONAL':
        case 'BOOLEAN':
          stack.push({
            type: 'literal',
            value: token[1]
          })
          break
        case 'OPERATOR':
          if (['LIKE', 'like', 'IS', 'is'].indexOf(token[1]) >= 0) {
            stack.push({
              type: 'literal',
              value: token[1]
            })
          } else {
            throw new Error('The GROUP statement has errors')
          }
          break
        case 'SUB_SELECT_OP':
          if (token[1] === 'IN' || token[1] === 'in') {
            stack.push({
              type: 'literal',
              value: token[1]
            })
          } else {
            throw new Error('The GROUP statement has errors')
          }
          break
        default:
          this.parsed.group = stack
          this.index--
          return
      }
    }
  }

  sql2json.prototype.parse = function() {
    while (this.hasNext()) {
      var token = this.next()
      var tokenType = obtainType(token, this.lookAhead())
      switch (tokenType) {
        case 'SELECT':
          this.parseSelect()
          break
        case 'FROM':
          this.parseFrom()
          break
        case 'WHERE':
          this.parseWhere()
          break
        case 'GROUP BY':
          this.parseGroup()
          break
        case 'HAVING':
          this.parseWhere(true)
          break
        case 'ORDER BY':
          this.parseOrder()
          break
        case 'LIMIT':
          this.parseLimit()
          break
        case 'OFFSET':
          this.parseOfsset()
          break
        case 'UPDATE':
          this.parseUpdate()
          break
        case 'SET':
          this.parseSet()
          break
        case 'EOF':
          return
        default:
          throw new Error('Unsupported query element detected: ' + token[1])
      }
    }
  }

  sql2json.prototype.toJSON = function() {
    this.parse()
    return this.parsed
  }

  return sql2json
})()

var $result = {}
var $timerServiceResult = undefined // 定时服务的记录
var $self = 0
var $sys = {
  get: function(node, id, name) {
    var vars = param._modid ? $vars[param._modid] : $vars
    var n = name.split('.')
    var p = vars[id]
    if (param._modid && p && p.inModConfig) {
      return _getModConfig(id)
    }
    if (p) {
      for (var i = 0; i < n.length; i++) {
        p = p[n[i]]
      }
      return p
    } else {
      return undefined
    }
  },
  set: function(node, id, name, value) {
    var vars = param._modid ? $vars[param._modid] : $vars
    vars[id] = vars[id] || {}
    return (vars[id][name] = value)
  },
  func: function(className, node, id, name) {
    var args = [$sys, node, id]
    for (var i = 4; i < arguments.length; i++) {
      args.push(arguments[i])
    }
    return $funcs[className][name].apply(null, args)
  },
  lineno: function() {
    // 不需要做任何事情
  },
  invoke: function(sid, param, cb) {
    var sarr = sid.split('.')
    var result = _serviceCmd(sarr[0], param, sarr[1])
    if (cb && result) {
      if (result.status === 0) {
        cb('success', result.result)
      } else {
        if (result.result) {
          if (result.result.code === 408) {
            cb('timeout', result.result)
          } else {
            cb('fail', result.result)
          }
        } else {
          cb('fail', { detail: 'error' })
        }
      }
    }
  },
  util: sysUtil,
  lang: param._lang || 'zh'
}

//cache
